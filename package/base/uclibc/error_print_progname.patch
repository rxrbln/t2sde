# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../uclibc/error_print_progname.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

--- uClibc/libc/misc/error/error.c.orig	2006-08-30 09:10:31.000000000 +0200
+++ uClibc/libc/misc/error/error.c	2006-09-02 16:18:05.000000000 +0200
@@ -25,6 +25,9 @@
 #include <stdlib.h>
 #include <string.h>
 #include <error.h>
+#ifdef __UCLIBC_HAS_THREADS__
+# include <pthread.h>
+#endif
 
 libc_hidden_proto(strcmp)
 libc_hidden_proto(strerror)
@@ -44,14 +47,21 @@
 /* If NULL, error will flush stdout, then print on stderr the program
    name, a colon and a space.  Otherwise, error will call this
    function without parameters instead.  */
-/* void (*error_print_progname) (void) = NULL; */
+void (*error_print_progname) (void) = NULL;
 
 extern __typeof(error) __error attribute_hidden;
 void __error (int status, int errnum, const char *message, ...)
 {
     va_list args;
 
+    __STDIO_AUTO_THREADLOCK_VAR;
     fflush (stdout);
+    __STDIO_AUTO_THREADLOCK(stderr);
+
+    if (error_print_progname)
+	(*error_print_progname) ();
+    else
+	fprintf(stderr, "%s: ", __uclibc_progname);
 
     va_start (args, message);
     vfprintf (stderr, message, args);
@@ -61,8 +71,10 @@
 	fprintf (stderr, ": %s", strerror (errnum));
     }
     putc ('\n', stderr);
+    fflush (stderr);
     if (status)
 	exit (status);
+    __STDIO_AUTO_THREADUNLOCK(stderr);
 }
 weak_alias(__error,error)
 
@@ -71,6 +83,7 @@
 	       unsigned int line_number, const char *message, ...)
 {
     va_list args;
+    __STDIO_AUTO_THREADLOCK_VAR;
 
     if (error_one_per_line) {
 	static const char *old_file_name;
@@ -86,6 +99,12 @@
     }
 
     fflush (stdout);
+    __STDIO_AUTO_THREADLOCK(stderr);
+
+    if (error_print_progname)
+	(*error_print_progname) ();
+    else
+	fprintf(stderr, "%s: ", __uclibc_progname);
 
     if (file_name != NULL)
 	fprintf (stderr, "%s:%d: ", file_name, line_number);
@@ -99,7 +118,9 @@
 	fprintf (stderr, ": %s", strerror (errnum));
     }
     putc ('\n', stderr);
+    fflush (stderr);
     if (status)
 	exit (status);
+
+    __STDIO_AUTO_THREADUNLOCK(stderr);
 }
-weak_alias(__error_at_line,error_at_line)
