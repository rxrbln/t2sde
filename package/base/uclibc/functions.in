#!/bin/sh

# $conffiles is a list of patters of the form
# ^[XO-] <pattern> [<value>]
# X means enable, O disable, and - removes it
# pattern can use '*' as a wildcard for [^ #]
# optionaly can set a value different that y
apply_conffiles() {
	local file= rule=
	local action= prerule= value= x=

	if [ ! -f $builddir/config.sed ]; then
	for file in $conffiles; do if [ -f "$file" ]; then
		while read action prerule value x; do
			rule="${prerule//\*/[^ #]*}"
			rule="^\(# \)\?\($rule\)[= ].*\$"
			
			if [ -z "$value" ]; then
				value='y'
			fi
			case "$action" in
				X)	echo "apply_conffiles: rule $prerule=$value."
					echo "s,$rule,\2=$value,g" >> $builddir/config.sed
					;;
				O)	echo "apply_conffiles: rule unset $prerule."
					echo "s,$rule,# \2 is not set,g" >> $builddir/config.sed
					;;
				-)	echo "apply_conffiles: rule remove $prerule."
					echo "s,$rule,,g" >> $builddir/config.sed
					;;
				*)
					abort "apply_conffiles: bad rule $action $prerule $value"
					;;
			esac
		done < $file;
	fi ; done
	fi
	sed -f $builddir/config.sed .config > $1
}

# get default config, and filter considering <n>
# levels, because new options can appear and other disappear
auto_config() {
	local j=1 n="${1:-1}"

	# defconfig
	eval "$MAKE defconfig $makeopt"
	cp -v .config .config.$j

	j=2 ; for (( i=1 ; i<n ; i++, j++ )) {
		apply_conffiles .config.$j
		cp -v .config.$j .config
		
		yes '' | eval $MAKE oldconfig $makeopt

		(( j++ )) ; cp -v .config .config.$j
	}
}

