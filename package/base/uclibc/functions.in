#!/bin/sh
# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../uclibc/functions.in
# Copyright (C) 2004 - 2007 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. A copy of the
# GNU General Public License can be found in the file COPYING.
# --- T2-COPYRIGHT-NOTE-END ---

# $conffiles is a list of patters of the form
# ^[XO-] <pattern> [<value>]
# X means enable, O disable, and - removes it
# pattern can use '*' as a wildcard for [^ #]
# optionaly can set a value different that y
apply_conffiles() {
	local file= rule=
	local action= prerule= value= x=

	if [ ! -f $builddir/config.sed ]; then
	for file in $conffiles $extraconffiles; do if [ -f "$file" ]; then
		sed -e '/^[ \t]*$/d;' -e '/^[ \t]*#.*/d;' "$file" |
		while read action prerule value x; do
			[ "${action:0:1}" = "#" -o "$action" = "" ] && continue
			rule="$(echo $prerule | sed 's/\*/[^ #]*/')"
			rule="^\(# \)\?\($rule\)[= ].*\$"
			
			if [ -z "$value" ]; then
				value='y'
			else
				value=\"$(eval echo $value)\"
			fi
			case "$action" in
				X)	echo "apply_conffiles: rule $prerule=$value."
					echo "s,$rule,\2=$value,g" >> $builddir/config.sed
					;;
				O)	echo "apply_conffiles: rule unset $prerule."
					echo "s,$rule,# \2 is not set,g" >> $builddir/config.sed
					;;
				-)	echo "apply_conffiles: rule remove $prerule."
					echo "s,$rule,,g" >> $builddir/config.sed
					;;
				*)
					abort "apply_conffiles: bad rule $action $prerule $value"
					;;
			esac
		done
	fi ; done
	fi
	sed -f $builddir/config.sed .config > $1
}

# get default config, and filter considering <n>
# levels, because new options can appear and other disappear
auto_config() {
	local j=1 n="${1:-1}"

	# defconfig
	eval "$MAKE defconfig $makeopt"
	cp -v .config .config.$j

	j=2 ; for (( i=1 ; i<n ; i++, j++ )) {
		apply_conffiles .config.$j
		cp -v .config.$j .config
		
		yes '' | eval $MAKE oldconfig $makeopt

		(( j++ )) ; cp -v .config .config.$j
	}
}

# Processor optimization
# uClibc handles some pre-processing and optimization based on
# the selected target CPU, which does not match the T2 $cpu
uclibc_mapx86cpu() {
	case $SDECFG_X86_OPT in
		i386)			echo "386" ;;
		i486)			echo "486" ;;
		c3)			echo "CYRIXIII" ;;
		c3-2)			echo "NEHEMIAH" ;;
		pentium)		echo "586" ;;
		pentium-mmx)		echo "586MMX" ;;
		pentiumpro)		echo "686" ;;
		pentium2)		echo "PENTIUMII" ;;
		pentium3)		echo "PENTIUMIII" ;;
		pentium-m)		echo "PENTIUMIII" ;;
		pentium4)		echo "PENTIUM4" ;;
                k6|k6-2|k6-3)		echo "K6" ;;
		athlon*)		echo "K7" ;;
		*)			echo "" ;;
	esac
}
uclibc_mapMIPScpu() {
	case $SDECFG_MIPS_OPT in
		mips1)			echo "ISA_1" ;;
		mips2)			echo "ISA_2" ;;
		mips3)			echo "ISA_3" ;;
		mips4)			echo "ISA_4" ;;
		mips32)			echo "ISA_MIPS32" ;;
		mips32r2)		echo "ISA_MIPS32R2" ;;
		mips64)			echo "ISA_MIPS64" ;;
		*)			echo "" ;;
	esac
}
