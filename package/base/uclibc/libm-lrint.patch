# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../uclibc/libm-lrint.patch
# Copyright (C) 2007 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

--- /dev/null   1970-01-01 01:00:00.000000000 +0100
+++ ./libm/lrint.c      2005-09-27 12:14:02.000000000 +0200
@@ -0,0 +1,48 @@
+#include "math.h"
+
+#if defined(__TARGET_i386__) || defined(__TARGET_x86_64__)
+
+#define __lrint_code \
+  long int __lrintres;                                                        \
+  __asm__ __volatile__                                                        \
+    ("fistpl %0"                                                              \
+     : "=m" (__lrintres) : "t" (x) : "st");                                   \
+  return __lrintres
+
+
+#ifdef __STDC__
+        long int lrint(double x)
+#else
+        long int lrint(x)
+        double x;
+#endif
+{
+__lrint_code;
+}
+
+
+#ifdef __STDC__
+        long int lrintf(float x)
+#else
+        long int lrintf(x)
+        float x;
+#endif
+{
+__lrint_code;
+}
+
+
+#ifdef __STDC__
+        long int lrintl(long double x)
+#else
+        long int lrintl(x)
+        long double x;
+#endif
+{
+__lrint_code;
+}
+
+#else /* generic code */
+//long int lrintf(float x) { return lrint( (double)x); }
+long int lrintl(long double x) { return lrint( (double)x); }
+#endif

--- /dev/null   1970-01-01 01:00:00.000000000 +0100
+++ ./libm/llrint.c     2005-09-27 12:14:28.000000000 +0200
@@ -0,0 +1,49 @@
+#include "math.h"
+
+#if defined(__TARGET_i386__) || defined(__TARGET_x86_64__)
+
+#define __llrint_code \
+  long long int __llrintres;                                                  \
+  __asm__ __volatile__                                                        \
+    ("fistpll %0"                                                             \
+     : "=m" (__llrintres) : "t" (x) : "st");                                  \
+  return __llrintres
+
+
+#ifdef __STDC__
+        long long int llrint(double x)
+#else
+        long long int llrint(x)
+        double x;
+#endif
+{
+__llrint_code;
+}
+
+
+#ifdef __STDC__
+        long long int llrintf(float x)
+#else
+        long long int llrintf(x)
+        float x;
+#endif
+{
+__llrint_code;
+}
+
+
+#ifdef __STDC__
+        long long int llrintl(long double x)
+#else
+        long long int llrintl(x)
+        long double x;
+#endif
+{
+__llrint_code;
+}
+
+#else /* generic code */
+long long int llrint(double x) { return (long long int) lrint(x); }
+long long int llrintf(float x) { return (long long int) lrint((double)x); }
+long long int llrintl(long double x) { return (long long int) lrint((double)x); }
+#endif

--- uClibc/libm/Makefile.in.orig	2006-08-30 09:10:10.000000000 +0200
+++ uClibc/libm/Makefile.in	2006-09-04 11:38:10.000000000 +0200
@@ -54,6 +54,7 @@
 	s_erf.c s_expm1.c s_fabs.c s_finite.c s_floor.c s_frexp.c \
 	s_ilogb.c s_ldexp.c s_lib_version.c s_lround.c s_llround.c \
 	s_log1p.c s_logb.c s_matherr.c s_modf.c s_nextafter.c s_round.c \
+	lrint.c llrint.c \
 	s_rint.c s_scalbn.c s_signgam.c s_significand.c s_sin.c s_tan.c \
 	s_tanh.c w_acos.c w_acosh.c w_asin.c w_atan2.c w_atanh.c w_cabs.c \
 	w_cosh.c w_drem.c w_exp.c w_fmod.c w_gamma.c w_gamma_r.c \
