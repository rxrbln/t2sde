#!/bin/sh
. $confdir/functions.in

uclibc_preparelocale() {
	find ./charmaps -name "*.pairs" > codesets.txt
	cp LOCALES locales.txt
}
uclibc_kernellinks() {
	ln -svf $root/usr/include/linux include/linux
	ln -svf $root/usr/include/asm   include/asm
}

if [ $ROCKCFG_CROSSBUILD = 1 ]; then
	$SED -i "s,^CROSS=.*,CROSS=$bindir/${arch_target}-,g" Rules.mak
fi

# rulesets
var_append conffiles ' ' $confdir/clean_arch.config
var_append conffiles ' ' /tmp/$$.config

# i'll use this file for the generated rules
rm -f /tmp/$$.config
{
	# TARGET_ARCH
	cpu="`echo "$arch_machine" | sed -e s/i.86/i386/ `"
	echo "X TARGET_$cpu"
	echo "X TARGET_ARCH \"$cpu\""
	if [ "$arch_bigendian" = "yes" ]; then
		echo "X ARCH_BIG_ENDIAN"
	else
		echo "X ARCH_LITTLE_ENDIAN"
	fi

	# CONFIG_
	if [ "$arch" == "x86" ]; then
		case "$ROCKCFG_X86_OPT" in
			generic)	echo "X CONFIG_GENERIC_386" ;;	
			i386)		echo "X CONFIG_386" ;;
			i486)		echo "X CONFIG_486" ;;
			pentium)	echo "X CONFIG_586" ;;
			pentium-mmx)	echo "X CONFIG_586MMX" ;;
			pentiumpro|pentium2)
					echo "X CONFIG_686" ;;
			pentium3)	echo "X CONFIG_PENTIUMIII" ;;
			pentium4)	echo "X CONFIG_PENTIUM4" ;;
			k6*)		echo "X CONFIG_K6"	;;
			athlon*)	echo "X CONFIG_K7"	;;
			via-c3*)	echo "X CONFIG_CYRIXIII" ;;
		esac
	fi

	# PREFIX
	if [ $stagelevel -eq 0 ]; then
		echo "X KERNEL_SOURCE \"$base/build/$ROCKCFG_ID/usr\""
	else
		echo "X KERNEL_SOURCE \"$root/usr\""
	fi
	echo "X RUNTIME_PREFIX \"/\""
	#echo "X DEVEL_PREFIX \"/usr/lib/uclibc\""	# NOTE: why there?
	echo "X DEVEL_PREFIX \"/usr\""
	echo "X SHARED_LIB_LOADER_PREFIX \"/lib\""

	# locale
	if [ "$ROCKCFG_DISABLE_NLS" = "0" ]; then
		echo "X UCLIBC_HAS_LOCALE"
	fi
	
	# ld.so preload
	echo "X LDSO_PRELOAD_FILE_SUPPORT"

	# util-linux needs it to build some mounts
	# FIXME: this has to be done in the oposite way (disable those mounts 
	#        if libc doesn't have support)
	echo "X UCLIBC_HAS_RPC"
	# echo "X UCLIBC_HAS_FULL_RPC"

	# to get rint (iproute2)
	echo "X DO_C99_MATH"

	# to make reiserfsprogs happy
	echo "X UCLIBC_HAS_GLIBC_CUSTOM_PRINTF"
	# to make sed happy
	echo "X UCLIBC_HAS_WCHAR"
} > /tmp/$$.config

# copy base config from config/$config
if [ -e $confdir/uclibc.cfg ] ; then
	cp -av $confdir/uclibc.cfg .config
fi

if [ "$ROCKCFG_DISABLE_NLS" = "0" ]; then
	hook_add preconf 5 '( cd extra/locale; uclibc_preparelocale )'
	var_append patchfiles ' ' $confdir/make_locale_after_headers.diff
fi

uclibc_stage0() {
	hook_eval preconf
	auto_config 2
	eval $MAKE $makeopt headers
	
	# remove symlinks to avoid shares (install_dev)
	rm -vf include/{asm,asm-generic,linux}

	eval $MAKE $makeinstopt install_dev
}

uclibc_main() {
	hook_eval preconf
	auto_config 2
	eval $MAKE $makeopt pregen
	eval $MAKE $makeopt all
		
	# remove symlinks to avoid shares (install_dev)
	rm -vf include/{asm,asm-generic,linux}

	eval $MAKE $makeinstopt install_dev
	eval $MAKE $makeinstopt install_runtime

	# utils (ldd, ldconfig )
	uclibc_kernellinks
	eval $MAKE $makeopt -C utils
	eval $MAKE $makeinstopt install_utils
}

#var_append makeopt ' ' "RUNTIME_PREFIX=/ DEVEL_PREFIX=/usr"	# this or base config must point to /usr
var_remove_regex makeopt ' ' 'prefix=[^ ]*'

if [ $stagelevel -eq 0 ]; then
	var_append makeopt ' ' PREFIX=$base/build/$ROCKCFG_ID
	custmain=uclibc_stage0
else
	var_append makeopt ' ' PREFIX=$root
	custmain=uclibc_main
fi

hook_add postdoc 5 'cp -v .config $docdir/'
makeinstopt="$makeopt"
runconf=0
