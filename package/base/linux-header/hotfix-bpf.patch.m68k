# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by scripts/Create-CopyPatch.
# 
# T2 SDE: package/*/linux-header/hotfix-bpf.patch.m68k
# Copyright (C) 2021 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

strace:
bpf_attr_check.c:992:2: error: static assertion failed: "bpf_prog_info_struct.nr_jited_ksyms offset mismatch"
  992 |  static_assert(offsetof(struct bpf_prog_info_struct, nr_jited_ksyms) == offsetof(struct bpf_prog_info, nr_jited_ksyms),

--- linux-5.1/include/uapi/linux/bpf.h.vanilla	2021-04-15 22:52:34.295291364 +0200
+++ linux-5.1/include/uapi/linux/bpf.h	2021-04-15 22:58:16.850315998 +0200
@@ -342,7 +342,7 @@
 			__aligned_u64 value;
 			__aligned_u64 next_key;
 		};
-		__u64		flags;
+               __aligned_u64   flags;
 	};
 
 	struct { /* anonymous struct used by BPF_PROG_LOAD command */
@@ -425,7 +425,7 @@
 	} query;
 
 	struct {
-		__u64 name;
+               __aligned_u64 name;
 		__u32 prog_fd;
 	} raw_tracepoint;
 
@@ -449,8 +449,8 @@
 						 */
 		__u32		prog_id;	/* output: prod_id */
 		__u32		fd_type;	/* output: BPF_FD_TYPE_* */
-		__u64		probe_offset;	/* output: probe_offset */
-		__u64		probe_addr;	/* output: probe_addr */
+               __aligned_u64   probe_offset;   /* output: probe_offset */
+               __aligned_u64   probe_addr;     /* output: probe_addr */
 	} task_fd_query;
 } __attribute__((aligned(8)));
 
@@ -2611,7 +2611,7 @@
 #define __bpf_md_ptr(type, name)	\
 union {					\
 	type name;			\
-	__u64 :64;			\
+       __aligned_u64 :64;              \
 } __attribute__((aligned(8)))
 
 /* user accessible mirror of in-kernel sk_buff.
@@ -2862,15 +2862,15 @@
 	__u32 xlated_prog_len;
 	__aligned_u64 jited_prog_insns;
 	__aligned_u64 xlated_prog_insns;
-	__u64 load_time;	/* ns since boottime */
+       __aligned_u64 load_time;        /* ns since boottime */
 	__u32 created_by_uid;
 	__u32 nr_map_ids;
 	__aligned_u64 map_ids;
 	char name[BPF_OBJ_NAME_LEN];
 	__u32 ifindex;
 	__u32 gpl_compatible:1;
-	__u64 netns_dev;
-	__u64 netns_ino;
+       __aligned_u64 netns_dev;
+       __aligned_u64 netns_ino;
 	__u32 nr_jited_ksyms;
 	__u32 nr_jited_func_lens;
 	__aligned_u64 jited_ksyms;
@@ -2887,8 +2887,8 @@
 	__u32 jited_line_info_rec_size;
 	__u32 nr_prog_tags;
 	__aligned_u64 prog_tags;
-	__u64 run_time_ns;
-	__u64 run_cnt;
+       __aligned_u64 run_time_ns;
+       __aligned_u64 run_cnt;
 } __attribute__((aligned(8)));
 
 struct bpf_map_info {
@@ -2901,8 +2901,8 @@
 	char  name[BPF_OBJ_NAME_LEN];
 	__u32 ifindex;
 	__u32 :32;
-	__u64 netns_dev;
-	__u64 netns_ino;
+       __aligned_u64 netns_dev;
+       __aligned_u64 netns_ino;
 	__u32 btf_id;
 	__u32 btf_key_type_id;
 	__u32 btf_value_type_id;
