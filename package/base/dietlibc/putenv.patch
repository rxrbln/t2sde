# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../dietlibc/putenv.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

The orignial function does improperly allocate the memory for the new
environment with a origenv. Also we need the origenv available for
clearenv(). Substituted temp -> value for readability.

   - Rene Rebe <rene@exactcode.de>

--- dietlibc-0.29/lib/putenv.c	2002-07-03 22:33:38.000000000 +0200
+++ dietlibc-0.29-fixed/lib/putenv.c	2006-02-11 20:37:25.000000000 +0100
@@ -2,20 +2,22 @@
 #include <string.h>
 #include <errno.h>
 
+char **origenv; /* also used by clearenv */
+
 int putenv(const char *string) {
   size_t len;
   int envc;
   int remove=0;
-  char *tmp;
+  char *value;
   const char **ep;
-  char **newenv;
-  static char **origenv;
+
   if (!origenv) origenv=environ;
-  if (!(tmp=strchr(string,'='))) {
+
+  if (!(value=strchr(string,'='))) {
     len=strlen(string);
     remove=1;
   } else
-    len=tmp-string+1;
+    len=value-string+1;
   for (envc=0, ep=(const char**)environ; *ep; ++ep) {
     if (*string == **ep && !memcmp(string,*ep,len)) {
       if (remove) {
@@ -28,13 +30,15 @@
     }
     ++envc;
   }
-  if (tmp) {
-    newenv = (char**) realloc(environ==origenv?0:origenv,
-			      (envc+2)*sizeof(char*));
+  if (value) {
+    char **newenv = (char**) realloc(environ==origenv?0:environ,
+                                     (envc+2)*sizeof(char*));
     if (!newenv) return -1;
-    newenv[0]=(char*)string;
-    memcpy(newenv+1,environ,(envc+1)*sizeof(char*));
+    if (environ==origenv)
+      memcpy(newenv,environ,(envc)*sizeof(char*));
     environ=newenv;
+    environ[envc]=(char*)string;
+    environ[envc+1]=0;
   }
   return 0;
 }
