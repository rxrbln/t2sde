# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../dietlibc/signal-cvs.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

From dietlibc CVS, fixes for alpha, but help others as well, I built
my latest SPARC binaries with it and am too overworked to check if
sparc would work without. However alpha should work anyway and thus
here it is.

--- dietlibc-0.29/include/signal.h	2005-03-15 09:51:22.000000000 +0100
+++ dietlibc/include/signal.h	2005-09-21 09:33:08.000000000 +0200
@@ -232,9 +232,9 @@
 typedef sighandler_t __sighandler_t;	/* shoot the glibc people! */
 #endif
 
-#define SIG_DFL ((sighandler_t)0)	/* default signal handling */
-#define SIG_IGN ((sighandler_t)1)	/* ignore signal */
-#define SIG_ERR ((sighandler_t)-1)	/* error return from signal */
+#define SIG_DFL ((sighandler_t)0L)	/* default signal handling */
+#define SIG_IGN ((sighandler_t)1L)	/* ignore signal */
+#define SIG_ERR ((sighandler_t)-1L)	/* error return from signal */
 
 typedef union sigval {
   int sival_int;
@@ -249,7 +249,7 @@
 #endif
 
 #ifdef __sparc_v9__
-typedef int __band_t;
+typedef int32_t __band_t;
 #else
 typedef long __band_t;
 #endif
@@ -267,8 +267,8 @@
     } _kill;
     /* POSIX.1b timers */
     struct {
-      unsigned int _timer1;
-      unsigned int _timer2;
+      uint32_t _timer1;
+      uint32_t _timer2;
     } _timer;
     /* POSIX.1b signals */
     struct {
@@ -280,7 +280,7 @@
     struct {
       pid_t _pid;		/* which child */
       uid_t _uid;		/* sender's uid */
-      int _status;		/* exit code */
+      int32_t _status;		/* exit code */
       clock_t _utime;
       clock_t _stime;
     } _sigchld;
@@ -291,7 +291,7 @@
     /* SIGPOLL */
     struct {
       __band_t _band;	/* POLL_IN, POLL_OUT, POLL_MSG */
-      int _fd;
+      int32_t _fd;
     } _sigpoll;
   } _sifields;
 } siginfo_t;
@@ -438,14 +438,7 @@
 } sigset_t;
 
 struct sigaction {
-#if defined(__alpha__)
-  union {
-    sighandler_t _sa_handler;
-    void (*_sa_sigaction)(int, siginfo_t*, void*);
-  } _u;
-  sigset_t sa_mask;
-  unsigned long sa_flags;
-#elif defined(__ia64__) || defined(__hppa__)
+#if defined(__alpha__) || defined(__ia64__) || defined(__hppa__)
   union {
     sighandler_t _sa_handler;
     void (*_sa_sigaction)(int, siginfo_t*, void*);
@@ -460,7 +453,7 @@
   } _u;
   sigset_t sa_mask;
   void (*sa_restorer)(void);
-  int sa_resv[1];
+  int32_t sa_resv[1];
 #else	/* arm, i386, ppc, s390, sparc, saprc64, x86_64 */
   union {
     sighandler_t _sa_handler;
@@ -483,16 +476,16 @@
 
 #define SIGEV_MAX_SIZE  64
 #ifndef SIGEV_PAD_SIZE
-#define SIGEV_PAD_SIZE  ((SIGEV_MAX_SIZE/sizeof(int)) - 3)
+#define SIGEV_PAD_SIZE  ((SIGEV_MAX_SIZE/sizeof(int32_t)) - 3)
 #endif
 
 typedef struct sigevent {
   sigval_t sigev_value;
-  int sigev_signo;
-  int sigev_notify;
+  int32_t sigev_signo;
+  int32_t sigev_notify;
   union {
-    int _pad[SIGEV_PAD_SIZE];
-    int _tid;
+    int32_t _pad[SIGEV_PAD_SIZE];
+    int32_t _tid;
 
     struct {
       void(*_function)(sigval_t);
@@ -509,10 +502,10 @@
 #if defined(__mips__)
   void *ss_sp;
   size_t ss_size;
-  int ss_flags;
+  int32_t ss_flags;
 #else
   void *ss_sp;
-  int ss_flags;
+  int32_t ss_flags;
   size_t ss_size;
 #endif
 } stack_t;
@@ -544,7 +537,7 @@
 #include <sys/time.h>
 
 int sigtimedwait(const sigset_t *mask, siginfo_t *info, const struct timespec *ts) __THROW;
-int sigqueueinfo(int pid, int sig, siginfo_t *info) __THROW;
+int sigqueueinfo(pid_t pid, int sig, siginfo_t *info) __THROW;
 int siginterrupt(int sig, int flag) __THROW;
 
 int killpg(pid_t pgrp, int sig) __THROW;
