
# we nede -m32 ...
var_insert GCC_WRAPPER_INSERT " " "-m32"

# use at least "-O" when build without optimisation for debugging ...
var_insert GCC_WRAPPER_INSERT " " "-O"

arch_target="`echo $arch_target | sed -e 's/[-_]*64//' -e 's/x86/i386/'`"
echo_status "Set arch_target to $arch_target ..."
set_confopt

# a bit hacky - might need/get a cleanup ...
var_append patchfiles " " "`ls $confdir/../glibc/*.patch`"
[ $stagelevel -le 1 ] && var_append patchfiles " " "`ls $confdir/../glibc/*.patch.cross`"

glibc_custmain() {
	# control whether to use nptl 
	if [ $ROCKCFG_PKG_GLIBC_TLS = 1 ] ; then
	  var_append extraconfopt " " \
	             "--enable-add-ons=nptl --with-tls --with-__thread"
	else    
	  var_append extraconfopt " " \
	             "--enable-add-ons=linuxthreads --without-tls --without-__thread"
	fi

	# control whether to include profiling support 
	if [ $ROCKCFG_PKG_GLIBC_ENABLE_PROFILE = 1 ] ; then
	  var_append extraconfopt " " "--enable-profile"
	else                              
	  var_append extraconfopt " " "--disable-profile"
	fi

	# Let's use an 'objdir' directory for building glibc
	mkdir -p objdir; cd objdir

        # Disable glibc internal debuging but build debuging and profile
        # code so we can use this glibc to debug other programs.
        CFLAGS="$CFLAGS -g -DNDEBUG=1" ../configure --prefix=$root/usr \
                --with-gnu-binutils $G_PROFILE \
                --with-headers=$root/usr/include --with-gd=/usr \
                --with-gd-lib=/usr/lib --with-gd-include=/usr/include \
                --build=${arch_build} --host=${arch_target} $extraconfopt

	# do not build the programs
	cat > configparms <<-EOT
		build-programs=no
EOT

	eval $MAKE prefix=/usr slibdir=/$slibdir sysconfdir=/etc all
	eval $MAKE prefix=/usr slibdir=/$slibdir sysconfdir=/etc \
	           install_root=$root install
	
	# No wrong absolute path in libc.so
	#
	if [ $stagelevel -le 1 ] ; then
		libcso=$root/usr/$slibdir/libc.so
		sed 's,/[^ ]*/,,g' < $libcso > $libcso.new
		mv $libcso.new $libcso
	fi

	# Create /lib/ld-lsb.so.1 symlink
	#
	if [ -f $root/$slibdir/ld-linux-$arch_machine.so.2 ] ; then
		ln -vfs ld-linux-$arch_machine.so.2 $root/$slibdir/ld-lsb.so.1
	elif [ -f $root/$slibdir/ld-linux.so.2 ] ; then
		ln -vfs ld-linux.so.2 $root/$slibdir/ld-lsb.so.1
	fi
}

glibc_prepatch() {
	# the conditional is true if grep matches a string 
	if tarball="`echo $desc_D  | tr ' ' '\n' | grep linuxthreads`" ; then
		tar $taropt $archdir/$tarball
	fi
}

threadsver="$ver"
prepatch="glibc_prepatch"
custmain="glibc_custmain"

slibdir=lib

[ $stagelevel -eq 1 ] &&
	var_append patchfiles " " $confdir/../glibc/no_path_in_glibcso.diff

