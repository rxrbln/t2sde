
# we nede -m32 ...
var_insert GCC_WRAPPER_INSERT " " "-m32"

# use at least "-O" when build without optimisation for debugging ...
var_insert GCC_WRAPPER_INSERT " " "-O"

arch_target="`echo $arch_target | sed -e 's/[-_]*64//' -e 's/x86/i386/'`"
echo_status "Set arch_target to $arch_target ..."
set_confopt

# a bit hacky - might need/get a cleanup ...
var_append patchfiles " " "`ls $confdir/../glibc/*.patch`"
[ $stagelevel -le 1 ] && var_append patchfiles " " "`ls $confdir/../glibc/*.patch.cross`"


# We must use an 'objdir' directory for building glibc
# Disable glibc internal debuging but build debuging and profile
# code so we can use this glibc to debug other programs.

hook_add preconf 3 "mkdir -p objdir; cd objdir"
configprefix='CFLAGS="$CFLAGS -g -DNDEBUG=1"'
configscript="../configure"

# do not build the programs
hook_add premake 5 "cat > configparms <<-EOT
build-programs=no
EOT
"

var_remove_regex confopt " " "--libdir.*"

var_append confopt " " "--with-gnu-binutils --with-headers=$root/usr/include \
--with-gd=/usr --with-gd-lib=/usr/lib --with-gd-include=/usr/include \
--build=${arch_build} --host=${arch_target}"

# control whether to use nptl 
if [ $ROCKCFG_PKG_GLIBC_TLS = 1 ] ; then
	var_append extraconfopt " " \
	           "--enable-add-ons=nptl --with-tls --with-__thread"
else    
	var_append extraconfopt " " \
	           "--enable-add-ons=linuxthreads --without-tls --without-__thread"
fi

# control whether to include profiling support 
if [ $ROCKCFG_PKG_GLIBC_ENABLE_PROFILE = 1 ] ; then
	var_append extraconfopt " " "--enable-profile"
else                              
	var_append extraconfopt " " "--disable-profile"
fi

var_append makeopt " " "slibdir=/\$slibdir"
var_append makeinstopt " " "slibdir=/\$slibdir install_root=\$root"

glibc_prepatch() {
	tarball="`match_source_file -p linuxthreads`" && tar $taropt $tarball
}

glibc_postmake()
{
	# No wrong absolute path in libc.so
	# Obsolete? -ReneR
	#
	if [ $stagelevel -le 1 ] ; then
		libcso=$root/usr/$slibdir/libc.so
		sed 's,/[^ ]*/,,g' < $libcso > $libcso.new
		mv $libcso.new $libcso
	fi

	# Create /lib/ld-lsb.so.1 symlink
	#
	if [ -f $root/$slibdir/ld-linux-$arch_machine.so.2 ] ; then
		ln -vfs ld-linux-$arch_machine.so.2 $root/$slibdir/ld-lsb.so.1
	elif [ -f $root/$slibdir/ld-linux.so.2 ] ; then
		ln -vfs ld-linux.so.2 $root/$slibdir/ld-lsb.so.1
	fi
}

prepatch="glibc_prepatch"
slibdir=lib

[ $stagelevel -eq 1 ] &&
	var_append patchfiles " " $confdir/../glibc/no_path_in_glibcso.diff

hook_add prepatch 3 "glibc_prepatch"
hook_add postmake 5 "glibc_postmake"

