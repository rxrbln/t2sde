# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../coreutils/tempname.patch.cross
# Copyright (C) 2009 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

From upstream's coreutils-master.tar.gz (git snapshot).

See:
http://www.mail-archive.com/bug-coreutils@gnu.org/msg17816.html

This fixes:
mkstemp.c: In function 'rpl_mkstemp':
mkstemp.c:43: error: too many arguments to function 'gen_tempname'
...
mktemp.c: In function 'mkstemp_len':
mktemp.c:117: error: too few arguments to function 'gen_tempname_len'
mktemp.c: In function 'mkdtemp_len':
mktemp.c:123: error: too few arguments to function 'gen_tempname_len'

robert

diff -Naur coreutils-7.6.orig/lib/tempname.c coreutils-7.6/lib/tempname.c
--- coreutils-7.6.orig/lib/tempname.c	2009-09-01 11:01:16.000000000 +0000
+++ coreutils-7.6/lib/tempname.c	2009-09-22 17:23:03.171189535 +0000
@@ -41,8 +41,7 @@
 # define TMP_MAX 238328
 #endif
 #ifndef __GT_FILE
-# define __GT_FILE	0
-# define __GT_BIGFILE	1
+# define __GT_FILE	1
 # define __GT_DIR	2
 # define __GT_NOCREATE	3
 #endif
@@ -61,12 +60,9 @@
 
 #if _LIBC
 # define struct_stat64 struct stat64
-# define small_open __open
-# define large_open __open64
 #else
 # define struct_stat64 struct stat
-# define small_open open
-# define large_open open
+# define __open open
 # define __gen_tempname gen_tempname
 # define __getpid getpid
 # define __gettimeofday gettimeofday
@@ -172,12 +168,11 @@
                         at the time of the call.
    __GT_FILE:		create the file using open(O_CREAT|O_EXCL)
                         and return a read-write fd.  The file is mode 0600.
-   __GT_BIGFILE:	same as __GT_FILE but use open64().
    __GT_DIR:		create a directory, which will be mode 0700.
 
    We use a clever algorithm to get hard-to-predict names. */
 int
-gen_tempname_len (char *tmpl, int kind, size_t x_suffix_len)
+gen_tempname_len (char *tmpl, int flags, int kind, size_t x_suffix_len)
 {
   size_t len;
   char *XXXXXX;
@@ -230,11 +225,9 @@
       switch (kind)
         {
         case __GT_FILE:
-          fd = small_open (tmpl, O_RDWR | O_CREAT | O_EXCL, S_IRUSR | S_IWUSR);
-          break;
-
-        case __GT_BIGFILE:
-          fd = large_open (tmpl, O_RDWR | O_CREAT | O_EXCL, S_IRUSR | S_IWUSR);
+          fd = __open (tmpl,
+                       (flags & ~0777) | O_RDWR | O_CREAT | O_EXCL,
+                       S_IRUSR | S_IWUSR);
           break;
 
         case __GT_DIR:
@@ -295,7 +288,7 @@
 }
 
 int
-__gen_tempname (char *tmpl, int kind)
+__gen_tempname (char *tmpl, int flags, int kind)
 {
-  return gen_tempname_len (tmpl, kind, 6);
+  return gen_tempname_len (tmpl, flags, kind, 6);
 }
diff -Naur coreutils-7.6.orig/lib/tempname.h coreutils-7.6/lib/tempname.h
--- coreutils-7.6.orig/lib/tempname.h	2009-09-01 11:01:16.000000000 +0000
+++ coreutils-7.6/lib/tempname.h	2009-09-22 17:23:03.171189535 +0000
@@ -37,5 +37,6 @@
 
    We use a clever algorithm to get hard-to-predict names. */
 #include <stddef.h>
-extern int gen_tempname (char *tmpl, int kind);
-extern int gen_tempname_len (char *tmpl, int kind, size_t x_suffix_len);
+extern int gen_tempname (char *tmpl, int flags, int kind);
+extern int gen_tempname_len (char *tmpl, int flags, int kind,
+                             size_t x_suffix_len);
diff -Naur coreutils-7.6.orig/src/mktemp.c coreutils-7.6/src/mktemp.c
--- coreutils-7.6.orig/src/mktemp.c	2009-09-01 11:01:16.000000000 +0000
+++ coreutils-7.6/src/mktemp.c	2009-09-22 17:23:27.054031483 +0000
@@ -114,13 +114,13 @@
 static int
 mkstemp_len (char *tmpl, size_t suff_len, bool dry_run)
 {
-  return gen_tempname_len (tmpl, dry_run ? GT_NOCREATE : GT_FILE, suff_len);
+  return gen_tempname_len (tmpl, 0, dry_run ? GT_NOCREATE : GT_FILE, suff_len);
 }
 
 static int
 mkdtemp_len (char *tmpl, size_t suff_len, bool dry_run)
 {
-  return gen_tempname_len (tmpl, dry_run ? GT_NOCREATE : GT_DIR, suff_len);
+  return gen_tempname_len (tmpl, 0, dry_run ? GT_NOCREATE : GT_DIR, suff_len);
 }
 
 int

