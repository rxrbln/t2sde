diff -u pmount-0.8/pmount-hal.c pmount-0.8-fixed/pmount-hal.c
--- pmount-0.8/pmount-hal.c	2005-02-07 11:36:06.000000000 +0100
+++ pmount-0.8-fixed/pmount-hal.c	2005-05-13 11:12:01.000000000 +0200
@@ -144,7 +144,9 @@
 int
 main( int argc, const char** argv ) 
 {
-    LibHalContext *hal_ctx;
+    LibHalContext *hal_ctx = NULL;
+    DBusError *error = NULL;
+
     dbus_bool_t sync = TRUE, noatime = FALSE;
     const char* udi;
     char* device = NULL;
@@ -164,33 +166,33 @@
     udi = argv[1];
 
     /* initialize hal connection */
-    hal_ctx = hal_initialize( NULL, FALSE );
+    libhal_ctx_init( hal_ctx, error );
     if( !hal_ctx ) {
         fprintf( stderr, _("Error: could not connect to hal\n") );
         return 1;
     }
 
     /* get all interesting properties */
-    if( !hal_device_exists( hal_ctx, udi ) ) {
+    if( !libhal_device_exists( hal_ctx, udi, error ) ) {
         fprintf( stderr, _("Error: given UDI does not exist\n") );
         return 1;
     }
 
-    if( hal_device_property_exists( hal_ctx, udi, "block.device" ) )
-        device = hal_device_get_property_string( hal_ctx, udi, "block.device" );
+    if( libhal_device_property_exists( hal_ctx, udi, "block.device", error ) )
+        device = libhal_device_get_property_string( hal_ctx, udi, "block.device", error );
     if( !device ) {
         fprintf( stderr, _("Error: given UDI is not a mountable volume\n") );
         return 1;
     }
 
-    if( hal_device_property_exists( hal_ctx, udi, "volume.policy.desired_mount_point" ) )
-        label = hal_device_get_property_string( hal_ctx, udi, "volume.policy.desired_mount_point" );
-    if( hal_device_property_exists( hal_ctx, udi, "volume.fstype" ) )
-        fstype = hal_device_get_property_string( hal_ctx, udi, "volume.fstype" );
-    if( hal_device_property_exists( hal_ctx, udi, "volume.policy.mount_option.sync" ) )
-        sync = hal_device_get_property_bool( hal_ctx, udi, "volume.policy.mount_option.sync" );
-    if( hal_device_property_exists( hal_ctx, udi, "volume.policy.mount_option.noatime" ) )
-        noatime = hal_device_get_property_bool( hal_ctx, udi, "volume.policy.mount_option.noatime" );
+    if( libhal_device_property_exists( hal_ctx, udi, "volume.policy.desired_mount_point", error ) )
+        label = libhal_device_get_property_string( hal_ctx, udi, "volume.policy.desired_mount_point", error );
+    if( libhal_device_property_exists( hal_ctx, udi, "volume.fstype", error ) )
+        fstype = libhal_device_get_property_string( hal_ctx, udi, "volume.fstype", error );
+    if( libhal_device_property_exists( hal_ctx, udi, "volume.policy.mount_option.sync", error ) )
+        sync = libhal_device_get_property_bool( hal_ctx, udi, "volume.policy.mount_option.sync", error );
+    if( libhal_device_property_exists( hal_ctx, udi, "volume.policy.mount_option.noatime", error ) )
+        noatime = libhal_device_get_property_bool( hal_ctx, udi, "volume.policy.mount_option.noatime", error );
 
     exec_pmount( device, fstype, label, sync, noatime, argc-2, argv+2 );
 
