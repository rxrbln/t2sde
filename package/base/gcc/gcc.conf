#!/bin/sh
# --- ROCK-COPYRIGHT-NOTE-BEGIN ---
# 
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# Please add additional copyright information _after_ the line containing
# the ROCK-COPYRIGHT-NOTE-END tag. Otherwise it might get removed by
# the ./scripts/Create-CopyPatch script. Do not edit this copyright text!
# 
# ROCK Linux: rock-src/package/*/gcc3/gcc3.conf
# Copyright (C) 1998 - 2003 ROCK Linux Project
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version. A copy of the GNU General Public
# License can be found at Documentation/COPYING.
# 
# Many people helped and are helping developing ROCK Linux. Please
# have a look at http://www.rocklinux.org/ and the Documentation/TEAM
# file for details.
# 
# --- ROCK-COPYRIGHT-NOTE-END ---

# This configuration file is used for building any gcc package.
# Other packages might simply includes this file.

# create and set up cmd_wrapper for xgcc
function setup_xgcc_wrapper() {
	mkdir gcc ; pushd gcc

	cat <<-EOF > xgcc-wrapper
#!/bin/bash
[ "\$GCC_WRAPPER_DEBUG" = 1 ] && export CMD_WRAPPER_DEBUG=1
export CMD_WRAPPER_OTHERS="\$CC_WRAPPER_OTHERS:\$GCC_WRAPPER_OTHERS:\$GCC3_WRAPPER_OTHERS"
export CMD_WRAPPER_INSERT="\$CC_WRAPPER_INSERT \$GCC_WRAPPER_INSERT \$GCC3_WRAPPER_INSERT"
export CMD_WRAPPER_REMOVE="\$CC_WRAPPER_REMOVE \$GCC_WRAPPER_REMOVE \$GCC3_WRAPPER_REMOVE"
export CMD_WRAPPER_APPEND="\$CC_WRAPPER_APPEND \$GCC_WRAPPER_APPEND \$GCC3_WRAPPER_APPEND"
export CMD_WRAPPER_FILTER="\$CC_WRAPPER_FILTER|\$GCC_WRAPPER_FILTER|\$GCC3_WRAPPER_FILTER"
exec cmd_wrapper "\$@"
EOF

	chmod 0755 xgcc-wrapper
	export STAGE_CC_WRAPPER=$PWD/xgcc-wrapper
	export PATH="$PWD:$PATH"

	popd
}

custmain() {
	# Apply the respective stack protector patch.
	. $base/package/*/gcc/apply-protector.sh

	hook_eval preconf

	# Do we need / want this? -ReneR
	if [ "$ROCKCFG_DEBUG" = 1 ] ; then
		if [ -f libstdc++*/configure ] ; then
			echo "Setting DEBUG_FLAGS='-s' in libstdc++ configure."
			( cd libstdc++*
			sed -i -e "s/DEBUG_FLAGS='-g'/DEBUG_FLAGS='-s'/g" \
			configure )
		fi
		MAKE="$MAKE LIBGCC2_DEBUG_CFLAGS=-s LDFLAGS=-Wl,-s JCFLAGS=-s"
	fi

	# GCC rebuilds itself using the xgcc which is build first. xgcc
	# should also use the cc-wrapper. It might be better to patch big
	# ammounts of the gcc sources - but this should also do the job.
	#
	# Do we still need it, now with xgcc_wraper? -ReneR
	#
	export CFLAGS="$(exec -a echo bash \
				-c ". gcc" 2> /dev/null)"
	export CXXFLAGS="$(exec -a echo bash \
				-c ". g++" 2> /dev/null)"
	#
	echo "Setting \$CFLAGS   to '$CFLAGS'."
	echo "Setting \$CXXFLAGS to '$CXXFLAGS'."

	mkdir objdir ; cd objdir

	# create and set up the xgcc cmd_wrapper
	setup_xgcc_wrapper

	# NAMING VARIANT!? INTRODUCED IN GCC-3.2.1
	if [ $arch = powerpc ] ; then
		ln -s ppc-nocross-linux-gnu powerpc-nocross-linux-gnu
	fi

	# add the multi-lib config
	if [ "$ROCKCFG_MULTILIB" = 1 ] ; then
		var_append confopt ' ' "--enable-multilib"
	else
		var_append confopt ' ' "--disable-multilib"
	fi

	# In stage 1 everything is a little bit more complicated
	#
	if [ $stagelevel -le 1 ] ; then

		create_config_cache > config.cache
		eval $configprefix ../configure $confopt --enable-languages=c

		# hack... oh well, this is a long story...
		# short story is, libgcc should not contain the SSP symbols
		# NOTE: compare stage0, however this is after configure, because
		# configure transmits this to gcj which breaks due to "-D..."
		if [ "$ROCKCFG_PKG_GCC_STACKPRO" = 0 ]; then
			var_append GCC_WRAPPER_APPEND ' ' "-D_LIBC_PROVIDES_SSP_"
			export GCC_WRAPPER_APPEND
		fi

		# creating native libiberty for build system
		# (needed to build helper apps like gengenrtl)
		#
		mkdir -p $arch_build ; cd $arch_build
		CC=$BUILDCC ../../configure
		make all-libiberty ; cd ..

		MAKE="$MAKE LANGUAGES=c"

		# GCC thinks it can share object files between build and
		# target if the CPUs are compatible, which isn't true if we
		# are cross-building from glibc to dietlibc. So we also build
		# helper programs with dietlibc if this is not a cross build
		# between cpu architectures.
		#
		if ! [ "$pkg_dietlibc_useit" = 1 -a "$ROCKCFG_CROSSBUILD" = 0 ]
		then
			MAKE="$MAKE CC_FOR_BUILD='$BUILDCC'"
		fi

		# Fixincludes doesn't run when cross-building, but we
		# need a syslimits.h for a working gcc
		#
		mkdir -p gcc/include
		echo '#include_next <limits.h>' > gcc/include/syslimits.h

		hook_eval premake

		# Build and install
		#
		eval $MAKE prefix=/$prefix libdir=/$prefix/lib
		hook_eval inmake
		eval $MAKE prefix=$root/$prefix $makeinstopt install

		# This stuff needs manual installation
		#
		echo "Creating /$prefix/${arch_target} ..."
		mkdir -p $root/$prefix/${arch_target}/lib
	else

		if [ "$ROCKCFG_LIBC" = "dietlibc" -o "$ROCKCFG_DIETLIBC_gcc3" = 1 ] ; then
			# FIXME: c++ and java are not working with dietlibc
			var_append confopt ' ' "--enable-languages=c,objc"
		elif [ "$ROCKCFG_PKG_GCC_JAVA" != 1 ] ; then
			var_append confopt ' ' "--disable-libgcj"
		fi

		# See http://gcc.gnu.org/gcc-3.2/c++-abi.html
		# and http://www.codesourcery.com/cxx-abi/.
		var_append confopt ' ' "--enable-__cxa_atexit"

		# Set enable-shared
		if [ "$diet_dynamic_static" == "static" ] ; then
			var_append confopt ' ' "--enable-shared=no"
		else
			var_append confopt ' ' "--enable-shared=yes"
		fi

		# Configure, build and install as usual
		#
		eval $configprefix ../configure $confopt --with-gnu-as \
			--enable-version-specific-runtime-libs \
			--with-gnu-ld --enable-threads=posix $extaconfopt

		# hack... oh well, this is a long story...
		# short story is, libgcc should not contain the SSP symbols
		# NOTE: compare stage0, however this is after configure, because
		# configure transmits this to gcj which breaks due to "-D..."
		if [ "$ROCKCFG_PKG_GCC_STACKPRO" = 0 ]; then
			var_append GCC_WRAPPER_APPEND ' ' "-D_LIBC_PROVIDES_SSP_"
			export GCC_WRAPPER_APPEND
		fi

		hook_eval premake
		eval "$MAKE GCJFLAGS=\"$CXXFLAGS\" all"
		hook_eval inmake
		eval "$MAKE $makeinstopt install"

		# Fix the location of any improperly installed (F77) libraries
		mv -vf $root/$prefix/lib/$gcc_lib_dir/../lib* \
		       $root/$prefix/lib/$gcc_lib_dir || true
	fi
	hook_eval postmake

	# Create various symlinks for cc, c++, cpp and f77.
	#
	if true ; then
		rm -f $root/$prefix/bin/cc
		if [ "$ROCKCFG_LIBC" = "dietlibc" ]; then
			cat <<- EOT > $root/$prefix/bin/cc
				#!/bin/sh
				exec diet gcc "$@"
			EOT
			chmod +x $root/$prefix/bin/cc
		else
			ln -svf gcc $root/$prefix/bin/cc
		fi
		ln -vsf ../$prefix/bin/cpp $root/lib/cpp
	fi
	ln -sf gcc $root/$prefix/bin/kcc-${ver:0:1}
	if [ $ROCKCFG_DEFAULT_KCC = $pkg ] ; then
		ln -vsf gcc $root/$prefix/bin/kcc
	fi
	if [ $ROCKCFG_DEFAULT_F77 = $pkg ] ; then
		if [ -f $root/$prefix/bin/g77 ] ; then
			rm -vf $root/$prefix/bin/f77
			ln -vsf g77 $root/$prefix/bin/f77
		fi
	fi

	# hack - to be removed -ReneR
	cd $root/$prefix/$arch_target/lib             
	for x in Mcrt1.o crt1.o crti.o crtn.o gcrt1.o \
		libc.a libc.so libc_nonshared.a      
	do ln -fvs ../../lib/$x $x ; done   

	# Create symlinks for runtime libraries so they can be found by
	# the dynamic loader and force rebuilding of the wrapper links
	#
	if [ $stagelevel -gt 1 ] ; then
		( cd $root/$prefix/lib ; ln -vfs ${gcc_lib_dir}/*.so.* . ; )
		rm -fv $base/build/$ROCKCFG_ID/TOOLCHAIN/$toolsdir/.lastupdate
	fi
	true

	hook_eval postdoc
}

gcc_stage0() {
	# Apply the respective gcc-2 or gcc-3 stack protector patch.
	. $base/package/*/gcc/apply-protector.sh

	mkdir -p $root/$prefix/$arch_target/{bin,lib}
	rm -f $root/$prefix/$arch_target/include
	if [ -f $root/$prefix/include/stdio.h ]; then
		ln -s ../include $root/$prefix/$arch_target/include
	elif [ -f $root/$prefix/diet-include/stdio.h ]; then
		ln -s ../diet-include $root/$prefix/$arch_target/include
	fi

	mkdir objdir ; cd objdir

	# create and set up the xgcc cmd_wrapper
	setup_xgcc_wrapper

	bindir="/$prefix/crosscc"; mkdir -p $root/$prefix/crosscc
	var_append confopt ' ' "--enable-languages=c"

	# hack due to sane variable not available -ReneR
	var_append confopt " " "--with-sysroot=$base/build/$ROCKCFG_ID"

	hook_eval preconf
	eval ../configure --program-prefix=${arch_target}- --disable-cpp \
			  --disable-shared --disable-multilib $confopt

	# hack... oh well, this is a long story...
	# short story is, libgcc should not contain the SSP symbols
	if [ "$ROCKCFG_PKG_GCC_STACKPRO" = 0 ]; then
		var_append GCC_WRAPPER_APPEND ' ' "-D_LIBC_PROVIDES_SSP_"
		export GCC_WRAPPER_APPEND
	fi

	[ -d libiberty ] && make -C libiberty
	[ -d texinfo ] && make -C texinfo

	hook_eval premake
	if [ "${ver:0:4}" = "2.95" ] ; then
		make -C gcc all LANGUAGES="c"
		hook_eval inmake
		make -C gcc install LANGUAGES="c"
	elif [ "${ver:0:3}" = "3.4" ] ; then
		make all
		hook_eval inmake
		make install
	else
		# workaround for at least gcc-3.2.3
		mkdir -p $root/$prefix/lib/${gcc_lib_dir}
		make -C gcc all
		hook_eval inmake
		make -C gcc install
	fi
	hook_eval postmake

	${arch_target}-ranlib \
		$root/$prefix/lib/${gcc_lib_dir}/libgcc.a
	for x in gcc-${ver:0:1} kcc{,-${ver:0:1}} cc; do
		ln -svf ${arch_target}-gcc \
			$root/$prefix/crosscc/${arch_target}-$x
	done
	rm -vf "$root/$prefix/crosscc/{gcc,gcj}"

	rm -f $root/$prefix/.lastupdate
}

if [ "$stagelevel" -eq 0 ]; then
	custmain="gcc_stage0"
else
	custmain="custmain"
fi

if [ "${ver:0:3}" = "3.4" ] ; then
	gcc_lib_dir="gcc/${arch_target}/${ver%%-*}"
else
	gcc_lib_dir="gcc-lib/${arch_target}/${ver%%-*}"
fi

