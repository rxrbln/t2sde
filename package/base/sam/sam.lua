#!/usr/bin/lua
-- --- T2-COPYRIGHT-NOTE-BEGIN ---
-- This copyright note is auto-generated by ./scripts/Create-CopyPatch.
-- 
-- T2 SDE: package/.../sam/sam.lua
-- Copyright (C) 2006 The T2 SDE Project
-- 
-- More information can be found in the files COPYING and README.
-- 
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; version 2 of the License. A copy of the
-- GNU General Public License can be found in the file COPYING.
-- --- T2-COPYRIGHT-NOTE-END ---

local VERSION='0.0-devel'
local COPYRIGHT='SAM v.'..VERSION..' Copyright (C) 2006 The T2 SDE Project'

-- get_modules( pattern ) returns the list on modules available at
--                        SAM_MODULES dir for certain pattern
--
local function get_modules( pattern )
	local lfs = require('lfs')
	-- get MODULESDIR from the SAM_MODULES envvar, or use /usr/lib/sam as default
	local MODULESDIR = os.getenv('SAM_MODULES') or '/usr/lib/sam'

	local list = {}
	for file in lfs.dir( MODULESDIR ) do
		module = string.gsub( file, '%..*','' )
		file   = MODULESDIR .. '/' .. file
		attrib = lfs.attributes( file )

		if attrib.mode == 'file' then
			if string.match( module, pattern ) then
				list[ module ] = file
			end		
		end
	end

	return list
end

local function usage()
	print('usage: sam <module> [arguments]')
	print('\navailable modules are:')
	for k,_ in pairs(get_modules('^sam_.*')) do
		print('\t'..string.gsub(k,'sam_',''))
	end
end

local function print_table( t )
	for k,v in pairs(t) do print(k,type(v),v) end
end

-- show the copyrights
print(COPYRIGHT)

if not arg[ 1 ] then
	usage()
else
	local module=get_modules('sam_'..arg[1])
	if module[ 'sam_'..arg[1] ] then
		print('loading module '..module[ 'sam_'..arg[1] ]..'...')
		module=loadfile( module[ 'sam_'..arg[1] ] )
		module=module()
		if module[ 'main' ] then
			return module.main()
		else
			print("ERROR: this module doesn't contain a main function")
		end
	else
		print("ERROR: module '"..arg[1].."' not found.")
		usage()
	end
end
