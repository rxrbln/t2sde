# --- ROCK-COPYRIGHT-NOTE-BEGIN ---
# 
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# Please add additional copyright information _after_ the line containing
# the ROCK-COPYRIGHT-NOTE-END tag. Otherwise it might get removed by
# the ./scripts/Create-CopyPatch script. Do not edit this copyright text!
# 
# ROCK Linux: rock-src/package/base/linux24/95-inet-for-userspace.patch
# ROCK Linux is Copyright (C) 1998 - 2003 Clifford Wolf
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version. A copy of the GNU General Public
# License can be found at Documentation/COPYING.
# 
# Many people helped and are helping developing ROCK Linux. Please
# have a look at http://www.rocklinux.org/ and the Documentation/TEAM
# file for details.
# 
# --- ROCK-COPYRIGHT-NOTE-END ---

The in.h file need protection for some defines where the types are not known
to the user-space and pkt_sched.h missed the inclusion of the types.h
header which types it utilizes ...

 - Rene Rebe <rene@rocklinux.org>

--- ./include/linux/in.h.orig	2003-08-28 22:11:50.000000000 +0200
+++ ./include/linux/in.h	2003-08-28 22:12:27.000000000 +0200
@@ -135,6 +135,8 @@
 	(sizeof(struct ip_msfilter) - sizeof(__u32) \
 	+ (numsrc) * sizeof(__u32))
 
+#ifdef __KERNEL__
+
 struct group_req
 {
 	__u32			gr_interface;	/* interface index */
@@ -161,6 +163,8 @@
 	(sizeof(struct group_filter) - sizeof(struct sockaddr_storage) \
 	+ (numsrc) * sizeof(struct sockaddr_storage))
 
+#endif
+
 struct in_pktinfo
 {
 	int		ipi_ifindex;
--- ./include/linux/pkt_sched.h.orig	2003-08-28 22:20:44.000000000 +0200
+++ ./include/linux/pkt_sched.h	2003-08-28 22:21:11.000000000 +0200
@@ -1,6 +1,8 @@
 #ifndef __LINUX_PKT_SCHED_H
 #define __LINUX_PKT_SCHED_H
 
+#include <linux/types.h>
+
 /* Logical priority bands not depending on specific packet scheduler.
    Every scheduler will map them to real traffic classes, if it has
    no more precise mechanism to classify packets.
