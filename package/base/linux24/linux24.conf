# --- ROCK-COPYRIGHT-NOTE-BEGIN ---
# 
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# Please add additional copyright information _after_ the line containing
# the ROCK-COPYRIGHT-NOTE-END tag. Otherwise it might get removed by
# the ./scripts/Create-CopyPatch script. Do not edit this copyright text!
# 
# ROCK Linux: rock-src/package/*/linux24/linux24.conf
# Copyright (C) 1998 - 2003 ROCK Linux Project
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version. A copy of the GNU General Public
# License can be found at Documentation/COPYING.
# 
# Many people helped and are helping developing ROCK Linux. Please
# have a look at http://www.rocklinux.org/ and the Documentation/TEAM
# file for details.
# 
# --- ROCK-COPYRIGHT-NOTE-END ---

# include the function to patch and configure the kernel
. $base/package/*/linux*/lx_config.sh

main_lx() {
	lx_patch
	lx_config

	# we need to rerun the oldconfig since the used .config
	# might not match the one used in the last oldconfig run
	# (e.g. the nomods is run last - and normally the module
	# one is used)
	yes '' | eval $MAKE oldconfig > /dev/null

	if [[ $treever = 24* ]] ; then
		echo "Creating dependencies ..."
		eval $MAKE -j 1 dep
	fi

	kerneldir="$PWD"
	moduledir="$root/lib/modules/${lx_kernelrelease}"

	echo "Cleanup kernel ..."
	eval $MAKE -j 1 clean > /dev/null

	echo "Building the kernel ..."
  if [ -z "$ROCK_DEBUG_LINUX_SUBMODULES_ONLY" ] ; then
	case "$lx_cpu" in
	    i386)
		eval $MAKE bzImage
		cp -vf arch/i386/boot/bzImage $root/boot/vmlinuz_${lx_kernelrelease}
		;;
	    x86_64)
		eval $MAKE bzImage
		cp -vf arch/x86_64/boot/bzImage $root/boot/vmlinuz_${lx_kernelrelease}
		;;
	    alpha)
		eval $MAKE vmlinux
		gzip < vmlinux > $root/boot/vmlinux_${lx_kernelrelease}.gz
		;;
	    mips)
		eval $MAKE vmlinux
		$BUILDCC arch/mips/boot/elf2ecoff.c -o elf2ecoff
		./elf2ecoff vmlinux vmlinux.ecoff
		cp -vf vmlinux.ecoff $root/boot/vmlinux_${lx_kernelrelease}.ecoff
		;;
	    ppc)
		eval $MAKE vmlinux
		cp -vf vmlinux $root/boot/vmlinux_${lx_kernelrelease}
		eval $MAKE zImage
		for x in arch/ppc/boot/images/zImage.* ; do
		  cp -v $x $root/boot/${x/*\//}-$ver
		done
		;;
	    sparc)
		if [[ $treever != 24* ]] && [ "$ROCKCFG_SPARC_BITS" = 32 ]] ; then
			eval $MAKE image
		else
			eval $MAKE vmlinux
		fi
		cp -vf vmlinux $root/boot/vmlinux_$ver-rock
		;;
	    um)
		eval $MAKE linux
		cp -vf linux $root/boot/linux_${lx_kernelrelease}
		;;
	    *)
		eval $MAKE vmlinux
		cp -vf vmlinux $root/boot/vmlinux_${lx_kernelrelease}
		;;
	esac
	cp -vf .config $root/boot/kconfig_${lx_kernelrelease}
	cp -vf System.map $root/boot/System.map_${lx_kernelrelease}

	echo "Building the modules ..."
	eval $MAKE modules
	echo "Installing the modules ..."
	if [ $stagelevel -le 1 ] ; then
		eval $MAKE modules_install \
			INSTALL_MOD_PATH=$root DEPMOD=/bin/true
	else
		eval $MAKE modules_install DEPMOD=/bin/true
		echo "Running 'depmod -a -q -F /boot/System.map ${lx_kernelrelease}' .."
		depmod -a -q -F /boot/System.map_${lx_kernelrelease} ${lx_kernelrelease}
		# TODO: To we still need this? -ReneR
		for x in $moduledir/modules.*
		do [ -f $x ] && add_flist $x; done
	fi
  else
		eval $MAKE scripts
  fi

	# iterate over the packages that provide 3rd party linux kernel modules
	if [ $stagelevel -gt 2 ] ; then
	  echo "Running postlinux.sh scripts ..."
	  for x in $base/package/*/*/postlinux.conf ; do
		y=${x%/*}; y=${y##*/}
		if [ -f $x ] && pkginstalled "$y" ; then
			echo "Sub-building $y ..."
			pushd $builddir
			build_package $y postlinux.conf
			popd
			echo "Finished building $y."
		else
			echo "Sub-package $y not enabled ..."
		fi
	  done
	fi

	if [ -z "$root" ]; then
		mkinitrd empty ${lx_kernelrelease}
	fi

	echo "Fixing /lib/modules/${ver}/build symlink ..."
	rm -f $root/lib/modules/${lx_kernelrelease}/build
	ln -sf ../../../usr/src/linux-${lx_kernelrelease} \
	  $root/lib/modules/${lx_kernelrelease}/build

	echo "Copying kernel patches ..."
	(
	 cd $root/usr/src/
	 rm -rf linux$treever-patches ; mkdir -p linux$treever-patches
	 echo -e "This directory contains all the applied patches, used\n\
to build the kernel (in addition to the official kernel sources)." > \
		linux$treever-patches/README
	 for x in $patchfiles ; do
		# if the patch does not exist it was downloaded or so
		# and we just do not copy it ...
		[ -f $x ] && cp -v $x linux$treever-patches/
	 done
	)
}

custmain="main_lx"
autopatch=0

