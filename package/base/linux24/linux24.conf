#!/bin/sh
# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../linux24/linux24.conf
# Copyright (C) 2004 - 2005 The T2 SDE Project
# Copyright (C) 1998 - 2003 ROCK Linux Project
# 
# More information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. A copy of the
# GNU General Public License can be found in the file COPYING.
# --- T2-COPYRIGHT-NOTE-END ---

. $base/package/*/linux*/linux-conf.in

main_lx() {
	lx_patch
	lx_config

	hook_eval premake

	# we need to rerun the oldconfig since the used .config
	# might not match the one used in the last oldconfig run
	# (e.g. the nomods is run last - and normally the module
	# one is used)
	yes '' | eval $MAKE oldconfig > /dev/null

	if [[ $treever = 24* ]] ; then
		echo "Creating dependencies ..."
		eval $MAKE -j 1 dep
	fi

	kerneldir="$PWD"
	moduledir="$root/lib/modules/${lx_kernelrelease}"

	echo "Cleanup kernel ..."
	eval $MAKE -j 1 clean > /dev/null

	echo "Building the kernel ..."
  if [ -z "$ROCK_DEBUG_LINUX_SUBMODULES_ONLY" ] ; then
	case "$lx_cpu" in
	    i386)
		eval $MAKE bzImage
		cp -vf arch/i386/boot/bzImage $root/boot/vmlinuz_${lx_kernelrelease}
		;;
	    x86_64)
		eval $MAKE bzImage
		cp -vf arch/x86_64/boot/bzImage $root/boot/vmlinuz_${lx_kernelrelease}
		;;
	    alpha)
		eval $MAKE vmlinux
		gzip < vmlinux > $root/boot/vmlinux_${lx_kernelrelease}.gz
		;;
	    mips)
		eval $MAKE vmlinux
		$BUILDCC arch/mips/boot/elf2ecoff.c -o elf2ecoff
		./elf2ecoff vmlinux vmlinux.ecoff
		cp -vf vmlinux.ecoff $root/boot/vmlinux_${lx_kernelrelease}.ecoff
		;;
	    ppc)
		eval $MAKE vmlinux
		cp -vf vmlinux $root/boot/vmlinux_${lx_kernelrelease}
		eval $MAKE zImage
		for x in arch/ppc/boot/images/zImage.* ; do
		  cp -v $x $root/boot/${x/*\//}-${lx_kernelrelease}
		done
		;;
	    sparc)
		if [[ $treever != 24* ]] && [ "$ROCKCFG_SPARC_BITS" = 32 ]] ; then
			eval $MAKE image
		else
			eval $MAKE vmlinux
		fi
		cp -vf vmlinux $root/boot/vmlinux_${lx_kernelrelease}
		;;
	    um)
		eval $MAKE linux
		cp -vf linux $root/boot/linux_${lx_kernelrelease}
		;;
	    sh)
		eval $MAKE zImage
		cp -vf arch/sh/boot/zImage $root/boot/vmlinux_${lx_kernelrelease}
		;;
	    *)
		eval $MAKE vmlinux
		cp -vf vmlinux $root/boot/vmlinux_${lx_kernelrelease}
		;;
	esac
	cp -vf .config $root/boot/kconfig_${lx_kernelrelease}
	cp -vf System.map $root/boot/System.map_${lx_kernelrelease}

	if grep -q "CONFIG_MODULES=y" .config ; then
		echo "Building the modules ..."
		eval $MAKE modules

		echo "Installing the modules ..."
		eval $MAKE modules_install INSTALL_MOD_PATH=$root DEPMOD=/bin/true
	fi

	hook_eval inmake
  else
	eval $MAKE scripts
	# some tweaks to make the debug code path work for some sub packages
	touch $root/boot/System.map_${lx_kernelrelease}
	mkdir -p $moduledir
	ln -sf $PWD $moduledir/build
  fi

	hook_eval postmake

	# iterate over the packages that provide 3rd party linux kernel modules
	if grep -q "CONFIG_MODULES=y" .config ; then
		echo "Running postlinux.sh scripts ..."
	  	for x in $base/package/*/*/postlinux.conf ; do
		  y=${x%/*}; y=${y##*/}
		  [ -f $x ] || continue
		  echo "Considering $y ..."

		  # we need a more fine grained pkginstalled here - to only
		  # build the packages that are marked for cross building
		  if [ "$stagelevel" -le 4 ] ; then
			local pattern="$y"; pattern="${pattern//+/\\+}"
			local p=`egrep "^X.* ($pattern) " \
			      $base/config/$config/packages | cut -d ' ' -f 2`
			[ "$p" ] || continue
			[ "$p" != "${p/$stagelevel/}" ] || continue
		  else
			pkginstalled "$y" || continue
		  fi

		  echo "Sub-building $y ..."
		  pushd $builddir
		  build_package $y postlinux.conf
		  popd
		  echo "Finished building $y."
		done

	  if [ -z "$root" ]; then
		mkinitrd empty ${lx_kernelrelease}
	  fi

	  if [ $stagelevel -gt 1 ] ; then
		echo "Running 'depmod -a -q -F /boot/System.map ${lx_kernelrelease}' ..."
		depmod -a -q -F $root/boot/System.map_${lx_kernelrelease} ${lx_kernelrelease}
		# TODO: To we still need this? -ReneR
		for x in $moduledir/modules.*
		do [ -f $x ] && add_flist $x; done
	  fi

	  echo "Fixing /lib/modules/${ver}/build symlink ..."
	  rm -f $root/lib/modules/${lx_kernelrelease}/build
	  ln -sf ../../../usr/src/linux-${lx_kernelrelease} \
	     $root/lib/modules/${lx_kernelrelease}/build
	fi

	echo "Copying kernel patches ..."
	(
	 cd $root/usr/src/
	 rm -rf linux$treever-patches ; mkdir -p linux$treever-patches
	 echo -e "This directory contains all the applied patches, used\n\
to build the kernel (in addition to the official kernel sources)." > \
		linux$treever-patches/README
	 for x in $patchfiles ; do
		# if the patch does not exist it was downloaded or so
		# and we just do not copy it ...
		[ -f $x ] && cp -v $x linux$treever-patches/ || true
	 done
	)
}

custmain="main_lx"
autopatch=0

