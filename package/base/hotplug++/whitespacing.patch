# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../hotplug++/whitespacing.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

Index: bin/os.cc
===================================================================
--- ./bin/os.cc	(revision 155)
+++ ./bin/os.cc	(revision 156)
@@ -27,7 +27,14 @@
 	continue;
       if (line[0] == '#')
 	continue;
-      // TODO: remove spaces
+
+      // skip leading and trailing whitespace
+      std::string::size_type p1, p2;
+      p1 = line.find_first_not_of (" \t");
+      p2 = line.find_last_not_of (" \t");
+
+      line = line.substr (p1, p2-p1+1);
+
       //std::cerr << "-> '" << line << "' : " << line.size() << std::endl;
       blacklisted_modules.push_back (line);
     }
Index: include/string
===================================================================
--- ./embeddedSTL/include/string	(revision 71)
+++ ./embeddedSTL/include/string	(revision 72)
@@ -399,6 +399,29 @@
       return npos;
     }
     
+    // find_last
+    size_type find_last_not_of (const basic_string& str, size_type idx = 0) const {
+      return find_last_not_of (str.m_str, idx, str.m_str_size);
+    }
+
+    size_type find_last_not_of (const char* cstr, size_type idx = 0) const {
+      return find_last_not_of (cstr, idx, strlen(cstr));
+    }
+    
+    size_type find_last_not_of (const char* chars, size_type idx,
+				 size_type chars_len) const {
+      for (size_type i = m_str_size - 1; i > 0 && i >= idx; --i) {
+	const char* c = chars;
+	for ( ; c != chars + chars_len; ++c)
+	  if (m_str[i] == *c)
+	    break;
+	
+	if (c == chars + chars_len)
+	  return i;
+      }
+      return npos;
+    }
+    
     // TODO: rfind
     
     //get_allocator();
