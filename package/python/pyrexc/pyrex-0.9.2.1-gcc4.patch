# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../pyrexc/pyrex-0.9.2.1-gcc4.patch
# Copyright (C) 2004 - 2005 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

Taken from Fedora Core to fix code generate for gcc-4.0.

--- Pyrex-0.9.2.1/Pyrex/Compiler/Code.py.orig	2005-03-22 13:41:29.000000000 -0500
+++ Pyrex-0.9.2.1/Pyrex/Compiler/Code.py	2005-03-22 13:46:15.000000000 -0500
@@ -218,14 +218,19 @@
         for entry in entries:
             self.put_var_xdecref_clear(entry)
     
-    def put_init_to_py_none(self, cname):
-        self.putln("%s = Py_None; Py_INCREF(%s);" % (cname, cname))
+    def put_init_to_py_none(self, cast, cname):
+        if cast:
+            self.putln("%s = Py_None; Py_INCREF(%s %s);" % (cname, cast, cname))
+        else:
+            self.putln("%s = Py_None; Py_INCREF(%s);" % (cname, cname))            
     
     def put_init_var_to_py_none(self, entry, template = "%s"):
         code = template % entry.cname
         if entry.type.is_extension_type:
-            code = "((PyObject*)%s)" % code
-        self.put_init_to_py_none(code)
+            cast = "(PyObject *)"
+        else:
+            cast = None
+        self.put_init_to_py_none(cast, code)
 
     def put_pymethoddef(self, entry, term):
         if entry.doc:
--- Pyrex-0.9.2.1/Pyrex/Compiler/ExprNodes.py.orig	2005-03-22 13:41:35.000000000 -0500
+++ Pyrex-0.9.2.1/Pyrex/Compiler/ExprNodes.py	2005-03-22 13:34:05.000000000 -0500
@@ -806,7 +806,7 @@
             if self.type.is_pyobject:
                 rhs.make_owned_reference(code)
                 code.put_decref(self.result, self.type)
-            code.putln('%s = %s;' % (self.result, rhs.result))
+            code.putln('%s = %s;' % (self.entry.cname, rhs.result))
             if debug_disposal_code:
                 print "NameNode.generate_assignment_code:"
                 print "...generating post-assignment code for", rhs
--- Pyrex-0.9.2.1/Pyrex/Compiler/Nodes.py.orig	2005-03-22 13:41:40.000000000 -0500
+++ Pyrex-0.9.2.1/Pyrex/Compiler/Nodes.py	2005-03-22 13:43:36.000000000 -0500
@@ -472,9 +472,9 @@
         self.generate_self_cast(scope, code)
         type = scope.parent_type
         if type.vtabslot_cname:
-            code.putln("(struct %s *)p->%s = %s;" % (
-                type.vtabstruct_cname,
+            code.putln("p->%s = (struct %s *)%s;" % (
                 type.vtabslot_cname,
+                type.vtabstruct_cname,
                 type.vtabptr_cname))
         for entry in scope.var_entries:
             if entry.type.is_pyobject:
@@ -1671,10 +1671,11 @@
         code.putln("")
         if self.return_type.is_pyobject:
             if self.return_type.is_extension_type:
-                lhs = "(PyObject *)%s" % Naming.retval_cname
+                cast = "(PyObject *)"
             else:
-                lhs = Naming.retval_cname
-            code.put_init_to_py_none(lhs)
+                cast = None
+            lhs = Naming.retval_cname
+            code.put_init_to_py_none(cast, lhs)
         else:
             val = self.return_type.default_value
             if val:
