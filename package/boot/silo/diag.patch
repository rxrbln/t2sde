# --- T2-COPYRIGHT-BEGIN ---
# t2/package/*/silo/diag.patch
# Copyright (C) 2021 - 2025 The T2 SDE Project
# SPDX-License-Identifier: GPL-2.0 or patched project license
# --- T2-COPYRIGHT-END ---

--- silo-fcf8ffb4fba3ea72353c111ab7dc210eaae89223/second/file.c.vanilla	2021-02-10 17:07:43.204865718 +0100
+++ silo-fcf8ffb4fba3ea72353c111ab7dc210eaae89223/second/file.c	2021-02-10 17:09:37.740871626 +0100
@@ -195,6 +195,7 @@
             }
             if ((char *)filebuffer + (block_cnt + ((*blocknr) ? (blockcnt - last_blockcnt - 1) : 0)) * bs > filelimit) {
                 silo_fatal("Image too large to fit in destination");
+                printf("\nImage too large to fit in destination: %d\n", (long)filelimit - (long)filebuffer);
                 return BLOCK_ABORT;
             }
             if (block_cnt > 0 && io_channel_read_blk (fs->io, block_no, block_cnt, filebuffer))
--- silo-9277bfd/tilo/tilo.c.vanilla	2025-09-14 22:13:06.185613144 +0200
+++ silo-9277bfd/tilo/tilo.c	2025-09-14 22:46:59.220673558 +0200
@@ -117,6 +117,8 @@
     void *save_ptr;
     static int first = 1;
 
+    printf("Decompressing...");
+
     gzip_mark (&save_ptr);
    
     if (setjmp (gunzip_env)) {
@@ -135,9 +137,7 @@
     }
     gunzip ();
     gzip_release (&save_ptr);
-#ifdef TILO_DEBUG
-    printf("Returning from decompress()\n");
-#endif
+    printf("\n");
     return bytes_out;
 }
 
@@ -273,7 +273,7 @@
 
 			p = (Elf32_Phdr *) (hp.b + hp.e->e_phoff);
 			if (p->p_type != PT_LOAD) {
-				printf("Cannot find a loadable segment in your ELF image.\n");
+				printf("Cannot find a loadable segment in ELF image.\n");
 				prom_halt();
 			}
 
@@ -289,7 +289,7 @@
 					p->p_filesz = n + q->p_filesz;
 					p->p_memsz = n + q->p_memsz;
 				} else {
-					printf("Multiple loadable segments in your ELF image.\n");
+					printf("Multiple loadable segments in ELF image.\n");
 					prom_halt();
 				}
 			}
@@ -305,7 +305,7 @@
 
 			p = (Elf64_Phdr *) (hp.b + hp.f->e_phoff);
 			if (p->p_type != PT_LOAD) {
-				printf("Cannot find a loadable segment in your ELF image.\n");
+				printf("Cannot find a loadable segment in ELF image.\n");
 				prom_halt();
 			}
 			q = p + 1;
@@ -320,7 +320,7 @@
 					p->p_filesz = n + q->p_filesz;
 					p->p_memsz = n + q->p_memsz;
 				} else {
-					printf("Multiple loadable segments in your ELF image.\n");
+					printf("Multiple loadable segments in ELF image.\n");
 					prom_halt();
 				}
 			}
@@ -351,22 +351,22 @@
     if (cifh)
         {
     	kernel_number = SUN4U_KERNEL;		/* Sun4u */
-	printf("Selecting sun4u kernel...\n");
+	printf("Selecting sun4u...\n");
     	}
     else if ((long)promvec == 0x4000)
         {
     	kernel_number = SUN4_KERNEL;		/* Sun4 */
-	printf("Selecting sun4 kernel...\n");
+	printf("Selecting sun4...\n");
     	}
     else
     	{
     	kernel_number = SUN4C_KERNEL;		/* Sun4c/d/m */
-	printf("Selecting sun4cdm kernel...\n");
+	printf("Selecting sun4cdm...\n");
     	}
     	
     if (image_table[kernel_number].packed_len == 0)
     	{
-    	printf ("ERROR: No kernel for this architecture in this TILO image\n");
+    	printf ("ERROR: No kernel for this architecture.\n");
     	prom_halt ();
 	}
 	    				
@@ -403,10 +403,8 @@
 				image_table[ROOT_IMAGE].packed_len) & ~0xfff);
 	moved_kernel = (char*)((long)(moved_ramdisk -
 			       image_table[kernel_number].packed_len) & ~0xfff);
-#ifdef TILO_DEBUG
-	printf("Locations: moved_code=%x  moved_ramdisk=%x moved_kernel=%x\n",
+	printf("moved code=%x  ramdisk=%x kernel=%x\n",
 	       moved_code, moved_ramdisk, moved_kernel);
-#endif
 	memmove(moved_ramdisk, orig_code + image_table[ROOT_IMAGE].packed_start,
 		image_table[ROOT_IMAGE].packed_len);
 	memmove(moved_kernel,
@@ -428,7 +426,7 @@
 
     if (decompress (kernel_base, kernel_end, get_input, unget_input) == -1)
     	{
-        printf ("\nKernel decompression error\n");
+        printf ("Kernel decompression error.\n");
         prom_halt();
     	}
 
@@ -453,7 +451,7 @@
     		
     	default:
     						/* find HdrS in Sun4 kernel */
-    		printf ("Sun4 kernel not supported yet\n");
+    		printf ("Sun4 kernel not supported.\n");
     		prom_halt ();
     		break;
     	
@@ -461,7 +459,7 @@
 
     if (*q != HDRS_TAG)
     	{
-	printf ("Can't find HdrS tag in kernel\n");
+	printf ("Can't find HdrS tag in kernel.\n");
  	prom_halt ();
     	}
 
@@ -476,8 +474,6 @@
     if (move_ramdisk)
 	memmove ((void*)(image_table[kernel_number].root_start & 0x3fffff),
 		 moved_ramdisk, image_table[ROOT_IMAGE].packed_len);
-#ifdef TILO_DEBUG
-    printf("Returning from my_main() with address %x\n", kernel_base);
-#endif
+    printf("Returning with address %x\n", kernel_base);
     return kernel_base;			/* return address to jump into kernel */
 }
