# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../fourier-compose/fftw3f.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

--- fourier-compose-1.2/Makefile.orig	2006-01-02 23:27:30.000000000 +0000
+++ fourier-compose-1.2/Makefile	2006-10-04 13:12:38.000000000 +0000
@@ -9,12 +9,12 @@
 
 GIMP_CFLAGS = `$(GIMPTOOL) --cflags`
 GIMP_LDFLAGS = `$(GIMPTOOL) --libs`
-FFTW_CFLAGS = `$(PKGCONFIG) --cflags fftw3`
-FFTW_LDFLAGS = `$(PKGCONFIG) --libs fftw3`
+FFTW_CFLAGS = `$(PKGCONFIG) --cflags fftw3f`
+FFTW_LDFLAGS = `$(PKGCONFIG) --libs fftw3f`
 EXTRA_CFLAGS = -DLOCALEDIR=\"`$(GIMPTOOL) --prefix`/share/locale\" -DVERSION=\"$(VERSION)\" -Wall -O2
 
 CFLAGS := $(GIMP_CFLAGS) $(FFTW_CFLAGS) $(EXTRA_CFLAGS) $(CFLAGS)
-LDFLAGS := $(GIMP_LDFLAGS) $(FFTW_LDFLAGS) -lm $(LDFLAGS)
+LDLIBS := $(GIMP_LDFLAGS) $(FFTW_LDFLAGS) -lm $(LDFLAGS)
 
 DNAME = $(PACKAGE)-$(VERSION)
 SOURCES = fourier-compose.c
diff -ur fourier-compose-1.2_orig/fourier-compose.c fourier-compose-1.2/fourier-compose.c
--- fourier-compose-1.2_orig/fourier-compose.c	2006-01-02 23:27:30.000000000 +0000
+++ fourier-compose-1.2/fourier-compose.c	2006-08-26 17:35:58.714148750 +0100
@@ -186,8 +186,8 @@
 static gint    bpp, has_alpha, alpha;
 static glong   progress;
 static gdouble max_progress;  /* saves typecasting to double */
-static fftw_plan fft_plan;
-static fftw_complex *fft_data = NULL;
+static fftwf_plan fft_plan;
+static fftwf_complex *fft_data = NULL;
 
 
 MAIN()
@@ -850,7 +850,7 @@
         progress += 3*w*h;
         gimp_progress_update(progress/max_progress);
     }
-    fftw_execute(fft_plan);
+    fftwf_execute(fft_plan);
     if (!preview_mode) {
         progress += 4*w*h;
         gimp_progress_update(progress/max_progress);
@@ -898,9 +898,9 @@
         iy2 = gdk_pixbuf_get_height(preview);
         bpp = gdk_pixbuf_get_n_channels(preview);
         if (!fft_data) {
-            fft_data = fftw_malloc(ix2*iy2*sizeof(fftw_complex));
+            fft_data = fftwf_malloc(ix2*iy2*sizeof(fftwf_complex));
             /* This will be executed many times. */
-            fft_plan = fftw_plan_dft_2d(ix2, iy2, fft_data, fft_data,
+            fft_plan = fftwf_plan_dft_2d(ix2, iy2, fft_data, fft_data,
                                         1, FFTW_MEASURE);
         }
     }
@@ -911,13 +911,13 @@
         if (has_alpha)
             alpha = bpp-1;
         if (fft_data) {
-            fftw_destroy_plan(fft_plan);
-            fftw_free(fft_data);
+            fftwf_destroy_plan(fft_plan);
+            fftwf_free(fft_data);
         }
 
-        fft_data = fftw_malloc((ix2 - ix1)*(iy2 - iy1)*sizeof(fftw_complex));
+        fft_data = fftwf_malloc((ix2 - ix1)*(iy2 - iy1)*sizeof(fftwf_complex));
         /* This will be executed once. */
-        fft_plan = fftw_plan_dft_2d(iy2 - iy1, ix2 - ix1, fft_data, fft_data,
+        fft_plan = fftwf_plan_dft_2d(iy2 - iy1, ix2 - ix1, fft_data, fft_data,
                                     1, FFTW_ESTIMATE);
     }
     max_progress = 10.0*(ix2 - ix1)*(iy2 - iy1);
