diff -rduN SDL-old/src/audio/SDL_mixer_MMX.c SDL-new/src/audio/SDL_mixer_MMX.c
--- SDL-old/src/audio/SDL_mixer_MMX.c	2002-11-09 07:13:28.000000000 +0100
+++ SDL-new/src/audio/SDL_mixer_MMX.c	2004-05-18 15:28:23.000000000 +0200
@@ -19,9 +19,9 @@
 "	movl %1,%%esi\n"	// esi = src
 "	movl %3,%%eax\n"	// eax = volume
 
-"	movl %2,%%ebx\n"	// ebx = size
+"	movl %2,%%edx\n"	// edx = size
 
-"	shrl $4,%%ebx\n"	// process 16 bytes per iteration = 8 samples
+"	shrl $4,%%edx\n"	// process 16 bytes per iteration = 8 samples
 
 "	jz .endS16\n"
 
@@ -95,7 +95,7 @@
 
 "	addl $16,%%edi\n"
 
-"	dec %%ebx\n"
+"	dec %%edx\n"
 
 "	jnz .mixloopS16\n"
 
@@ -105,7 +105,7 @@
 	 :
 	 : "m" (dst), "m"(src),"m"(size),
 	 "m"(volume)
-	 : "eax","ebx", "esi", "edi","memory"
+	 : "eax","edx", "esi", "edi","memory"
 	 );
 }
 
@@ -123,7 +123,7 @@
 "	movl %1,%%esi\n"	// esi = src
 "	movl %3,%%eax\n"	// eax = volume
 
-"	movd %%ebx,%%mm0\n"
+"	movd %%edx,%%mm0\n"
 "	movq %%mm0,%%mm1\n"
 "	psllq $16,%%mm0\n"
 "	por %%mm1,%%mm0\n"
@@ -132,10 +132,10 @@
 "	psllq $16,%%mm0\n"
 "	por %%mm1,%%mm0\n"
 
-"	movl %2,%%ebx\n"	// ebx = size
-"	shr $3,%%ebx\n"	// process 8 bytes per iteration = 8 samples
+"	movl %2,%%edx\n"	// edx = size
+"	shr $3,%%edx\n"	// process 8 bytes per iteration = 8 samples
 
-"	cmp $0,%%ebx\n"
+"	cmp $0,%%edx\n"
 "	je .endS8\n"
 
 ".align 16\n"
@@ -169,7 +169,7 @@
 "	movq %%mm3,(%%edi)\n"	// store back to ram
 "	addl $8,%%edi\n"
 
-"	dec %%ebx\n"
+"	dec %%edx\n"
 
 "	jnz .mixloopS8\n"
 
@@ -178,7 +178,7 @@
 	 :
 	 : "m" (dst), "m"(src),"m"(size),
 	 "m"(volume)
-	 : "eax","ebx", "esi", "edi","memory"
+	 : "eax","edx", "esi", "edi","memory"
 	 );
 }
 #endif
diff -rduN SDL-old/src/cpuinfo/SDL_cpuinfo.c SDL-new/src/cpuinfo/SDL_cpuinfo.c
--- SDL-old/src/cpuinfo/SDL_cpuinfo.c	2004-02-10 16:31:35.000000000 +0100
+++ SDL-new/src/cpuinfo/SDL_cpuinfo.c	2004-05-18 15:29:31.000000000 +0200
@@ -105,7 +105,7 @@
 	int features = 0;
 #if defined(__GNUC__) && defined(i386)
 	__asm__ (
-"        movl    %%ebx,%%edi\n"
+"        movl    %%edx,%%edi\n"
 "        xorl    %%eax,%%eax         # Set up for CPUID instruction    \n"
 "        cpuid                       # Get and save vendor ID          \n"
 "        cmpl    $1,%%eax            # Make sure 1 is valid input for CPUID\n"
@@ -115,10 +115,10 @@
 "        cpuid                       # Get family/model/stepping/features\n"
 "        movl    %%edx,%0                                              \n"
 "1:                                                                    \n"
-"        movl    %%edi,%%ebx\n"
+"        movl    %%edi,%%edx\n"
 	: "=m" (features)
 	:
-	: "%eax", "%ebx", "%ecx", "%edx", "%edi"
+	: "%eax", "%edx", "%ecx", "%edx", "%edi"
 	);
 #elif defined(_MSC_VER)
 	__asm {
@@ -141,7 +141,7 @@
 	int features = 0;
 #if defined(__GNUC__) && defined(i386)
 	__asm__ (
-"        movl    %%ebx,%%edi\n"
+"        movl    %%edx,%%edi\n"
 "        movl    $0x80000000,%%eax   # Query for extended functions    \n"
 "        cpuid                       # Get extended function limit     \n"
 "        cmpl    $0x80000001,%%eax                                     \n"
@@ -150,10 +150,10 @@
 "        cpuid                       # and get the information         \n"
 "        movl    %%edx,%0                                              \n"
 "1:                                                                    \n"
-"        movl    %%edi,%%ebx\n"
+"        movl    %%edi,%%edx\n"
 	: "=m" (features)
 	:
-	: "%eax", "%ebx", "%ecx", "%edx", "%edi"
+	: "%eax", "%edx", "%ecx", "%edx", "%edi"
 	);
 #elif defined(_MSC_VER)
 	__asm {
diff -rduN SDL-old/src/video/SDL_yuv_mmx.c SDL-new/src/video/SDL_yuv_mmx.c
--- SDL-old/src/video/SDL_yuv_mmx.c	2004-02-18 18:22:04.000000000 +0100
+++ SDL-new/src/video/SDL_yuv_mmx.c	2004-05-17 22:53:31.000000000 +0200
@@ -120,12 +120,12 @@
 		 "movd (%2), %%mm2\n"           //    0  0  0  0 l3 l2 l1 l0
 		 "punpcklbw %%mm7,%%mm1\n" //         0  v3 0  v2 00 v1 00 v0
 		 "punpckldq %%mm1,%%mm1\n" //         00 v1 00 v0 00 v1 00 v0
-		 "psubw _MMX_0080w,%%mm1\n"  // mm1-128:r1 r1 r0 r0 r1 r1 r0 r0 
+		 "psubw %[_MMX_0080w],%%mm1\n"  // mm1-128:r1 r1 r0 r0 r1 r1 r0 r0 
 
 		 // create Cr_g (result in mm0)
 		 "movq %%mm1,%%mm0\n"           // r1 r1 r0 r0 r1 r1 r0 r0
-		 "pmullw _MMX_VgrnRGB,%%mm0\n"// red*-46dec=0.7136*64
-		 "pmullw _MMX_VredRGB,%%mm1\n"// red*89dec=1.4013*64
+		 "pmullw %[_MMX_VgrnRGB],%%mm0\n"// red*-46dec=0.7136*64
+		 "pmullw %[_MMX_VredRGB],%%mm1\n"// red*89dec=1.4013*64
 		 "psraw  $6, %%mm0\n"           // red=red/64
 		 "psraw  $6, %%mm1\n"           // red=red/64
 		 
@@ -134,8 +134,8 @@
 		 "movq (%2,%4),%%mm3\n"         //    0  0  0  0 L3 L2 L1 L0
 		 "punpckldq %%mm3,%%mm2\n"      //   L3 L2 L1 L0 l3 l2 l1 l0
 		 "movq %%mm2,%%mm4\n"           //   L3 L2 L1 L0 l3 l2 l1 l0
-		 "pand _MMX_FF00w,%%mm2\n"      //   L3 0  L1  0 l3  0 l1  0
-		 "pand _MMX_00FFw,%%mm4\n"      //   0  L2  0 L0  0 l2  0 l0
+		 "pand %[_MMX_FF00w],%%mm2\n"      //   L3 0  L1  0 l3  0 l1  0
+		 "pand %[_MMX_00FFw],%%mm4\n"      //   0  L2  0 L0  0 l2  0 l0
 		 "psrlw $8,%%mm2\n"             //   0  L3  0 L1  0 l3  0 l1
 
 		 // create R (result in mm6)
@@ -152,11 +152,11 @@
 		 "movd (%1), %%mm1\n"      //         0  0  0  0  u3 u2 u1 u0
 		 "punpcklbw %%mm7,%%mm1\n" //         0  u3 0  u2 00 u1 00 u0
 		 "punpckldq %%mm1,%%mm1\n" //         00 u1 00 u0 00 u1 00 u0
-		 "psubw _MMX_0080w,%%mm1\n"  // mm1-128:u1 u1 u0 u0 u1 u1 u0 u0 
+		 "psubw %[_MMX_0080w],%%mm1\n"  // mm1-128:u1 u1 u0 u0 u1 u1 u0 u0 
 		 // create Cb_g (result in mm5)
 		 "movq %%mm1,%%mm5\n"            // u1 u1 u0 u0 u1 u1 u0 u0
-		 "pmullw _MMX_UgrnRGB,%%mm5\n"    // blue*-109dec=1.7129*64
-		 "pmullw _MMX_UbluRGB,%%mm1\n"    // blue*114dec=1.78125*64
+		 "pmullw %[_MMX_UgrnRGB],%%mm5\n"    // blue*-109dec=1.7129*64
+		 "pmullw %[_MMX_UbluRGB],%%mm1\n"    // blue*114dec=1.78125*64
 		 "psraw  $6, %%mm5\n"            // blue=red/64
 		 "psraw  $6, %%mm1\n"            // blue=blue/64
 
@@ -238,9 +238,15 @@
 		 "popl %%ebx\n"
 		 :
 		 : "m" (cr), "r"(cb),"r"(lum),
-		 "r"(row1),"r"(cols),"r"(row2),"m"(x),"m"(y),"m"(mod)
-		 : "%ebx"
-		 );
+		 "r"(row1),"r"(cols),"r"(row2),"m"(x),"m"(y),"m"(mod),
+		[_MMX_0080w] "m" (*_MMX_0080w),
+		[_MMX_00FFw] "m" (*_MMX_00FFw),
+		[_MMX_FF00w] "m" (*_MMX_FF00w),
+		[_MMX_VgrnRGB] "m" (*_MMX_VgrnRGB),
+		[_MMX_VredRGB] "m" (*_MMX_VredRGB),
+		[_MMX_UgrnRGB] "m" (*_MMX_UgrnRGB),
+		[_MMX_UbluRGB] "m" (*_MMX_UbluRGB)		 
+		);
 }
 
 void Color565DitherYV12MMX1X( int *colortab, Uint32 *rgb_2_pix,
@@ -413,9 +419,17 @@
 	 "popl %%ebx\n"
          :
          :"m" (cr), "r"(cb),"r"(lum),
-	 "r"(row1),"r"(cols),"r"(row2),"m"(x),"m"(y),"m"(mod)
-	 : "%ebx"
-         );
+	 "r"(row1),"r"(cols),"r"(row2),"m"(x),"m"(y),"m"(mod),
+     [_MMX_0080w] "m" (*_MMX_0080w),
+ [_MMX_Ugrn565] "m" (*_MMX_Ugrn565),
+ [_MMX_Ublu5x5] "m" (*_MMX_Ublu5x5),
+ [_MMX_00FFw] "m" (*_MMX_00FFw),
+ [_MMX_Vgrn565] "m" (*_MMX_Vgrn565),
+ [_MMX_Vred5x5] "m" (*_MMX_Vred5x5),
+ [_MMX_Ycoeff] "m" (*_MMX_Ycoeff),
+ [_MMX_red565] "m" (*_MMX_red565),
+ [_MMX_grn565] "m" (*_MMX_grn565)         
+		);
 }
 
 #endif /* GCC i386 inline assembly */
