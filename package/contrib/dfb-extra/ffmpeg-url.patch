# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../dfb-extra/ffmpeg-url.patch
# Copyright (C) 2008 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

--- DirectFB-extra.git/interfaces/IDirectFBVideoProvider/idirectfbvideoprovider_ffmpeg.c.orig	2008-01-21 15:55:01.000000000 +0100
+++ DirectFB-extra.git/interfaces/IDirectFBVideoProvider/idirectfbvideoprovider_ffmpeg.c	2008-01-21 17:54:13.000000000 +0100
@@ -412,7 +412,7 @@
 {
      IDirectFBVideoProvider_FFmpeg_data *data = arg;
 
-     if (url_is_streamed( data->context->pb )) {
+     if (url_is_streamed( &data->pb )) {
           data->input.buffering = true;
           pthread_mutex_lock( &data->video.queue.lock );
           pthread_mutex_lock( &data->audio.queue.lock );
@@ -438,7 +438,7 @@
                     flush_packets( &data->video.queue );
                     flush_packets( &data->audio.queue );
                     if (!data->input.buffering &&
-                        url_is_streamed( data->context->pb )) {
+                        url_is_streamed( &data->pb )) {
                          data->input.buffering = true;
                          pthread_mutex_lock( &data->video.queue.lock );
                          pthread_mutex_lock( &data->audio.queue.lock );
@@ -473,7 +473,7 @@
           else if (data->video.queue.size == 0 || 
                    data->audio.queue.size == 0) {
                if (!data->input.buffering &&
-                   url_is_streamed( data->context->pb )) {
+                   url_is_streamed( &data->pb )) {
                     data->input.buffering = true;
                     pthread_mutex_lock( &data->video.queue.lock );
                     pthread_mutex_lock( &data->audio.queue.lock );
@@ -481,7 +481,7 @@
           }
           
           if (av_read_frame( data->context, &packet ) < 0) {
-               if (url_feof( data->context->pb )) {
+               if (url_feof( &data->pb )) {
                     if (data->input.buffering) {
                          pthread_mutex_unlock( &data->audio.queue.lock ); 
                          pthread_mutex_unlock( &data->video.queue.lock );
