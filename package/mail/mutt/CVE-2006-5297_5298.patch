# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../mutt/CVE-2006-5297_5298.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

diff -Nur mutt-1.4.2.1-orig/lib.c mutt-1.4.2.1/lib.c
--- mutt-1.4.2.1-orig/lib.c	2002-04-29 19:12:18.000000000 +0200
+++ mutt-1.4.2.1/lib.c	2006-10-18 13:33:36.000000000 +0300
@@ -346,13 +346,83 @@
   return 0;
 }
 
+/* Create a temporary directory next to a file name */
+
+int mutt_mkwrapdir (const char *path, char *newfile, size_t nflen,
+ char *newdir, size_t ndlen)
+{
+ const char *basename;
+ char parent[_POSIX_PATH_MAX];
+ char *p;
+ int rv;
+
+ strfcpy (parent, NONULL (path), sizeof (parent));
+
+ if ((p = strrchr (parent, '/')))
+ {
+ *p = '\0';
+ basename = p + 1;
+ }
+ else
+ {
+ strfcpy (parent, ".", sizeof (parent));
+ basename = path;
+ }
+
+ do
+ {
+ snprintf (newdir, ndlen, "%s/%s", parent, ".muttXXXXXX");
+ mktemp (newdir);
+ }
+ while ((rv = mkdir (newdir, 0700)) == -1 && errno == EEXIST);
+
+ if (rv == -1)
+ return -1;
+
+ snprintf (newfile, nflen, "%s/%s", newdir, NONULL(basename));
+ return 0;
+}
+
+int mutt_put_file_in_place (const char *path, const char *safe_file, const char *safe_dir)
+{
+ int rv;
+
+ rv = safe_rename (safe_file, path);
+ unlink (safe_file);
+ rmdir (safe_dir);
+ return rv;
+}
+
 int safe_open (const char *path, int flags)
 {
   struct stat osb, nsb;
   int fd;
 
-  if ((fd = open (path, flags, 0600)) < 0)
-    return fd;
+ if (flags & O_EXCL)
+ {
+ char safe_file[_POSIX_PATH_MAX];
+ char safe_dir[_POSIX_PATH_MAX];
+ if (mutt_mkwrapdir (path, safe_file, sizeof (safe_file),
+ safe_dir, sizeof (safe_dir)) == -1)
+ return -1;
+
+ if ((fd = open (safe_file, flags, 0600)) < 0)
+ {
+ rmdir (safe_dir);
+ return fd;
+ }
+
+ if (mutt_put_file_in_place (path, safe_file, safe_dir) == -1)
+ {
+ close (fd);
+ return -1;
+ }
+ }
+ else
+ {
+ if ((fd = open (path, flags, 0600)) < 0)
+ return fd;
+ }
 
   /* make sure the file is not symlink */
   if (lstat (path, &osb) < 0 || fstat (fd, &nsb) < 0 ||
