? libraries/javalib/external/classpath/autom4te.cache
? libraries/javalib/external/classpath/doc/hacking.info
? libraries/javalib/external/classpath/doc/vmintegration.info
Index: libraries/javalib/external/classpath//gnu/xml/dom/DomNode.java
===================================================================
RCS file: /cvs/kaffe/kaffe/libraries/javalib/external/classpath/gnu/xml/dom/DomNode.java,v
retrieving revision 1.2
diff -u -r1.2 DomNode.java
--- ./libraries/javalib/external/classpath//gnu/xml/dom/DomNode.java	19 Dec 2005 00:11:56 -0000	1.2
+++ ./libraries/javalib/external/classpath//gnu/xml/dom/DomNode.java	22 Dec 2005 14:35:30 -0000
@@ -38,6 +38,7 @@
 package gnu.xml.dom;
 
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 
@@ -149,7 +150,7 @@
   boolean readonly;
 
   // event registrations
-  private ListenerRecord[] listeners;
+  private HashSet listeners;
   private int nListeners;
 
   // DOM Level 3 userData dictionary.
@@ -167,19 +168,6 @@
    */
   public void compact()
   {
-    if (listeners != null && listeners.length != nListeners)
-      {
-        if (nListeners == 0)
-          {
-            listeners = null;
-          }
-        else
-          {
-            ListenerRecord[] l = new ListenerRecord[nListeners];
-            System.arraycopy(listeners, 0, l, 0, nListeners);
-            listeners = l;
-          }
-      }
   }
 
   /**
@@ -201,6 +189,7 @@
           }
       }
     this.owner = owner;
+    this.listeners = new HashSet();
   }
   
 
@@ -960,12 +949,6 @@
    */
   public void trimToSize()
   {
-    if (listeners != null && listeners.length != nListeners)
-      {
-        ListenerRecord[] newKids = new ListenerRecord[length];
-        System.arraycopy(listeners, 0, newKids, 0, nListeners);
-        listeners = newKids;
-      }
   }
 
   /**
@@ -1175,7 +1158,7 @@
         node.next = null;
         
         node.readonly = false;
-        node.listeners = null;
+        node.listeners = new HashSet();
         node.nListeners = 0;
         return node;
 
@@ -1404,13 +1387,18 @@
       this.useCapture = useCapture;
     }
 
-    boolean equals(ListenerRecord rec)
+    public boolean equals(Object o)
     {
+      ListenerRecord rec = (ListenerRecord)o;
       return listener == rec.listener
         && useCapture == rec.useCapture
-        && type == rec.type;
+        && type.equals(rec.type);
     }
     
+    public int hashCode()
+    {
+	return listener.hashCode() ^ type.hashCode();
+    }
   }
 
   /**
@@ -1465,30 +1453,12 @@
                                      EventListener listener,
                                      boolean useCapture)
   {
-    if (listeners == null)
-      {
-        listeners = new ListenerRecord[1];
-      }
-    else if (nListeners == listeners.length)
-      {
-        ListenerRecord[] newListeners =
-          new ListenerRecord[listeners.length + NKIDS_DELTA];
-        System.arraycopy(listeners, 0, newListeners, 0, nListeners);
-        listeners = newListeners;
-      }
-
     // prune duplicates
     ListenerRecord record;
 
     record = new ListenerRecord(type, listener, useCapture);
-    for (int i = 0; i < nListeners; i++)
-      {
-        if (record.equals(listeners[i]))
-          {
-            return;
-          }
-      }
-    listeners [nListeners++] = record;
+    listeners.add(record);
+    nListeners++;
   }
 
   // XXX this exception should be discarded from DOM
@@ -1673,11 +1643,14 @@
                           ListenerRecord[] notificationSet)
   {
     int count = 0;
+    Iterator iter;
+
+    iter = current.listeners.iterator();
 
     // do any of this set of listeners get notified?
-    for (int i = 0; i < current.nListeners; i++)
+    while (iter.hasNext())
       {
-        ListenerRecord rec = current.listeners[i];
+        ListenerRecord rec = (ListenerRecord)iter.next();
 
         if (rec.useCapture != capture)
           {
@@ -1705,12 +1678,15 @@
       {
         try
           {
+	    iter = current.listeners.iterator();
             // Late in the DOM CR process (3rd or 4th CR?) the
             // removeEventListener spec became asymmetric with respect
             // to addEventListener ... effect is now immediate.
-            for (int j = 0; j < current.nListeners; j++)
+	    while (iter.hasNext())
               {
-                if (current.listeners[j].equals(notificationSet[i]))
+		ListenerRecord rec = (ListenerRecord)iter.next();
+
+                if (rec.equals(notificationSet[i]))
                   {
                     notificationSet[i].listener.handleEvent(e);
                     break;
@@ -1734,36 +1710,11 @@
                                         EventListener listener,
                                         boolean useCapture)
   {
-    for (int i = 0; i < nListeners; i++)
-      {
-        if (listeners[i].listener != listener)
-          {
-            continue;
-          }
-        if (listeners[i].useCapture != useCapture)
-          {
-            continue;
-          }
-        if (!listeners[i].type.equals(type))
-          {
-            continue;
-          }
-
-        if (nListeners == 1)
-          {
-            listeners = null;
-            nListeners = 0;
-          }
-        else
-          {
-            for (int j = i + 1; j < nListeners; j++)
-              {
-                listeners[i++] = listeners[j++];
-              }
-            listeners[--nListeners] = null;
-          }
-        break;
-      }
+	if (!listeners.remove(new ListenerRecord(type, listener, useCapture)))
+	{
+		System.out.println("type="+type+ " listener=" + listener + " usecapt="+useCapture+ "  not removed");
+	}
+    nListeners--;
     // no exceptions reported
   }
 
