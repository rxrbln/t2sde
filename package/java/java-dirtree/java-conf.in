#!/bin/sh
# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
#
# T2 SDE: package/.../java-dirtree/java-conf.in
# Copyright (C) 2004 - 2005 The T2 SDE Project
#
# More information can be found in the files COPYING and README.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. A copy of the
# GNU General Public License can be found in the file COPYING.
# --- T2-COPYRIGHT-NOTE-END ---

# Make sure the jdk placeholder is installed as well.
pkgprefix -t 00-jdk

# Prevent executing normal make and install build steps.
# Java packages have custom make and install.
makeopt=''
makeinstopt=''

# 
maven1_build() {
	# Maven 2 needs to be installed to be able to use it.
	pkgprefix -t maven1

	# Invoke maven to start building. However, we strictly
	# forbid downloading dependancies from remote repositories.
	# All dependancies should be build locally and added to
	# the local repository.
	$root/$(pkgprefix bindir maven1)/maven \
		-Dmaven.repo.remote.enabled=false \
		$mavengoals --pom $1
}

# 
maven2_build() {
	# Maven 2 needs to be installed to be able to use it.
	pkgprefix -t maven

	abort "MAVEN2 building NOT yet implemented."
}

# 
ant_build() {
	# Ant needs to be installed to be able to use it.
	pkgprefix -t apache-ant

	# Invoke Ant to start building.
	$root/$(pkgprefix bindir apache-ant)/ant -buildfile $1
}

# We have to set JAVA_HOME environment variable. For this we
# check every jdk we know and verify if it is installed.
for jdk in $* sun-jdk-150 sun-jdk-142 ibm-jdk-142 blackdown-jdk; do
	if pkginstalled $jdk; then
		pkgprefix -t $jdk

		# Make java home available to java packages.
		export JAVA_HOME=$(pkgprefix $jdk)

		# Determine the java version.
		# Todo: might be important to some packages.

		break
	fi
done

# Check if at least one of the jdk's is available right now.
if [ -z $JAVA_HOME ]; then
	# No jdk available, continueing is pointless.
	abort "At least one of the JDK's need to be installed."
fi

# This function determines the maven version to be used on
# the given input file.
# param: pom/project filename
# return: the pom/project file major version number.
detect_maven_version() {
	# Todo:  look inside the file to determine the version.
	echo "3"
}

# We know how to build Ant, Maven and Maven 2 style projects.
# build and build.sh scripts are ignored on purpose. By controlling
# the build in here we might make it easier to build packages using
# exotic compilers like gcj or jikes.
determine_build_type() {
	# Check if the Ant build.xml file is available.
	if [ -f build.xml ]; then
		# Package can be build using Ant. However this might be
		# overruled by any of the others.
		builder_func="ant_build build.xml"
	fi

	# Check if the Maven pom.xml or project.xml file is available.
	for mavenfile in pom.xml project.xml; do
		# Check if the maven file exists
		if [ -f $mavenfile ]; then
			# A maven file is available, but what maven
			# version should be used? The projectfile
			# version can tell us.
			pomversion=`detect_maven_version $mavenfile`
			case "$pomversion" in
				4*) builder_func="maven2_build $mavenfile" ;;
				# In all other cases we use maven 1.
				*) builder_func="maven1_build $mavenfile" ;;
			esac
		fi
	done

	# Check if we have found an appropriate java builder.
	if [ -n $builder_func ]; then
		# Set the inmake hook to use the selected builder type.
		hook_add inmake 5 $builder_func
	fi 

	# If none of the supported build styles were detected,
	# the package is on its own now.
}

# We use a postpatch hook to determine what kind of build process
# is needed. When we know we set the inmake hook appropriately.
hook_add postpatch 5 determine_build_type
