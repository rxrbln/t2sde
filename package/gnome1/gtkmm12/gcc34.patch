# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../gtkmm12/gcc34.patch
# Copyright (C) 2004 - 2005 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---
diff -ruN gtkmm-1.2.10/src/build_sources/proxy.h.m4 gtkmm-1.2.10-new/src/build_sources/proxy.h.m4
--- gtkmm-1.2.10/src/build_sources/proxy.h.m4	2000-03-02 21:08:28.000000000 +0100
+++ gtkmm-1.2.10-new/src/build_sources/proxy.h.m4	2004-07-12 15:14:01.355246824 +0200
@@ -174,20 +174,20 @@
           data.callback=&callback;
           data.obj=this;
           SigC::ScopeNode* node=tmp->receiver();
-          obj->register_data(node);
+          this->obj->register_data(node);
           return tmp;
         }
 
       RType emit(ARG_BOTH($1))
         {
           return reinterpret_cast<RType (*)(LIST(gObj*,1,ARG_TYPE($1),[$1]))>
-            (emit_func) (LIST(obj->gtkobj(),1,ARG_NAME($1),[$1]));
+            (emit_func) (LIST(this->obj->gtkobj(),1,ARG_NAME($1),[$1]));
         }
 
       RType operator()(ARG_BOTH($1))
         {
           return reinterpret_cast<RType (*)(LIST(gObj*,1,ARG_TYPE($1),[$1]))>
-            (emit_func) (LIST(obj->gtkobj(),1,ARG_NAME($1),[$1]));
+            (emit_func) (LIST(this->obj->gtkobj(),1,ARG_NAME($1),[$1]));
         }
 
   };
diff -ruN gtkmm-1.2.10/src/curve.gen_h gtkmm-1.2.10-new/src/curve.gen_h
--- gtkmm-1.2.10/src/curve.gen_h	2001-07-15 15:33:38.000000000 +0200
+++ gtkmm-1.2.10-new/src/curve.gen_h	2004-07-12 15:36:09.064121270 +0200
@@ -143,8 +143,8 @@
       int i;
       Iterator iter;
       for (iter=b,i=0;iter!=e;++iter,i++);
-      gfloat data[]=new gfloat[i];
-      get_vector(n,data);
+      gfloat *data=new gfloat[i];
+      get_vector(i,data);
       for (iter=b,i=0;iter!=e;++iter,i++)
         (*iter)=data[i];
       delete [] data;
diff -ruN gtkmm-1.2.10/src/gtk--/base.h gtkmm-1.2.10-new/src/gtk--/base.h
--- gtkmm-1.2.10/src/gtk--/base.h	2001-12-06 16:32:51.000000000 +0100
+++ gtkmm-1.2.10-new/src/gtk--/base.h	2004-07-12 15:44:41.636602722 +0200
@@ -90,6 +90,8 @@
 
 struct _GtkObject;
 
+namespace Gtk { Gtk::Object *wrap (GtkObject *o); }
+
 namespace Gtk
 {
 
@@ -482,7 +484,7 @@
   value_type operator*() const
   {
     if (node && node->data)
-      return Gtk::wrap(static_cast<impl*>((*node).data));
+      return static_cast<value_type>(Gtk::wrap(static_cast<GtkObject*>((*node).data)));
     return 0;
   }
 
