diff -Naur emacs-21.3-old/configure emacs-21.3/configure
--- emacs-21.3-old/configure	2003-12-14 03:34:27.000000000 +0000
+++ emacs-21.3/configure	2003-12-14 03:35:13.000000000 +0000
@@ -1632,6 +1632,11 @@
     machine=ia64 opsys=gnu-linux
   ;;
 
+  ## X86-64
+  x86_64*-*-linux* )
+    machine=x86_64 opsys=gnu-linux
+  ;;
+
   ## Intel 386 machines where we don't care about the manufacturer
   i[3456]86-*-* )
     machine=intel386
diff -Naur emacs-21.3-old/configure.in emacs-21.3/configure.in
--- emacs-21.3-old/configure.in	2003-12-14 03:34:27.000000000 +0000
+++ emacs-21.3/configure.in	2003-12-14 03:35:04.000000000 +0000
@@ -1006,6 +1006,11 @@
     machine=ia64 opsys=gnu-linux
   ;;
 
+  ## X86-64
+  x86_64*-*-linux* )
+    machine=x86_64 opsys=gnu-linux
+  ;;
+
   ## Intel 386 machines where we don't care about the manufacturer
   i[3456]86-*-* )
     machine=intel386
diff -Naur emacs-21.3-old/src/m/x86_64.h emacs-21.3/src/m/x86_64.h
--- emacs-21.3-old/src/m/x86_64.h	1970-01-01 00:00:00.000000000 +0000
+++ emacs-21.3/src/m/x86_64.h	2003-12-14 03:35:04.000000000 +0000
@@ -0,0 +1,175 @@
+/* machine description file for the X86-64 architecture.
+   Copyright (C) 2000 Free Software Foundation, Inc.
+
+This file is part of GNU Emacs.
+
+GNU Emacs is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 1, or (at your option)
+any later version.
+
+GNU Emacs is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Emacs; see the file COPYING.  If not, write to
+the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+Boston, MA 02111-1307, USA.  */
+
+#define BITS_PER_LONG		64
+#define BITS_PER_EMACS_INT	64
+
+/* Define WORDS_BIG_ENDIAN iff lowest-numbered byte in a word
+   is the most significant byte.  */
+
+#undef WORDS_BIG_ENDIAN
+
+/* Define NO_ARG_ARRAY if you cannot take the address of the first of a
+   group of arguments and treat it as an array of the arguments.  */
+
+#define NO_ARG_ARRAY
+
+/* Define WORD_MACHINE if addresses and such have
+   to be corrected before they can be used as byte counts.  */
+
+/* #define WORD_MACHINE */
+
+/* Now define a symbol for the cpu type, if your compiler
+   does not define it automatically:
+   Ones defined so far include vax, m68000, ns16000, pyramid,
+   orion, tahoe, APOLLO and many others */
+
+/* __x86_64__ defined automatically */
+
+
+/* Use type EMACS_INT rather than a union, to represent Lisp_Object */
+/* This is desirable for most machines.  */
+
+#define NO_UNION_TYPE
+
+/* Define the type to use.  */
+#define EMACS_INT		long
+#define EMACS_UINT		unsigned long
+#define SPECIAL_EMACS_INT
+
+/* Define EXPLICIT_SIGN_EXTEND if XINT must explicitly sign-extend
+   the 24-bit bit field into an int.  In other words, if bit fields
+   are always unsigned.
+
+   If you use NO_UNION_TYPE, this flag does not matter.  */
+
+#define EXPLICIT_SIGN_EXTEND
+
+/* Data type of load average, as read out of kmem.  */
+
+#define LOAD_AVE_TYPE		long
+
+/* Convert that into an integer that is 100 for a load average of 1.0  */
+
+#define LOAD_AVE_CVT(x) (int) (((double) (x)) * 100.0 / FSCALE)
+
+/* Define CANNOT_DUMP on machines where unexec does not work.
+   Then the function dump-emacs will not be defined
+   and temacs will do (load "loadup") automatically unless told otherwise.  */
+#if 0
+#define CANNOT_DUMP
+#endif
+
+/* Define VIRT_ADDR_VARIES if the virtual addresses of
+   pure and impure space as loaded can vary, and even their
+   relative order cannot be relied on.
+
+   Otherwise Emacs assumes that text space precedes data space,
+   numerically.  */
+
+/* #define VIRT_ADDR_VARIES */
+
+/* Define C_ALLOCA if this machine does not support a true alloca
+   and the one written in C should be used instead.
+   Define HAVE_ALLOCA to say that the system provides a properly
+   working alloca function and it should be used.
+   Define neither one if an assembler-language alloca
+   in the file alloca.s should be used.  */
+
+#define HAVE_ALLOCA
+
+/* Define the following if GNU malloc and the relocating allocator do
+   not work together with X.  */
+
+/* #define SYSTEM_MALLOC */
+
+/* Define NO_REMAP if memory segmentation makes it not work well
+   to change the boundary between the text section and data section
+   when Emacs is dumped.  If you define this, the preloaded Lisp
+   code will not be sharable; but that's better than failing completely.  */
+
+/* #define NO_REMAP */
+
+/* Some really obscure 4.2-based systems (like Sequent DYNIX) do not
+   support asynchronous I/O (using SIGIO) on sockets, even though it
+   works fine on tty's.  If you have one of these systems, define the
+   following, and then use it in config.h (or elsewhere) to decide
+   when (not) to use SIGIO.
+
+   You'd think this would go in an operating-system description file,
+   but since it only occurs on some, but not all, BSD systems, the
+   reasonable place to select for it is in the machine description
+   file.  */
+
+/* #define NO_SOCK_SIGIO */
+
+#ifdef __ELF__
+#undef UNEXEC
+#define UNEXEC unexelf.o
+#endif
+
+#define PNTR_COMPARISON_TYPE unsigned long
+
+/* On the 64 bit architecture, we can use 60 bits for addresses */
+
+#define VALBITS         60
+
+/* Define XINT and XUINT so that they can take arguments of type int */
+
+#define XINT(a)  (((long) (a) << (BITS_PER_LONG - VALBITS)) >> (BITS_PER_LONG - VALBITS))
+#define XUINT(a) ((long) (a) & VALMASK)
+
+/* Declare malloc and realloc in a way that is clean.
+   But not in makefiles!  */
+
+#ifndef NOT_C_CODE
+/* We need these because pointers are larger than the default ints.  */
+# if !defined(__NetBSD__) && !defined(__OpenBSD__)
+#  include <alloca.h>
+# else
+#  include <stdlib.h>
+# endif
+
+/* We need to prototype these for the lib-src programs even if we don't
+   use the system malloc for the Emacs proper.  */
+#ifdef _MALLOC_INTERNAL
+/* These declarations are designed to match the ones in gmalloc.c.  */
+#if defined (__STDC__) && __STDC__
+extern void *malloc (), *realloc (), *calloc ();
+#else
+extern char *malloc (), *realloc (), *calloc ();
+#endif
+#else /* not _MALLOC_INTERNAL */
+extern void *malloc (), *realloc (), *calloc ();
+#endif /* not _MALLOC_INTERNAL */
+
+#ifdef REL_ALLOC
+#ifndef _MALLOC_INTERNAL
+/* "char *" because ralloc.c defines it that way.  gmalloc.c thinks it
+   is allowed to prototype these as "void *" so we don't prototype in
+   that case.  You're right: it stinks!  */
+extern char *r_alloc (), *r_re_alloc ();
+extern void r_alloc_free ();
+#endif /* not _MALLOC_INTERNAL */
+#endif /* REL_ALLOC */
+
+#endif /* not NOT_C_CODE */
+
+#define HAVE_TEXT_START
diff -Naur emacs-21.3-old/src/s/gnu-linux.h emacs-21.3/src/s/gnu-linux.h
--- emacs-21.3-old/src/s/gnu-linux.h	2003-12-14 03:34:28.000000000 +0000
+++ emacs-21.3/src/s/gnu-linux.h	2003-12-14 03:35:04.000000000 +0000
@@ -173,8 +173,12 @@
 /* GNU/Linux usually has crt0.o in a non-standard place */
 #define START_FILES pre-crt0.o /usr/lib/crt0.o
 #else
+#if defined(__x86_64)
+#define START_FILES pre-crt0.o /usr/lib64/crt1.o /usr/lib64/crti.o
+#else
 #define START_FILES pre-crt0.o /usr/lib/crt1.o /usr/lib/crti.o
 #endif
+#endif
 
 #ifdef __ELF__
 /* Here is how to find X Windows.  LD_SWITCH_X_SITE_AUX gives an -R option
@@ -225,8 +229,12 @@
 #else
 #undef LIB_GCC
 #define LIB_GCC
+#if defined(__x86_64)
+#define LIB_STANDARD -lgcc -lc -lgcc /usr/lib64/crtn.o
+#else
 #define LIB_STANDARD -lgcc -lc -lgcc /usr/lib/crtn.o
 #endif
+#endif
 
 /* Don't use -g in test compiles in configure.
    This is so we will use the same shared libs for that linking
