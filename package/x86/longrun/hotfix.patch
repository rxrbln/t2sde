# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../longrun/hotfix.patch
# Copyright (C) 2011 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

pread(64) is not a supported ioctl of current cpuid and msr drivers, ...

  - Rene Rene <rene@exactcode.de>

--- longrun/longrun.c	2001-02-14 11:51:44.000000000 +0100
+++ longrun-fixed//longrun.c	2011-01-13 18:14:41.000000000 +0100
@@ -18,9 +18,10 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  */
 
-#define VERSION "0.9"
-#define REVDATE "2001-02-14"
+#define VERSION "0.9-t2sde"
+#define REVDATE "2011-01-11"
 
+#define _LARGEFILE64_SOURCE
 #include <ctype.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -139,11 +140,12 @@
 }
 
 /* note: if an output is NULL, then don't set it */
-void read_msr(long address, int *lower, int *upper)
+void read_msr(unsigned long address, int *lower, int *upper)
 {
 	uint32_t data[2];
 
-	if (pread(msr_fd, &data, 8, address) != 8) {
+	if (lseek64(msr_fd, (off64_t)address, SEEK_SET) == -1 ||
+	    read(msr_fd, data, sizeof(data)) != sizeof(data)) {
 		error_die("error reading %s", msr_device);
 	}
 
@@ -151,24 +153,26 @@
 	if (upper) *upper = data[1];
 }
 
-void write_msr(long address, int lower, int upper)
+void write_msr(unsigned long address, int lower, int upper)
 {
 	uint32_t data[2];
 
 	data[0] = (uint32_t) lower;
 	data[1] = (uint32_t) upper;
 
-	if (pwrite(msr_fd, &data, 8, address) != 8) {
+	if (lseek64(msr_fd, (off64_t)address, SEEK_SET) == -1 ||
+	    write(msr_fd, &data, sizeof(data)) != sizeof(data)) {
 		error_die("error writing %s", msr_device);
 	}
 }
 
 /* note: if an output is NULL, then don't set it */
-void read_cpuid(long address, int *eax, int *ebx, int *ecx, int *edx)
+void read_cpuid(unsigned long address, int *eax, int *ebx, int *ecx, int *edx)
 {
 	uint32_t data[4];
 
-	if (pread(cpuid_fd, &data, 16, address) != 16) {
+	if (lseek64(cpuid_fd, (off64_t)address, SEEK_SET) == -1 ||
+	    read(cpuid_fd, data, sizeof(data)) != sizeof(data)) {
 		error_die("error reading %s", cpuid_device);
 	}
 
