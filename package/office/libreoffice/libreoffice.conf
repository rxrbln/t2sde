# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../go-openoffice-org/go-openoffice-org.conf
# Copyright (C) 2004 - 2016 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. A copy of the
# GNU General Public License can be found in the file COPYING.
# --- T2-COPYRIGHT-NOTE-END ---

if [ $prefix_auto = 1 ]; then
	prefix=/opt/openoffice.org
	set_confopt
fi

ooo_lang='en-US de es fr it' #ALL

############################################################################
# ooo-build configuration options

var_append confopt ' ' '--with-binsuffix=no' # just one OpenOffice for now
var_append confopt ' ' '--with-installed-ooo-dirname=openoffice.org'
var_append confopt ' ' "--with-docdir=$docdir"

var_append confopt ' ' '--disable-post-install-scripts'
var_append confopt ' ' '--disable-binfilter'
# requires some prebuilt .dll or mingw around - for windows registry mangling
var_append confopt ' ' '--disable-odk'

# src680-mXX
cvstag=$( match_source_file -core.tar )
var_append confopt ' ' "--with-tag=${cvstag%-core.tar*}"

# populate src/ with every [D] on our .desc
# (instead of --with-srcdir)
#
ooo_populate_src() {
	for i in `match_source_file -p -n .`; do
	  case "$i" in
		*gz)
			trg=`basename $i`
			$compressor -d ${i/.gz/.bz2} | gzip --fast > src/$trg
			;;
		*)
			ln -svf $i src/
			;;
	  esac
	done
}
hook_add prepatch 5 'ooo_populate_src'

# instead of --with-internal-gcc
var_append confopt ' ' "--with-system-gcc"

# yes, we are ourselves
dist=T2
[ $arch_sizeof_char_p = 8 ] && dist=${dist}64
var_append confopt ' ' "--with-distro=$dist" 
var_append confopt ' ' "--with-vendor=$dist"

# UI language
var_append confopt ' ' "'--with-lang=\"\$ooo_lang\"'"
var_append confopt ' ' "'--with-dict=\"\$ooo_lang\"'"

# Widgets and Icons
#
ooo_iconset=

# GNOME support
if pkginstalled gtk+; then
	var_append confopt ' ' "--enable-gtk"
	if pkginstalled libbonobo; then
		var_append confopt ' ' "--with-bonobo"
	fi
	[ "$SDECFG_PKG_OOO_ICONS_GNOME" = "1" ] &&
		var_append ooo_iconset ',' "gnome"
else
	var_append confopt ' ' "--disable-gtk"
fi

# kde support requires kde3
# KDE support
#if pkginstalled arts; then
#	# [ "$SDECFG_PKG_OOO_WIDGETS" = "kde" ]
#	var_append confopt ' ' "--enable-kde"
#	[ "$SDECFG_PKG_OOO_ICONS_KDE" = "1" ] &&
#		var_append ooo_iconset ',' "kde"
#
#	export QTLIB=$QTDIR/lib
#else
	var_append confopt ' ' "--disable-kde"
#fi

if ! pkginstalled gnome-vfs; then
	var_append confopt ' ' '--disable-gnome-vfs'
fi

if pkginstalled openldap; then
	var_append GCC_WRAPPER_APPEND ' ' "-I`pkgprefix includedir openldap`"
	var_append GCC_WRAPPER_APPEND ' ' "-L`pkgprefix libdir openldap`"
else
	var_append confopt ' ' '--disable-ldap'
fi

# disable cairo support, for now
var_append confopt ' ' "--enable-cairo=no"
# disable mdb/access support, for now
var_append confopt ' ' "--enable-access=no"
# disable mono support, for now
var_append confopt ' ' "--enable-mono=no"

#FIXME: download location [ "$SDECFG_PKG_OOO_ICONS_BLUECURVE" = "1" ] && var_append ooo_iconset ',' "Bluecurve"
[ -n "$ooo_iconset" ] && var_append confopt ' ' "--with-icons=$ooo_iconset"

# Architecture
cpu="`echo $arch | arch2uname`"
var_append confopt ' ' "--with-arch=$cpu"

# custom handling of parallel builds
var_remove_regex makeopt ' ' '-j.*'

# some steps of the build are a serious memory hog, so don't parallelize this build
#if [ "$SDECFG_PARALLEL_MAX" ] && [ $SDECFG_PARALLEL_MAX -gt 1 ]; then
#	var_append makeopt ' ' "MAXPROCESS='$SDECFG_PARALLEL_MAX'"
#fi

hook_add preconf 5 'ooo_preconfigure'
ooo_preconfigure() {
	# no Common* configs to inherit, we have our own, dynamic config flow
	echo -n > distro-configs/Common.conf.in
	echo -n > distro-configs/CommonLinux.conf.in

	# fixed config, as much as possible from the system to minimize
	# build time, private downloads and fine-grained updates
	cat <<-EOT > distro-configs/T2.conf
	--without-gpc
	--enable-crashdump=no
	--disable-crashdump
	--disable-binfilter
	--disable-epm

	--with-system-gcc
	--with-system-zlib
	--with-system-freetype
	--with-system-expat
	--with-system-neon
	--with-system-curl
	--with-system-jpeg
	--with-system-libxml
	--with-system-python
	--with-system-libwpd

	--with-system-db
	--with-db-version=4.3

	--enable-fontconfig
	--without-myspell-dicts
	--without-fonts

	EOT

	# conditional config
	#
	{
	#neither does build right now, ...
	#if pkginstalled firefox; then
	#	echo -e "--with-system-mozilla\n--with-firefox"
	#elif pkginstalled seamonkey; then
	#	# xmlsec does not find the nspr ?
	#	echo -e "--with-system-mozilla\n--with-seamonkey"
	#fi
	echo "--disable-mozilla"

	# build fails otherwise
	echo "--enable-vba --with-vba-package-format=builtin"

	#did not built the last time
	#pkginstalled agg &&
	#	echo "--with-system-agg"

	pkginstalled boost &&
		echo "--with-system-boost"

	pkginstalled startup-notification &&
		echo "--enable-libsn"

	pkginstalled libsndfile &&
		echo "--with-system-sndfile"

	if pkginstalled nas; then
	       	echo "--with-system-nas"
		export LDFLAGS=-L`pkgprefix libdir libx11`
		export CFLAGS=-I/usr/X11/include
		export CPPFLAGS=-I/usr/X11/include
	else
		echo "--without-nas"
	fi

	if [[ $libdir == *lib64 ]]; then
		echo "--enable-64bit-libs=yes"
	fi

	# Java support
	#
	#if [ "$JAVA_HOME" ] && pkginstalled apache-ant; then
	#	echo "--with-java=java"
	#	echo "--with-jdk-home=$root$JAVA_HOME"
	#	echo "--with-ant-home=$root/$( pkgprefix apache-ant )"
	#	echo "--with-db-jar=$root$( pkgprefix libdir java-dirtree )/libdb_java-4.3.jar"
	#else
		echo "--with-java=no"
	#fi
	} >> distro-configs/T2.conf

	cp distro-configs/T2{,64}.conf
}
