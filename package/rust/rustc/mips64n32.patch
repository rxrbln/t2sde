# --- T2-COPYRIGHT-BEGIN ---
# t2/package/*/rustc/mips64n32.patch
# Copyright (C) 2022 - 2025 The T2 SDE Project
# SPDX-License-Identifier: GPL-2.0 or patched project license
# --- T2-COPYRIGHT-END ---

--- rustc-1.87.0-src/compiler/rustc_target/src/spec/targets/mips64_unknown_linux_gnuabin32.rs.vanilla	2025-05-15 21:24:50.054202548 +0200
+++ rustc-1.87.0-src/compiler/rustc_target/src/spec/targets/mips64_unknown_linux_gnuabin32.rs	2025-05-15 21:26:18.751541656 +0200
@@ -4,27 +4,27 @@
 
 pub(crate) fn target() -> Target {
     Target {
-        llvm_target: "mips64-unknown-linux-gnuabi64".into(),
+        llvm_target: "mips64-unknown-linux-gnuabin32".into(),
         metadata: TargetMetadata {
-            description: Some("MIPS64 Linux, N64 ABI (kernel 4.4, glibc 2.23)".into()),
+            description: Some("MIPS64 Linux, N32 ABI (kernel 4.4, glibc 2.23)".into()),
             tier: Some(3),
             host_tools: Some(true),
             std: Some(true),
         },
-        pointer_width: 64,
-        data_layout: "E-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128".into(),
-        arch: "mips64".into(),
+        pointer_width: 32,
+        data_layout: "E-m:e-p:32:32-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128".into(),
+        arch: "mips".into(),
         options: TargetOptions {
-            abi: "abi64".into(),
+            abi: "gnuabin32".into(),
             endian: Endian::Big,
             // NOTE(mips64r2) matches C toolchain
-            cpu: "mips64r2".into(),
-            features: "+mips64r2,+xgot".into(),
+            cpu: "mips4".into(),
+            //features: "+xgot".into(),
             max_atomic_width: Some(64),
             mcount: "_mcount".into(),
-            llvm_abiname: "n64".into(),
+            llvm_abiname: "n32".into(),
 
             ..base::linux_gnu::opts()
         },
