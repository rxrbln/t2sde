# --- T2-COPYRIGHT-BEGIN ---
# t2/package/*/rustc/hotfix-abi.patch.powerpc64.elfv2
# Copyright (C) 2024 - 2025 The T2 SDE Project
# SPDX-License-Identifier: GPL-2.0 or patched project license
# --- T2-COPYRIGHT-END ---

--- rustc-1.84.0-src/compiler/rustc_target/src/callconv/powerpc64.rs	2024-02-20 12:22:13.165372817 +0100
+++ rustc-1.84.0-src/compiler/rustc_target/src/callconv/powerpc64.rs	2024-02-20 12:23:04.119367907 +0100
@@ -131,7 +131,7 @@
         ELFv2
     } else {
         match cx.data_layout().endian {
-            Endian::Big => ELFv1,
+            Endian::Big => ELFv2,
             Endian::Little => ELFv2,
         }
     };
--- rustc-1.90.0-src/compiler/rustc_target/src/spec/targets/powerpc64_unknown_linux_gnu.rs.vanilla	2025-09-19 23:59:21.261497046 +0200
+++ rustc-1.90.0-src/compiler/rustc_target/src/spec/targets/powerpc64_unknown_linux_gnu.rs	2025-09-19 23:59:40.402590504 +0200
@@ -11,7 +11,7 @@
     base.max_atomic_width = Some(64);
     base.stack_probes = StackProbeType::Inline;
     base.abi = "elfv1".into();
-    base.llvm_abiname = "elfv1".into();
+    base.llvm_abiname = "elfv2".into();
 
     Target {
         llvm_target: "powerpc64-unknown-linux-gnu".into(),
@@ -22,7 +22,7 @@
             std: Some(true),
         },
         pointer_width: 64,
-        data_layout: "E-m:e-Fi64-i64:64-i128:128-n32:64-S128-v256:256:256-v512:512:512".into(),
+        data_layout: "E-m:e-Fn32-i64:64-i128:128-n32:64-S128-v256:256:256-v512:512:512".into(),
         arch: "powerpc64".into(),
         options: TargetOptions { endian: Endian::Big, mcount: "_mcount".into(), ..base },
     }

