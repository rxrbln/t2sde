
Hm. I find the resulting output a bit unlogic - but it is exactly the same
with the old options and an old sort. So this "chaotic" sort might have
been intended - or always been buggy ...

Also fixed the trap usage.

  - Rene Rebe <rene@rocklinux.org>

--- pdksh-5.2.14/siglist.sh.orig	1996-09-18 18:52:41.000000000 +0200
+++ pdksh-5.2.14/siglist.sh	2004-05-05 02:41:53.000000000 +0200
@@ -11,19 +11,19 @@
 out=tmpo$$.c
 ecode=1
 trapsigs='0 1 2 13 15'
-trap 'rm -f $in $out; trap 0; exit $ecode' $trapsigs
+trap 'rm -f $in $out; trap - 0; exit $ecode' $trapsigs
 
 CPP="${1-cc -E}"
 
 # The trap here to make up for a bug in bash (1.14.3(1)) that calls the trap
-(trap $trapsigs;
+(trap - $trapsigs;
  echo '#include "sh.h"';
  echo '	{ QwErTy SIGNALS , "DUMMY" , "hook for number of signals" },';
  sed -e '/^[	 ]*#/d' -e 's/^[	 ]*\([^ 	][^ 	]*\)[	 ][	 ]*\(.*[^ 	]\)[ 	]*$/#ifdef SIG\1\
 	{ QwErTy SIG\1 , "\1", "\2" },\
 #endif/') > $in
 $CPP $in  > $out
-sed -n 's/{ QwErTy/{/p' < $out | awk '{print NR, $0}' | sort +2n +0n |
+sed -n 's/{ QwErTy/{/p' < $out | awk '{print NR, $0}' | sort -n -k 2 |
     sed 's/^[0-9]* //' |
     awk 'BEGIN { last=0; nsigs=0; }
 	{
