# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/gcc/gcc.conf
# Copyright (C) 2004 - 2021 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2.
# --- T2-COPYRIGHT-NOTE-END ---

# historically we did not had to explicitly specifiy the target for "Canadian
# crossbuild", since gcc-4.3 we have to:
var_append confopt ' ' "--target=${arch_target}"

# not relied on by T2, but for the actual system user to get the same
case "$arch" in
  avr32) ;;
  blackfin) ;;
  ia64) ;;
  *)
  for x in $GCC_WRAPPER_INSERT $GCC_WRAPPER_APPEND; do
    case "$x" in
	-march=*)	var_append confopt " " "${x/-m/--with-}" ;;
	-mcpu=*)	var_append confopt " " "${x/-m/--with-}" ;;
	-mtune=*)	var_append confopt " " "${x/-m/--with-}" ;;
    esac
  done
esac

# at least the fortran parts get unresolved errors when we remove -Werror???
var_remove GCC_WRAPPER_REMOVE " " "-Werror"
var_append CXX_WRAPPER_APPEND " " "-Wno-narrowing"

# create and set up cmd_wrapper for xgcc
function setup_xgcc_wrapper() {
	mkdir gcc; pushd gcc

	cat <<-EOF > xgcc-wrapper
#!/bin/bash
# place the xgcc in the path
export PATH="$PWD:\$PATH"
[ "\$GCC_WRAPPER_DEBUG" = 1 ] && export CMD_WRAPPER_DEBUG=1
mycmd=\$1
if [ "\${mycmd%gcj}" != "\$mycmd" ]; then
  export CMD_WRAPPER_OTHERS="\$GCJ_WRAPPER_OTHERS"
  export CMD_WRAPPER_INSERT="\$GCJ_WRAPPER_INSERT"
  export CMD_WRAPPER_REMOVE="\$GCJ_WRAPPER_REMOVE"
  export CMD_WRAPPER_APPEND="\$GCJ_WRAPPER_APPEND"
  export CMD_WRAPPER_FILTER="\$GCJ_WRAPPER_FILTER"
elif [ "\${mycmd%gfortran}" != "\$mycmd" ]; then
  export CMD_WRAPPER_OTHERS="\$F95_WRAPPER_OTHERS"
  export CMD_WRAPPER_INSERT="\$F95_WRAPPER_INSERT"
  export CMD_WRAPPER_REMOVE="\$F95_WRAPPER_REMOVE"
  export CMD_WRAPPER_APPEND="\$F95_WRAPPER_APPEND"
  export CMD_WRAPPER_FILTER="\$F95_WRAPPER_FILTER"
elif [ "\${mycmd%g++}" != "\$mycmd" ]; then
  export CMD_WRAPPER_OTHERS="\$CXX_WRAPPER_OTHERS:\$GCC_WRAPPER_OTHERS"
  export CMD_WRAPPER_INSERT="\$CXX_WRAPPER_INSERT \$GCC_WRAPPER_INSERT"
  export CMD_WRAPPER_REMOVE="\$CXX_WRAPPER_REMOVE \$GCC_WRAPPER_REMOVE"
  export CMD_WRAPPER_APPEND="\$CXX_WRAPPER_APPEND \$GCC_WRAPPER_APPEND"
  export CMD_WRAPPER_FILTER="\$CXX_WRAPPER_FILTER|\$GCC_WRAPPER_FILTER"
else
  export CMD_WRAPPER_OTHERS="\$CC_WRAPPER_OTHERS:\$GCC_WRAPPER_OTHERS"
  export CMD_WRAPPER_INSERT="\$CC_WRAPPER_INSERT \$GCC_WRAPPER_INSERT"
  export CMD_WRAPPER_REMOVE="\$CC_WRAPPER_REMOVE \$GCC_WRAPPER_REMOVE"
  export CMD_WRAPPER_APPEND="\$CC_WRAPPER_APPEND \$GCC_WRAPPER_APPEND"
  export CMD_WRAPPER_FILTER="\$CC_WRAPPER_FILTER|\$GCC_WRAPPER_FILTER"
fi
exec cmd_wrapper "\$@"
EOF

	chmod 0755 xgcc-wrapper
	export STAGE_CC_WRAPPER=$PWD/xgcc-wrapper

	popd
}

languages="c,c++"

# See http://gcc.gnu.org/gcc-3.2/c++-abi.html
# and http://www.codesourcery.com/cxx-abi/.
var_append confopt ' ' "--enable-__cxa_atexit"

# we might build a SVN or prereleases, disable checking
var_append confopt ' ' '--disable-checking'

# we build a cross compiler in stage0 and later use known good GCCs, no bstrap
var_append confopt ' ' '--disable-bootstrap'

# not really useful and just blow up the binary package
var_append confopt ' ' '--disable-libstdcxx-pch'

# add the multi-lib config
if [ "$SDECFG_MULTILIB" = 1 ]; then
	# JLR, this sometimes causes trouble
	# it is on by default, so do not enable it here
	# see GCC Bug 43328 - multilib bootstrap broken.
	# var_append confopt ' ' "--enable-multilib"
	if [ -n "$SDECFG_MULTILIBLIST" ]; then
		var_append confopt ' ' "--with-multilib-list=$SDECFG_MULTILIBLIST"
	fi
else
	var_append confopt ' ' "--disable-multilib"
fi

if [ "${ver:0:3}" = "3.4" -o "${ver:0:1}" = "4" ]; then
	gcc_lib_dir="gcc/${arch_target}/${ver%%-*}"
else
	gcc_lib_dir="gcc-lib/${arch_target}/${ver%%-*}"
fi

if atstage toolchain; then
	bindir="/$prefix/crosscc"
	var_append confopt " " "--with-sysroot=$sysroot"
	var_append confopt " " "--program-prefix=${arch_target}-"
	var_append confopt " " "--disable-shared"
	var_append confopt " " "--disable-libatomic --disable-libstdc++-v3 --disable-libssp --disable-libgomp"
	var_append confopt " " "--disable-target-libiberty --disable-vtable-verify"

	# we need to help configure pick up our native libraries in the toolchain dir
	var_append extraconfopt ' ' '--with-mpfr=$root --with-mpfr-lib=$root/$libdir'
	var_append extraconfopt ' ' '--with-ppl=$root --with-cloog=$root --with-gmp=$root'
	pkginstalled isl && var_append extraconfopt ' ' '--with-isl=$root'
	export LDFLAGS="-Wl,-rpath,${root}${libdir}"
else
	confopt="${confopt/--with-sysroot/--with-libtool-sysroot}"

	# shared, or not shared?
	if [ "$diet_dynamic_static" == "static" ]; then
		var_append confopt " " "--disable-shared"
	else
		var_append confopt " " "--enable-shared"
	fi
fi

if [ "$SDECFG_LTO" == 1 ]; then
	var_append SYSGCC_WRAPPER_INSERT " " "*/gcc/*.c*?-flto=${SDECFG_PARALLEL_MAX:-auto}"
	var_append GCC_WRAPPER_INSERT " " "*/gcc/*.c*?-flto=${SDECFG_PARALLEL_MAX:-auto}"
fi

gcc_build_module() {
    for x; do
	export ac_cv_header_fenv_h=no
	mkdir x-$x; cd x-$x
	configscript="../../$x/configure"
	eval_config_command $confopt
	eval $MAKE $makeopt
	eval $MAKE $makeinstopt
	cd ..
	unset ac_cv_header_fenv_h
	configscript=../configure
    done
}

if atstage cross; then
	var_append confopt ' ' '--disable-cet'

	# canadian cross also needs to know the build root to find headers, e.g. for fixincludes
	var_append confopt ' ' '--with-build-sysroot=$root'

	[ "$SDECFG_KERNEL" = mingw ] &&
		configscript="../libstdc++-v3/configure" ||
		hook_add preconf 7 "gcc_build_module libstdc++-v3"
fi

if ! atstage native; then
	var_append confopt " " "--disable-libmudflap --disable-libsanitizer"
	var_append confopt " " "--disable-libquadmath --disable-decimal-float --disable-libitm --disable-libcilkrts"
fi

# later, if we support multiple GCC again, pass this to the non-default ones:
# var_append confopt " " "--enable-version-specific-runtime-libs"

if atstage native; then
	var_append languages ',' "objc,go"
	var_append confopt " " "--with-gnu-as --with-gnu-ld --enable-threads=posix"
fi

gcc_premake() {
	# create and set up the xgcc cmd_wrapper
	setup_xgcc_wrapper

	if atstage toolchain; then
		mkdir -p $root/$prefix/$arch_target/{bin,lib}
		rm -fv $root/$prefix/$arch_target/include
		if [ -f $root/$prefix/include/stdio.h ]; then
			ln -s ../include $root/$prefix/$arch_target/include
		elif [ -f $root/$prefix/diet-include/stdio.h ]; then
			ln -s ../diet-include $root/$prefix/$arch_target/include
		fi

		ln -sfv ../../../libexec/gcc/$arch_target/$desc_V/liblto_plugin.so \
			$root/$arch_target/lib/bfd-plugins/
	fi

	ln -sfv ../../libexec/gcc/$arch_target/$desc_V/liblto_plugin.so $root$libdir/bfd-plugins/

	if atstage cross; then
		# pre-build and install required libgcc and libstdc++
		#eval $MAKE $makeopt all-host

		eval $MAKE $makeopt all-host maybe-all-target-libgcc
		eval $MAKE ${makeinstopt// install/} maybe-install-target-libgcc

		#eval $MAKE $makeopt maybe-configure-target-libstdc++-v3
		#eval $MAKE ${makeinstopt// install/} maybe-install-target-libstdc++-v3
	fi
}

gcc_postmake() {
	# force a tools rebuild
	rm -fv $base/build/$SDECFG_ID/TOOLCHAIN/$toolsdir/.lastupdate

	# only minimal adaptions for stage0
	if atstage toolchain; then
		for x in gcc-${ver:0:1} kcc{,-${ver:0:1}} cc; do
			ln -svf ${arch_target}-gcc \
				$root/$prefix/crosscc/${arch_target}-$x
		done

		ln -svf ${arch_target}-gcc $root/$prefix/crosscc/${arch_target}-cc
		rm -vf "$root/$prefix/crosscc/{gcc,gcj}"

		return
	fi

	# Create various symlinks for cc, c++, cpp and f77.
	#
	rm -f $root/$prefix/bin/cc
	ln -sfv gcc $root/$prefix/bin/cc
	ln -sfv ../$prefix/bin/cpp $root/lib/cpp
	ln -sfv gcc $root/$prefix/bin/kcc
	if [ -f $root/$prefix/bin/gfortran ]; then
		rm -fv $root/$prefix/bin/f77
		ln -sfv gfortran $root/$prefix/bin/f77
	fi
}

if [ "$SDECFG_LIBC" != "glibc" ]; then
	var_append confopt " " "--disable-libsanitizer"
	var_remove languages ',' "go"
fi

var_insert confopt ' ' '--enable-languages=$languages'
[[ "$languages" = *go* ]] && var_append GCC_WRAPPER_APPEND " " "-Wno-maybe-uninitialized"

hook_add premake  5 "gcc_premake"
hook_add postmake 5 "gcc_postmake"
