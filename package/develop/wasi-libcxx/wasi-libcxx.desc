[COPY] --- T2-COPYRIGHT-BEGIN ---
[COPY] t2/package/*/wasi-libcxx/wasi-libcxx.desc
[COPY] Copyright (C) 2008 - 2025 The T2 SDE Project
[COPY] SPDX-License-Identifier: GPL-2.0
[COPY] --- T2-COPYRIGHT-END ---

[I] C++ Standard Library

[T] libc++ is an implementation of the C++ standard library, targeting C++11,
[T] C++14 and above.

[U] https://libcxx.llvm.org

[A] University of Illinois/NCSA
[A] Chris Lattner <clattner@apple.com>
[M] Rene Rebe <rene@t2-project.org>

[C] extra/development
[F] CROSS
[R] - alpha

[L] BSD MIT
[S] Stable
[V] 21.1.4
[P] X -----5---9 152.700

[CV-GROUP] llvmorg
[D] 426529e72f685a0761ffeae1d3ce46356f329459af0ec4d4277aea98 libcxx-21.1.4.src.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.4/
[D] 9ea11d947babf6e6199329c2c8c4e2a71d7dc4c7f0f2f3b71dec84d2 libcxxabi-21.1.4.src.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.4/
[D] 440bae796dbee20f856dd3ae92f1e203c2c59d9c24b188f6aae1fa2b llvm-cmake-21.1.4.src.tar.xz !https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.4/cmake-21.1.4.src.tar.xz
[D] 07dcc23bfeff8b08ddadebe95855d36266416eecaf20a27cc4483515 llvm-runtimes-21.1.4.src.tar.xz !https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.4/runtimes-21.1.4.src.tar.xz

# TODO: sync w/ wasi-libc
[ $prefix_auto = 1 ] && prefix=opt/wasi && set_confopt

runmake=0

prepare_sources() {
	cd ..
	tar $taropt `match_source_file -p cxxabi`
	tar $taropt `match_source_file -p llvm-cmake`
	tar $taropt `match_source_file -p runtimes`
	for f in libcxx{,abi} cmake; do
		ln -sfv $f-* $f
	done

	ln -srv runtimes-*/cmake/Modules/*.cmake cmake/Modules/
}
hook_add prepatch 5 prepare_sources

. $base/package/*/*/wasi.in

export CC=clang CXX=clang++ # LD=clang
export CFLAGS="-fno-exceptions --sysroot=$root/$prefix"
export CXXFLAGS="-fno-exceptions --sysroot=$root/$prefix -I$builddir/libcxxabi/include -I$builddir/objs/include/c++/v1/"
export DESTDIR=$root

cmakeopt=
var_append cmakeopt ' ' "-DUNIX=ON \
-DCMAKE_TOOLCHAIN_FILE=$confdir/../wasi-libc/wasi-sdk.cmake \
-DCMAKE_C_COMPILER_WORKS=ON -DCMAKE_CXX_COMPILER_WORKS=ON \
-DCMAKE_STAGING_PREFIX=/opt/wasi"

var_append cmakeopt ' ' "-DLIBCXX_ABI_VERSION=2 \
-DLIBCXX_BUILD_EXTERNAL_THREAD_LIBRARY=OFF \
-DLIBCXX_CXX_ABI=libcxxabi \
-DLIBCXX_CXX_ABI_INCLUDE_PATHS=libcxxabi/include \
-DLIBCXX_ENABLE_EXCEPTIONS=OFF \
-DLIBCXX_ENABLE_EXPERIMENTAL_LIBRARY=OFF \
-DLIBCXX_ENABLE_FILESYSTEM=OFF \
-DLIBCXX_ENABLE_SHARED=OFF \
-DLIBCXX_ENABLE_THREADS=OFF \
-DLIBCXX_USE_COMPILER_RT=YES \
-DLIBCXX_HAS_EXTERNAL_THREAD_API=OFF \
-DLIBCXX_HAS_MUSL_LIBC=ON \
-DLIBCXX_HAS_PTHREAD_API=OFF \
-DLIBCXX_HAS_WIN32_THREAD_API=OFF \
-DLIBCXX_INCLUDE_BENCHMARKS=OFF \
-DLIBCXX_LIBDIR_SUFFIX=/wasm32-wasi \
-DLIBCXX_STANDALONE_BUILD=ON"

var_append cmakeopt ' ' "-DLIBCXXABI_BUILD_EXTERNAL_THREAD_LIBRARY=OFF \
-DLIBCXXABI_ENABLE_EXCEPTIONS=OFF \
-DLIBCXXABI_ENABLE_PIC=OFF \
-DLIBCXXABI_ENABLE_SHARED=OFF \
-DLIBCXXABI_ENABLE_THREADS=OFF \
-DLIBCXXABI_USE_LLVM_UNWINDER=OFF \
-DLIBCXXABI_HAS_EXTERNAL_THREAD_API=OFF \
-DLIBCXXABI_HAS_PTHREAD_API=OFF \
-DLIBCXXABI_HAS_WIN32_THREAD_API=OFF \
-DLIBCXXABI_LIBCXX_INCLUDES=libcxxabi/include/c++/v1 \
-DLIBCXXABI_LIBCXX_PATH=libcxx \
-DLIBCXXABI_LIBDIR_SUFFIX=/wasm32-wasi \
-DLIBCXXABI_INCLUDE_TESTS=OFF \
-DLIBCXXABI_SILENT_TERMINATE:BOOL=ON \
-DLIBCXXABI_STANDALONE_BUILD=ON"

build_libcxx() {
	eval cmake -B objs $cmakeopt libcxx
	cmake --build objs

	eval cmake -B objs-abi $cmakeopt libcxxabi
	cmake --build objs-abi

	cmake --install objs
	cmake --install objs-abi
}
hook_add inmake 5 build_libcxx
