[COPY] --- T2-COPYRIGHT-BEGIN ---
[COPY] t2/package/*/clang/clang.desc
[COPY] Copyright (C) 2008 - 2025 The T2 SDE Project
[COPY] SPDX-License-Identifier: GPL-2.0
[COPY] --- T2-COPYRIGHT-END ---

[I] C language family frontend for LLVM

[T] The Clang project provides a language front-end and tooling infrastructure
[T] for languages in the C language family (C, C++, Objective C/C++, OpenCL,
[T] CUDA, and RenderScript) for the LLVM project. 

[U] https://clang.llvm.org/

[A] University of Illinois/NCSA
[A] Chris Lattner <clattner@apple.com>
[M] Rene Rebe <rene@t2-project.org>

[C] base/system
[F] OBJDIR CROSS CC CXX KCC NO-LTO.gcc LATOMIC.arch32
# sparc(32) (Threading.cpp.o): undefined reference to symbol 'pthread_create@@GLIBC_2.1'
[R] - alpha arc avr32 blackfin cris ia64 m68k microblaze nios2 openrisc

[L] BSD
[S] Stable
[V] 21.1.1
[P] X 01---5---9 105.000

[CV-GROUP] llvmorg
[D] e2dd41ad640dd3082a18a07824d41962f913a6110e53f4a9e41f5c07 clang-21.1.1.src.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.1/
[D] 9cf7acab021c94c2de0d72e9d20d8cf8ede87287531e4fbb8ef355d9 clang-tools-extra-21.1.1.src.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.1/
[D] 54511b601c65de2e8231ac05573a35ca4de0c2c7ad8c424d1fd614af llvm-cmake-21.1.1.src.tar.xz !https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.1/cmake-21.1.1.src.tar.xz

#var_append cmakeopt -DPACKAGE_VENDOR=T2SDE
#var_append cmakeopt -DCLANG_VENDOR=T2SDE

cmake_mod() {
	tar $taropt `match_source_file -p cmake`
	mv -vf cmake-*src ../cmake
}
hook_add prepatch 5 cmake_mod

extra_tools() {
	tar $taropt `match_source_file -p extra`
	ln -s clang-tools-extra{-*,}
}
hook_add prepatch 5 extra_tools

[ $arch = powerpc -o "$SDECFG_POWERPC64_32" = 1 ] &&
	var_append patchfiles ' ' $confdir/no-clang-tidy.diff

# currently clang uses the default target from llvm
#var_append cmakeopt ' ' -DCLANG_DEFAULT_TARGET_TRIPLE=$arch_target

[ $SDECFG_DEFAULT_CC = 'clang' ] && ! pkginstalled gcc &&
	var_append cmakeopt ' ' \
	"-DCLANG_DEFAULT_CXX_STDLIB=libc++ \
	-DCLANG_DEFAULT_RTLIB=compiler-rt \
	-DCLANG_DEFAULT_UNWINDLIB=libunwind"

clang_postmake() {
	# force a tools rebuild
	rm -fv $base/build/$SDECFG_ID/TOOLCHAIN/$toolsdir/.lastupdate

	# create various symlinks for cc, c++, cpp and f77
	if atstage toolchain; then
		# TODO: or probably better program name transform?
		ln -sfv clang $root/$prefix/bin/${arch_target}-clang
		ln -sfv clang++ $root/$prefix/bin/${arch_target}-clang++

		for x in $([ "$SDECFG_DEFAULT_CC" = clang ] && echo cc
			[ "$SDECFG_DEFAULT_CXX" = clang ] && echo c++
			[ "$SDECFG_DEFAULT_KCC" = clang ] && echo kcc); do
			[ $x != c++ ] &&
				ln -svf ${arch_target}-clang $root/$prefix/bin/${arch_target}-$x ||
				ln -svf ${arch_target}-clang++ $root/$prefix/bin/${arch_target}-$x
		done

		# install some internal helper tools for cross bootstrap
		[ -e bin/clang-tidy-confusable-chars-gen ] &&
			install bin/clang-tidy-confusable-chars-gen $root$bindir/
		install bin/clang-tblgen $root$bindir/

		return
	fi

	# TODO: cpp?
	for x in $([ "$SDECFG_DEFAULT_CC" = clang ] && echo cc
		[ "$SDECFG_DEFAULT_CXX" = clang ] && echo c++
		[ "$SDECFG_DEFAULT_KCC" = clang ] && echo kcc); do
		[ $x != c++ ] && ln -svf clang $root/$prefix/bin/$x || ln -svf clang++ $root/$prefix/bin/$x
	done
}
hook_add postmake 5 "clang_postmake"

if atstage toolchain; then
	var_append cmakeopt ' ' -DDEFAULT_SYSROOT=$sysroot
elif atstage cross; then
	var_append cmakeopt ' ' -DCLANG_TABLEGEN=$root/TOOLCHAIN/$toolsdir/bin/clang-tblgen
	var_append cmakeopt ' ' -DCLANG_TIDY_CONFUSABLE_CHARS_GEN=$root/TOOLCHAIN/$toolsdir/bin/clang-tidy-confusable-chars-gen
	var_append cmakeopt ' ' -DCLANG_PSEUDO_GEN=$root/TOOLCHAIN/$toolsdir/bin/clang-pseudo-gen

	var_append cmakeopt ' ' -DLLVM_MAIN_INCLUDE_DIR=$root$includedir
	#var_append cmakeopt ' ' -DLLVM_LIBRARY_DIR=$root$libdir
	var_append GCC_WRAPPER_REMOVE ' ' -L$sysroot/TOOLCHAIN/cross/lib
	var_append GCC_WRAPPER_FILTER '|' "sed 's,$root/TOOLCHAIN.*libLLVM\(.*\)\.[as].*,-lLLVM\1,g'"
	var_append GCC_WRAPPER_FILTER '|' "sed 's,^/lib64/libcurses.so,-lcurses,'"
	var_append GCC_WRAPPER_FILTER '|' "sed 's,$root/lib64/libcurses.so,-lcurses,'"
fi

# rencent clang uses llvm-config suffix, but we need it for cross builds anyway
[ "${libdir##*/lib}" ] && var_append cmakeopt ' ' "-DLLVM_LIBDIR_SUFFIX=${libdir##*/lib}"
var_append cmakeopt ' ' "-DLIBCLANG_BUILD_STATIC=OFF -DBUILD_SHARED_LIBS=ON -DLLVM_INCLUDE_TESTS=OFF"
