diff -ur STLport-4.6.2/src/num_get_float.cpp STLport-4.6.2-t2/src/num_get_float.cpp
--- STLport-4.6.2/src/num_get_float.cpp	2003-11-02 09:58:50.000000000 +0100
+++ STLport-4.6.2-t2/src/num_get_float.cpp	2004-10-27 17:30:51.935657320 +0200
@@ -770,18 +770,18 @@
 
 void  _STLP_CALL
 __string_to_float(const string& v, float& val) {
-    val = _Stl_string_to_double(v.data());
+    val = _Stl_string_to_double(v.c_str());
 }
 
 void  _STLP_CALL
 __string_to_float(const string& v, double& val) {
-    val = _Stl_string_to_double(v.data());
+    val = _Stl_string_to_double(v.c_str());
 }
 
 #ifndef _STLP_NO_LONG_DOUBLE
 void  _STLP_CALL
 __string_to_float(const string& v, long double& val) {
-    val = _Stl_string_to_long_double(v.data());
+    val = _Stl_string_to_long_double(v.c_str());
 }
 #endif
 
diff -ur STLport-4.6.2/stlport/config/stl_gcc.h STLport-4.6.2-t2/stlport/config/stl_gcc.h
--- STLport-4.6.2/stlport/config/stl_gcc.h	2003-11-02 09:59:11.000000000 +0100
+++ STLport-4.6.2-t2/stlport/config/stl_gcc.h	2004-10-27 17:30:51.936657168 +0200
@@ -263,18 +263,8 @@
 
 # if (__GNUC__ >= 3)
 
-#  if ((__GNUC_MINOR__ == 0) || (__APPLE__))
-#   define _STLP_NATIVE_INCLUDE_PATH ../g++-v3
-#   define _STLP_NATIVE_OLD_STREAMS_INCLUDE_PATH ../g++-v3/backward
-#  else
-#   if defined(__GNUC_PATCHLEVEL__) && (__GNUC_PATCHLEVEL__ > 0)
-#     define _STLP_NATIVE_INCLUDE_PATH ../__GNUC__.__GNUC_MINOR__.__GNUC_PATCHLEVEL__
-#     define _STLP_NATIVE_OLD_STREAMS_INCLUDE_PATH ../__GNUC__.__GNUC_MINOR__.__GNUC_PATCHLEVEL__/backward
-#   else
-#     define _STLP_NATIVE_INCLUDE_PATH ../__GNUC__.__GNUC_MINOR__
-#     define _STLP_NATIVE_OLD_STREAMS_INCLUDE_PATH ../__GNUC__.__GNUC_MINOR__/backward
-#   endif
-#  endif
+#  define _STLP_NATIVE_INCLUDE_PATH c++
+#  define _STLP_NATIVE_OLD_STREAMS_INCLUDE_PATH _STLP_NATIVE_INCLUDE_PATH/backward
 
 # elif (__GNUC_MINOR__ < 8)
 
diff -ur STLport-4.6.2/stlport/stdexcept STLport-4.6.2-t2/stlport/stdexcept
--- STLport-4.6.2/stlport/stdexcept	2003-11-02 09:59:01.000000000 +0100
+++ STLport-4.6.2-t2/stlport/stdexcept	2004-10-27 17:31:14.338251608 +0200
@@ -53,6 +53,12 @@
 
 _STLP_BEGIN_NAMESPACE
 
+#if (__GNUC__ >= 3)
+#  ifndef _STLP_NOTHROW_INHERENTLY
+#    define _STLP_NOTHROW_INHERENTLY throw()
+#  endif
+#endif
+
 # if   ! defined (_STLP_NO_EXCEPTION_HEADER)
 # if !defined(_STLP_EXCEPTION_BASE) && !defined(_STLP_BROKEN_EXCEPTION_CLASS) && defined (_STLP_USE_NAMESPACES) && defined (_STLP_USE_OWN_NAMESPACE)
 using _STLP_VENDOR_EXCEPT_STD::exception;
diff -ur STLport-4.6.2/stlport/stl/_alloc.h STLport-4.6.2-t2/stlport/stl/_alloc.h
--- STLport-4.6.2/stlport/stl/_alloc.h	2003-11-02 09:59:08.000000000 +0100
+++ STLport-4.6.2-t2/stlport/stl/_alloc.h	2004-10-27 17:30:51.936657168 +0200
@@ -413,7 +413,7 @@
 {
   typedef _Allocator _Orig;
 # if defined (_STLP_USE_NESTED_TCLASS_THROUGHT_TPARAM) 
-  typedef typename _Allocator::_STLP_TEMPLATE rebind<_Tp> _Rebind_type;
+  typedef typename _Allocator::template _STLP_TEMPLATE rebind<_Tp> _Rebind_type;
   typedef typename _Rebind_type::other  allocator_type;
   static allocator_type create_allocator(const _Orig& __a) { return allocator_type(__a); }
 # else
@@ -457,7 +457,7 @@
 template <class _Tp, class _Alloc>
 inline _STLP_TYPENAME_ON_RETURN_TYPE _Alloc_traits<_Tp, _Alloc>::allocator_type  _STLP_CALL
 __stl_alloc_create(const _Alloc& __a, const _Tp*) {
-  typedef typename _Alloc::_STLP_TEMPLATE rebind<_Tp>::other _Rebound_type;
+  typedef typename _Alloc::template _STLP_TEMPLATE rebind<_Tp>::other _Rebound_type;
   return _Rebound_type(__a);
 }
 #else
