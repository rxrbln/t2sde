# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../ginac/gcc4.patch
# Copyright (C) 2004 - 2005 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---
diff -udbBr ginac-1.3.2.error/ginac/print.h ginac-1.3.2.fixed/ginac/print.h
--- ginac-1.3.2.error/ginac/print.h	2005-05-01 22:12:43.000000000 +0400
+++ ginac-1.3.2.fixed/ginac/print.h	2005-10-19 02:37:47.000000000 +0400
@@ -216,7 +216,7 @@
 template <class T, class C>
 class print_memfun_handler : public print_functor_impl {
 public:
-	typedef void (T::*F)(const C & c, unsigned level);
+	typedef void (T::*F)(const C & c, unsigned level) const;
 
 	print_memfun_handler(F f_) : f(f_) {}
 	print_memfun_handler *duplicate() const { return new print_memfun_handler(*this); }
@@ -247,7 +247,7 @@
 	print_functor(void f(const T &, const C &, unsigned)) : impl(new print_ptrfun_handler<T, C>(f)) {}
 
 	template <class T, class C>
-	print_functor(void (T::*f)(const C &, unsigned)) : impl(new print_memfun_handler<T, C>(f)) {}
+	print_functor(void (T::*f)(const C &, unsigned) const) : impl(new print_memfun_handler<T, C>(f)) {}
 
 	print_functor & operator=(const print_functor & other)
 	{
diff -udbBr ginac-1.3.2.error/ginac/registrar.h ginac-1.3.2.fixed/ginac/registrar.h
--- ginac-1.3.2.error/ginac/registrar.h	2005-05-01 22:12:43.000000000 +0400
+++ ginac-1.3.2.fixed/ginac/registrar.h	2005-10-19 02:35:50.000000000 +0400
@@ -63,7 +63,7 @@
 	}
 
 	template <class Ctx, class T, class C>
-	registered_class_options & print_func(void (T::*f)(const C &, unsigned))
+	registered_class_options & print_func(void (T::*f)(const C &, unsigned) const)
 	{
 		set_print_func(Ctx::get_class_info_static().options.get_id(), f);
 		return *this;
@@ -162,7 +162,7 @@
 
 /** Add or replace a print method. */
 template <class Alg, class Ctx, class T, class C>
-extern void set_print_func(void (T::*f)(const C &, unsigned))
+extern void set_print_func(void (T::*f)(const C &, unsigned) const)
 {
 	Alg::get_class_info_static().options.set_print_func(Ctx::get_class_info_static().options.get_id(), f);
 }
