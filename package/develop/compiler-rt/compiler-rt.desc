[COPY] --- T2-COPYRIGHT-BEGIN ---
[COPY] t2/package/*/compiler-rt/compiler-rt.desc
[COPY] Copyright (C) 2008 - 2025 The T2 SDE Project
[COPY] SPDX-License-Identifier: GPL-2.0
[COPY] --- T2-COPYRIGHT-END ---

[I] Compiler runtime libraries

[T] A simple library that provides an implementation of the low-level
[T] target-specific hooks required by code generation and other runtime
[T] components. For example, when compiling for a 32-bit target, converting
[T] a double to a 64-bit unsigned integer is compiling into a runtime call
[T] to the "__fixunsdfdi" function.

[U] https://compiler-rt.llvm.org

[A] University of Illinois/NCSA
[A] Chris Lattner <clattner@apple.com>
[M] Rene Rebe <rene@t2-project.org>

[C] extra/development
[F] OBJDIR CROSS

[L] BSD
[S] Stable
[V] 21.1.3
[P] X -1---5---9 102.390

[CV-GROUP] llvmorg
[D] c0303049e1b0d282232dd836c9989a439c4d1e70f8e2a9331580608d compiler-rt-21.1.3.src.tar.xz https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.3/
[D] f5529a7174f22e59fea8acf9d0d474ed467bc1ba6166832b5d243db8 llvm-cmake-21.1.3.src.tar.xz !https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.3/cmake-21.1.3.src.tar.xz
[D] f388fb5f615a757b9e346321ab7b3b5507ff19ebc8be938eb6fbb1dd llvm-third-party-21.1.3.src.tar.xz !https://github.com/llvm/llvm-project/releases/download/llvmorg-21.1.3/third-party-21.1.3.src.tar.xz

atstage native || export DESTDIR="$root"

cmake_mod() {
	tar $taropt `match_source_file -p cmake` -C ..
	mv -vf ../cmake-*src ../../cmake
	tar $taropt `match_source_file -p third` -C ..
	mv -vf ../third-*src ../../third-party
}
hook_add preconf 5 cmake_mod

build_minimal_cross() {
	${arch_target}-clang -c ../lib/builtins/{muldc3,muldi3,mulsc3,mulxc3,mulsi3}.c
	${arch_target}-ar r builtins.a *.o
	${arch_target}-clang -fPIC -c ../lib/crt/crt{begin,end}.c
	mkdir -p $sysroot/usr/lib/linux/
	install builtins.a $sysroot/usr/lib/linux/libclang_rt.builtins-$arch.a
	install crt*.o $sysroot/usr/libx32/
}
if atstage toolchain; then
	runmake=0 runcmake=0
	hook_add inmake 5 "build_minimal_cross" # -DCOMPILER_RT_BAREMETAL_BUILD=ON ?
fi

if [ $SDECFG_LIBC == "musl" ]; then
	var_append cmakeopt ' ' "-DCOMPILER_RT_BUILD_SANITIZERS=OFF -DCOMPILER_RT_BUILD_XRAY=OFF"
	var_append cmakeopt ' ' "-DCOMPILER_RT_BUILD_LIBFUZZER=OFF -DCOMPILER_RT_BUILD_PROFILER=OFF"
fi

#var_append cmakeopt ' ' -DCOMPILER_RT_STANDALONE_BUILD=ON

if [ $stagelevel = 1 ]; then
	# during initial bootstarp we don't have libcxx* yet
	var_append GCC_WRAPPER_APPEND ' ' '-nostdlib -lc'
	#var_append cmakeopt ' ' "-DCMAKE_C_COMPILER_WORKS=ON -DCMAKE_CXX_COMPILER_WORKS=ON"
	var_append cmakeopt ' ' "-DCOMPILER_RT_BUILD_SANITIZERS=OFF -DCOMPILER_RT_BUILD_XRAY=OFF"
	var_append cmakeopt ' ' "-DCOMPILER_RT_BUILD_MEMPROF=OFF -DCOMPILER_RT_BUILD_ORC=OFF"
fi

# currently fails even with gcc/glibc
var_append cmakeopt ' ' -DCOMPILER_RT_BUILD_SANITIZERS=OFF

[ "${libdir##*/lib}" ] && var_append cmakeopt ' ' "-DLLVM_LIBDIR_SUFFIX=${libdir##*/lib}"
var_append cmakeopt ' ' "-DBUILD_SHARED_LIBS=ON .."
