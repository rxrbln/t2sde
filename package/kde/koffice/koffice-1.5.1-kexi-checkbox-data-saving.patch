# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../koffice/koffice-1.5.1-kexi-checkbox-data-saving.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

diff -Nur koffice-1.5.1-orig/kexi/plugins/forms/kexidataprovider.cpp koffice-1.5.1/kexi/plugins/forms/kexidataprovider.cpp
--- koffice-1.5.1-orig/kexi/plugins/forms/kexidataprovider.cpp	2006-05-10 18:19:58.000000000 +0000
+++ koffice-1.5.1/kexi/plugins/forms/kexidataprovider.cpp	2006-06-06 22:14:49.000000000 +0000
@@ -92,7 +92,8 @@
  	for (KexiFormDataItemInterfaceToIntMap::ConstIterator it = m_fieldNumbersForDataItems.constBegin(); 
 		it!=m_fieldNumbersForDataItems.constEnd(); ++it)
 	{
-		kexipluginsdbg << "fill data of '" << it.key()->dataSource() <<  "' at idx=" << it.data() << endl;
+		kexipluginsdbg << "fill data of '" << it.key()->dataSource() <<  "' at idx=" << it.data() 
+			<< " data=" << row.at(it.data()) << endl;
 		it.key()->setValue( row.at(it.data()) );
 	}
 }
diff -Nur koffice-1.5.1-orig/kexi/plugins/forms/widgets/kexidbautofield.cpp koffice-1.5.1/kexi/plugins/forms/widgets/kexidbautofield.cpp
--- koffice-1.5.1-orig/kexi/plugins/forms/widgets/kexidbautofield.cpp	2006-05-10 18:19:58.000000000 +0000
+++ koffice-1.5.1/kexi/plugins/forms/widgets/kexidbautofield.cpp	2006-06-06 22:14:49.000000000 +0000
@@ -446,8 +446,11 @@
 		@todo look at makeFirstCharacterUpperCaseInAutoLabels setting [bool]
 		(see doc/dev/settings.txt) */
 			if (!text.isEmpty()) {
-				realText = text[0].upper();
-				realText += (text.mid(1) + ": ");
+				realText = text[0].upper() + text.mid(1);
+				if (m_widgetType!=Boolean) {
+//! @todo ":" suffix looks weird for checkbox; remove this condition when [x] is displayed _after_ label
+					realText += ": ";
+				}
 			}
 		}
 		else
diff -Nur koffice-1.5.1-orig/kexi/plugins/forms/widgets/kexidbcheckbox.cpp koffice-1.5.1/kexi/plugins/forms/widgets/kexidbcheckbox.cpp
--- koffice-1.5.1-orig/kexi/plugins/forms/widgets/kexidbcheckbox.cpp	2006-05-10 18:19:58.000000000 +0000
+++ koffice-1.5.1/kexi/plugins/forms/widgets/kexidbcheckbox.cpp	2006-06-06 22:14:49.000000000 +0000
@@ -27,7 +27,9 @@
  : QCheckBox(text, parent, name), KexiFormDataItemInterface()
 {
 	m_invalidState = false;
+//! todo: tristate 
 	setTristate(true);
+	setFocusPolicy(QWidget::StrongFocus);
 	connect(this, SIGNAL(stateChanged(int)), this, SLOT(slotStateChanged(int)));
 }
 
@@ -56,13 +58,16 @@
 
 void KexiDBCheckBox::setValueInternal(const QVariant &add, bool )
 {
-	setState( add.isNull() ? NoChange : (add.toBool() ? On : Off) );
+//	setState( add.isNull() ? NoChange : (add.toBool() ? On : Off) );
+	setState( m_origValue.isNull() ? NoChange : (m_origValue.toBool() ? On : Off) );
 }
 
 QVariant
 KexiDBCheckBox::value()
 {
-	return QVariant( isChecked(), 3 );
+	if (state()==NoChange)
+		return QVariant();
+	return QVariant(state()==On, 1);
 }
 
 void KexiDBCheckBox::slotStateChanged(int )
