# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../vdr/vdr.conf
# Copyright (C) 2007 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. A copy of the
# GNU General Public License can be found in the file COPYING.
# --- T2-COPYRIGHT-NOTE-END ---

. $base/package/vdr/*/vdr-conf.in

if [ "${VIDEODIR:0:1}" = "/" ]; then
	var_append flistroot ' ' "${VIDEODIR:1}"
fi


gen_runvdr ()
{
	cat << EOC > $root$bindir/stopvdr.sh
#!/bin/sh
VDRPRG="$bindir/vdr"
logger "stopvdr: called with: \$@"
if [ \$1 -ne 0 ] ; then

	# Calculate start time
	acpitime=\$(date --date="\$((\$1 - \$(date "+%s"))) seconds" "+%Y-%d-%m %H:%M:%S")

	logger "stopvdr: restart at \$acpitime, recording channel \$4 (\$3)"
	echo \$acpitime > /proc/acpi/alarm
	#echo -n "mem" > /sys/power/state
fi
shutdown -h now
exit 0;
EOC
	chmod 0755 $root$bindir/stopvdr.sh

	cat << EOC > $root$bindir/runvdr.sh
#!/bin/bash

VDRPRG=$bindir/vdr
VDRUSR=
VDRPLUGINDB=$VDRPLUGINDB
VDRPLUGINDIR=$VDRPLUGINDIR
VDIR=$VIDEODIR

KILL="killall -q -TERM \$VDRPRG"

PLUGINS=
while read P; do
	[ -r \$P ] && PLUGINS="\$PLUGINS@-P\`cat \$P\`"
done < <( find \$VDRPLUGINDB -type l -name "vdr-*.active" )

VDRCMD="\$VDRPRG@-c@$sysconfdir@-s@$bindir/stopvdr.sh@-L@\$VDRPLUGINDIR@--no-kbd@--vfat@-w@300@-u@root@-v@\$VDIR@\$PLUGINS@\$*"

export HOME=$VIDEODIR
#export DVDCSS_METHOD=key
#export LD_ASSUME_KERNEL=2.4.1

OIFS="\$IFS"
IFS=@
EOC

if pkginstalled vdradmin; then 
	cat << EOC >> $root$bindir/runvdr.sh

#echo "Scheduling VDRAdmin"
#su $VDRUSR -c $bindir/vdradmind.pl" | at now + 2 minutes
EOC
fi

	cat << EOC >> $root$bindir/runvdr.sh

echo "VDRCMD=\$VDRCMD"
echo "\$\$" > /var/run/runvdr.pid
echo "Starting VDR"

(cd \$VDIR; \$VDRCMD \$VDRUSR)

EOC

	chmod 0755 $root$bindir/runvdr.sh
}


vdr_setup() {
	cat > Make.config <<EOT
DVBDIR = $DVBINCDIR
MANDIR = $root$mandir
BINDIR = $root$bindir
PLUGINLIBDIR = $VDRPLUGINDIR
PLUGINDB = $VDRPLUGINDB
VIDEODIR = $VIDEODIR
LIRC_DEVICE = /dev/lircd
RCU_DEVICE  = /dev/ttyS1
REMOTE = LIRC
#NO_KBD=1
EOT
}

vdr_devinstall() {
	echo "Installing vdr header files ..."
	cp -a *.h $VDRINCDIR
	cp -a config.h Make.config $VDRDIR
	install -d -m 0755 $root$includedir/libsi
	cp -a libsi/*.h $root$includedir/libsi
}

vdr_install() {
	echo "Installing vdr, plugins and scripts ..."

	mkdir -p $VDRPLUGINDIR
	mkdir -p $VDRPLUGINDB
	mkdir -p $VDRINCDIR
	mkdir -p $PLUGINDIR
	ln -sf $PLUGINDIR $root$sysconfdir/plugins

	# Video storage directory
	mkdir -p $VIDEODIR

	# vdr itself
	cp -a vdr $root$bindir

	# Copy vdr default .conf
	cp -a *.conf $root$sysconfdir
	cp -a $confdir/{commands,reccmds}.conf $root$sysconfdir
	cp -a $confdir/mount.sh $root$sysconfdir
	chmod u+x $root$sysconfdir/*.sh

	gen_runvdr
	vdr_devinstall
}

vdr_extract_patches() {
	echo "Extracting patches ..."
	pfiles=`match_source_file -p vdr-[0-9.].*.diff | sort`
	for fpatch in $pfiles ; do
		echo "$fpatch"
		var_append patchfiles ' ' "$fpatch"
	done
}

makeinstopt=
var_append makeopt ' ' 'all'

hook_add prepatch  3 'vdr_extract_patches'
hook_add premake  3 'vdr_setup'
hook_add postmake 3 'vdr_install'
