Start x32 by disabling x86 assembly, needs more bits e.g. xpcom, old patches:
  https://github.com/orsonteodoro/muslx32/commit/d3c69a81fc47b3b8a56c7ff13897e644eef6aedc#diff-4e39c3bf1b6aba655e5780d658e0af3005fe6a8b26b10f2c60ecc42f8a86edb3

--- firefox-119.0/python/mozbuild/mozbuild/configure/constants.py.vanilla	2023-10-31 18:39:29.027817314 +0100
+++ firefox-119.0/python/mozbuild/mozbuild/configure/constants.py	2023-10-31 18:40:10.919821943 +0100
@@ -65,7 +65,7 @@
     "sparc": 32,
     "sparc64": 64,
     "x86": 32,
-    "x86_64": 64,
+    "x86_64": 32,
     "wasm32": 32,
 }
 
--- firefox-142.0/js/src/vm/BigIntType.cpp.vanilla	2025-08-25 19:57:01.656453177 +0200
+++ firefox-142.0/js/src/vm/BigIntType.cpp	2025-08-25 19:58:22.066559403 +0200
@@ -317,7 +317,7 @@
 BigInt::Digit BigInt::digitDiv(Digit high, Digit low, Digit divisor,
                                Digit* remainder) {
   MOZ_ASSERT(high < divisor, "division must not overflow");
-#if defined(__x86_64__)
+#if defined(__x86_64__) && !defined(__ILP32__)
   Digit quotient;
   Digit rem;
   __asm__("divq  %[divisor]"
--- firefox-142.0/media/ffvpx/libavcodec/moz.build.vanilla	2025-08-25 19:06:52.760355939 +0200
+++ firefox-142.0/media/ffvpx/libavcodec/moz.build	2025-08-25 19:07:03.629378025 +0200
@@ -7,7 +7,7 @@
 # Due to duplicate file names, we compile libavutil/x86 in its own
 # moz.build file.
 if CONFIG['FFVPX_ASFLAGS']:
-    if CONFIG['TARGET_CPU'] == 'x86' or CONFIG['TARGET_CPU'] == 'x86_64':
+    if CONFIG['TARGET_CPU'] == 'x86':
         DIRS += ['x86']
 
 if CONFIG['TARGET_CPU'] == 'aarch64':
--- firefox-142.0/media/ffvpx/libavutil/moz.build.vanilla	2025-08-25 19:01:03.311893667 +0200
+++ firefox-142.0/media/ffvpx/libavutil/moz.build	2025-08-25 19:02:32.574017261 +0200
@@ -7,7 +7,7 @@
 # Due to duplicate file names, we compile libavutil/x86 in its own
 # moz.build file.
 if CONFIG['FFVPX_ASFLAGS']:
    if CONFIG['TARGET_CPU'] == 'x86' or CONFIG['TARGET_CPU'] == 'x86_64':
+    if CONFIG['TARGET_CPU'] == 'x86':
         DIRS += ['x86']
 
--- firefox-142.0/media/libaom/moz.build.vanilla	2025-08-25 19:04:44.235204785 +0200
+++ firefox-142.0/media/libaom/moz.build	2025-08-25 19:05:04.622350355 +0200
@@ -10,27 +10,7 @@
 include('sources.mozbuild')
 
 # Linux, Mac and Win share file lists for x86* but not configurations.
-if CONFIG['TARGET_CPU'] == 'x86_64':
-    EXPORTS.aom += files['X64_EXPORTS']
-    SOURCES += files['X64_SOURCES']
-    USE_NASM = True
-    if CONFIG['OS_TARGET'] == 'WINNT':
-        ASFLAGS += [ '-I%s/media/libaom/config/win/x64/' % TOPSRCDIR ]
-        LOCAL_INCLUDES += [ '/media/libaom/config/win/x64/' ]
-        EXPORTS.aom += [ 'config/win/x64/config/aom_config.h' ]
-        SOURCES += files['X64_WIN_SOURCES']
-        # This code is not included in our PGO profile, and pointlessly
-        # PGO-optimizing it slows down our builds a lot.
-        NO_PGO = True
-    elif CONFIG['OS_TARGET'] == 'Darwin':
-        ASFLAGS += [ '-I%s/media/libaom/config/mac/x64/' % TOPSRCDIR ]
-        LOCAL_INCLUDES += [ '/media/libaom/config/mac/x64/' ]
-        EXPORTS.aom += [ 'config/mac/x64/config/aom_config.h' ]
-    else: # Android, Linux, BSDs, etc.
-        ASFLAGS += [ '-I%s/media/libaom/config/linux/x64/' % TOPSRCDIR ]
-        LOCAL_INCLUDES += [ '/media/libaom/config/linux/x64/' ]
-        EXPORTS.aom += [ 'config/linux/x64/config/aom_config.h' ]
-elif CONFIG['TARGET_CPU'] == 'x86':
+if CONFIG['TARGET_CPU'] == 'x86':
     EXPORTS.aom += files['IA32_EXPORTS']
     SOURCES += files['IA32_SOURCES']
     USE_NASM = True
--- firefox-142.0/media/libvpx/moz.build.vanilla	2025-08-25 19:19:31.483423844 +0200
+++ firefox-142.0/media/libvpx/moz.build	2025-08-25 19:20:04.244414306 +0200
@@ -12,24 +12,7 @@
 if CONFIG['VPX_USE_NASM']:
     USE_NASM = True
 
-# Linux, Mac and Win share file lists for x86* but not configurations.
-if CONFIG['TARGET_CPU'] == 'x86_64':
-    if CONFIG['OS_TARGET'] == 'WINNT':
-        EXPORTS.vpx += files['WIN_X64_EXPORTS']
-        SOURCES += files['WIN_X64_SOURCES']
-        ASFLAGS += [ '-I%s/media/libvpx/config/win/x64/' % TOPSRCDIR ]
-        LOCAL_INCLUDES += [ '/media/libvpx/config/win/x64/' ]
-    elif CONFIG['OS_TARGET'] == 'Darwin':
-        EXPORTS.vpx += files['MAC_X64_EXPORTS']
-        SOURCES += files['MAC_X64_SOURCES']
-        ASFLAGS += [ '-I%s/media/libvpx/config/mac/x64/' % TOPSRCDIR ]
-        LOCAL_INCLUDES += [ '/media/libvpx/config/mac/x64/' ]
-    else: # Android, Linux, BSDs, etc.
-        EXPORTS.vpx += files['LINUX_X64_EXPORTS']
-        SOURCES += files['LINUX_X64_SOURCES']
-        ASFLAGS += [ '-I%s/media/libvpx/config/linux/x64/' % TOPSRCDIR ]
-        LOCAL_INCLUDES += [ '/media/libvpx/config/linux/x64/' ]
-elif CONFIG['TARGET_CPU'] == 'x86':
+if CONFIG['TARGET_CPU'] == 'x86':
     if CONFIG['OS_TARGET'] == 'WINNT':
         EXPORTS.vpx += files['WIN_IA32_EXPORTS']
         SOURCES += files['WIN_IA32_SOURCES']
--- firefox-142.0/gfx/ycbcr/moz.build.vanilla	2025-08-25 20:01:37.492621104 +0200
+++ firefox-142.0/gfx/ycbcr/moz.build	2025-08-25 20:02:07.827630641 +0200
@@ -17,22 +17,6 @@
     'yuv_row_table.cpp',
 ]
 
-if CONFIG['INTEL_ARCHITECTURE']:
-    # These files use MMX and SSE2 intrinsics, so they need special compile flags
-    # on some compilers.
-    SOURCES += ['yuv_convert_sse2.cpp']
-    SOURCES['yuv_convert_sse2.cpp'].flags += CONFIG['SSE2_FLAGS']
-
-    # MSVC doesn't support MMX when targeting AMD64.
-    if CONFIG['CC_TYPE'] == 'clang-cl':
-        if CONFIG['TARGET_CPU'] == 'x86':
-            SOURCES += [
-                'yuv_convert_mmx.cpp',
-            ]
-    else:
-        SOURCES += ['yuv_convert_mmx.cpp']
-        SOURCES['yuv_convert_mmx.cpp'].flags += CONFIG['MMX_FLAGS']
-
 if CONFIG['CC_TYPE'] == 'clang-cl':
     if CONFIG['TARGET_CPU'] == 'x86_64' or \
        (CONFIG['TARGET_CPU'] == 'x86' and CONFIG['CC_TYPE'] == 'clang-cl'):
--- firefox-142.0/gfx/ycbcr/yuv_row_posix.cpp.vanilla	2025-08-25 20:18:25.180248172 +0200
+++ firefox-142.0/gfx/ycbcr/yuv_row_posix.cpp	2025-08-25 20:18:44.527037844 +0200
@@ -9,7 +9,7 @@
 
 extern "C" {
 
-#if defined(ARCH_CPU_X86_64)
+#if 0
 
 // We don't need CPUID guards here, since x86-64 implies SSE2.
 
--- firefox-142.0/gfx/ycbcr/yuv_convert.cpp.vanilla	2025-08-25 20:25:50.280242482 +0200
+++ firefox-142.0/gfx/ycbcr/yuv_convert.cpp	2025-08-25 20:26:13.503383380 +0200
@@ -528,7 +528,7 @@
                                  dest_pixel, width, source_dx);
     } else {
 // Specialized scalers and rotation.
-#if defined(MOZILLA_MAY_SUPPORT_SSE) && defined(_MSC_VER) && defined(_M_IX86) && !defined(__clang__)
+#if 0
       if(mozilla::supports_sse()) {
         if (width == (source_width * 2)) {
           DoubleYUVToRGB32Row_SSE(y_ptr, u_ptr, v_ptr,
--- firefox-142.0/mfbt/RandomNum.cpp.vanilla	2025-08-25 18:45:56.692673510 +0200
+++ firefox-142.0/mfbt/RandomNum.cpp	2025-08-25 18:57:51.823014910 +0200
@@ -41,7 +41,11 @@
 // Older glibc versions don't define SYS_getrandom, so we define it here if
 // it's not available. See bug 995069.
 #  if defined(__x86_64__)
+#   if defined(__ILP32__)
+#    define GETRANDOM_NR (318 | 0x40000000)
+#   else
 #    define GETRANDOM_NR 318
+#   endif
 #  elif defined(__i386__)
 #    define GETRANDOM_NR 355
 #  elif defined(__aarch64__)
--- firefox-142.0/security/nss/coreconf/config.gypi.vanilla	2025-08-25 19:28:22.969412253 +0200
+++ firefox-142.0/security/nss/coreconf/config.gypi	2025-08-25 19:30:21.380684834 +0200
@@ -239,8 +239,6 @@
       }],
       [ 'target_arch=="x64"', {
         'defines': [
-          'NSS_X64',
-          'NSS_USE_64',
         ],
         # For Windows.
         'msvs_settings': {
--- firefox-142.0/ipc/chromium/src/base/linux_memfd_defs.h.vanilla	2025-08-25 18:55:28.219077248 +0200
+++ firefox-142.0/ipc/chromium/src/base/linux_memfd_defs.h	2025-08-25 18:58:04.797177661 +0200
@@ -14,7 +14,11 @@
 // and various related constants either.
 
 #if defined(__x86_64__)
+# if defined(__ILP32__)
+#  define MEMFD_CREATE_NR (319 | 0x40000000)
+# else
 #  define MEMFD_CREATE_NR 319
+# endif
 #elif defined(__i386__)
 #  define MEMFD_CREATE_NR 356
 #elif defined(__aarch64__)
--- firefox-142.0/mozglue/misc/SSE.h.vanilla	2025-08-25 20:28:32.808075667 +0200
+++ firefox-142.0/mozglue/misc/SSE.h	2025-08-25 20:29:25.887695241 +0200
@@ -94,7 +94,7 @@
  *
  */
 
-#if defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))
+#if defined(__GNUC__) && (defined(__i386__))
 
 #  ifdef __MMX__
 // It's ok to use MMX instructions based on the -march option (or
@@ -190,7 +190,7 @@
 
 #  define MOZILLA_SSE_HAVE_CPUID_DETECTION
 
-#  if defined(__x86_64__)
+#  if 0
 // MMX is always available on AMD64.
 #    define MOZILLA_PRESUME_MMX
 // SSE is always available on AMD64.
--- firefox-142.0/toolkit/moz.configure.vanilla	2025-08-25 19:36:49.025645025 +0200
+++ firefox-142.0/toolkit/moz.configure	2025-08-25 19:42:26.209946779 +0200
@@ -178,7 +178,7 @@
     if target.os == "Android":
         return target.cpu in ("aarch64", "arm", "x86", "x86_64")
     elif target.kernel == "Linux":
-        return target.cpu in ("aarch64", "arm", "x86", "x86_64", "mips64")
+        return target.cpu in ("aarch64", "arm", "x86", "mips64")
     elif target.kernel == "FreeBSD":
         return target.cpu in ("aarch64", "x86_64")
     return target.kernel in ("Darwin", "WINNT")
@@ -911,13 +911,13 @@
 
 @depends(target, "--with-system-av1", when=av1 & compile_environment)
 def dav1d_asm(target, system_av1):
-    if not system_av1 and target.cpu in ("arm", "aarch64", "x86", "x86_64"):
+    if not system_av1 and target.cpu in ("arm", "aarch64", "x86"):
         return True
 
 
 @depends(target, "--with-system-av1", when=av1 & compile_environment)
 def dav1d_nasm(target, system_av1):
-    if not system_av1 and target.cpu in ("x86", "x86_64"):
+    if not system_av1 and target.cpu in ("x86"):
         return namespace(version="2.14", what="AV1")
 
 
@@ -977,7 +977,7 @@
     if (
         target.kernel in ("WINNT", "Linux")
         and target.os != "Android"
-        and target.cpu in ("x86", "x86_64")
+        and target.cpu in ("x86")
     ):
         if wmf:
             return ("widevine", "wmfcdm")
@@ -2189,7 +2189,6 @@
 def llvm_dlltool_flags(target):
     arch = {
         "x86": "i386",
-        "x86_64": "i386:x86-64",
         "aarch64": "arm64",
     }[target.cpu]
 
@@ -2347,7 +2346,7 @@
 
     @depends(target, when=in_tree_vpx)
     def vpx_nasm(target):
-        if target.cpu in ("x86", "x86_64"):
+        if target.cpu in ("x86"):
             if target.kernel == "WINNT":
                 # Version 2.03 is needed for automatic safeseh support.
                 return namespace(version="2.03", what="VPX")
@@ -2494,8 +2493,6 @@
             return in_tree_jpeg_mips64
         elif target.cpu == "x86":
             return ("-DPIC", "-DELF")
-        elif target.cpu == "x86_64":
-            return ("-D__x86_64__", "-DPIC", "-DELF")
 
     @depends(target, when=depends("--with-system-jpeg")(lambda x: not x))
     def jpeg_nasm(target):
@@ -2614,8 +2611,6 @@
             ]
         elif target.cpu == "aarch64":
             use_nasm = False
-    elif target.cpu == "x86_64":
-        flags = ["-D__x86_64__", "-DPIC", "-DELF", "-Pconfig_unix64.asm"]
     else:
         audio_only = True
 
@@ -2736,7 +2731,7 @@
     # We only produce dxc builds for x86_64 and aarch64.
     @depends(target)
     def dxc_supports_target(target):
-        return target.cpu in ("x86_64", "aarch64")
+        return target.cpu in ("aarch64")
 
     @depends(
         target,
@@ -2751,7 +2746,6 @@
         if not windows_sdk_dir and not artifact:
             return namespace(enabled=False)
         arch = {
-            "x86_64": "x64",
             "aarch64": "arm64",
         }.get(target.cpu, target.cpu)
 
@@ -3420,7 +3414,7 @@
 @depends(target)
 def oxidized_breakpad(target):
     if target.kernel == "Linux":
-        return target.cpu in ("aarch64", "arm", "x86", "x86_64")
+        return target.cpu in ("aarch64", "arm", "x86")
     return False
 
 
