# --- T2-COPYRIGHT-NOTE-BEGIN ---
# T2 SDE: package/*/qt5/hotfix-gcc11.patch
# Copyright (C) 2021 The T2 SDE Project
# 
# This Copyright note is generated by scripts/Create-CopyPatch,
# more information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

--- a/qtbase/src/corelib/global/qendian.h
+++ b/qtbase/src/corelib/global/qendian.h
@@ -44,6 +44,8 @@
 #include <QtCore/qfloat16.h>
 #include <QtCore/qglobal.h>
 
+#include <limits>
+
 // include stdlib.h and hope that it defines __GLIBC__ for glibc-based systems
 #include <stdlib.h>
 #include <string.h>
--- a/qtbase/src/corelib/global/qfloat16.h
+++ b/qtbase/src/corelib/global/qfloat16.h
@@ -43,6 +43,7 @@
 
 #include <QtCore/qglobal.h>
 #include <QtCore/qmetatype.h>
+#include <limits>
 #include <string.h>
 
 #if defined(QT_COMPILER_SUPPORTS_F16C) && defined(__AVX2__) && !defined(__F16C__)
--- qt-everywhere-src-5.15.2/qtdeclarative/src/3rdparty/masm/yarr/Yarr.h.vanilla	2021-09-17 12:37:34.382532326 +0200
+++ qt-everywhere-src-5.15.2/qtdeclarative/src/3rdparty/masm/yarr/Yarr.h	2021-09-17 12:38:29.380530133 +0200
@@ -27,7 +27,7 @@
 
 #pragma once
 
-#include <limits.h>
+#include <limits>
 #include "YarrErrorCode.h"
 
 namespace JSC { namespace Yarr {
--- qt-everywhere-src-5.15.2/qtdeclarative/src/qmldebug/qqmlprofilerevent_p.h.vanilla	2021-09-17 12:57:54.284483685 +0200
+++ qt-everywhere-src-5.15.2/qtdeclarative/src/qmldebug/qqmlprofilerevent_p.h	2021-09-17 12:58:01.571483395 +0200
@@ -49,6 +49,7 @@
 
 #include <initializer_list>
 #include <type_traits>
+#include <limits>
 
 //
 //  W A R N I N G
--- qt-everywhere-src-5.15.2/qtbase/src/corelib/text/qbytearraymatcher.h.vanilla	2021-09-17 13:14:20.790444350 +0200
+++ qt-everywhere-src-5.15.2/qtbase/src/corelib/text/qbytearraymatcher.h	2021-09-17 13:15:27.717441682 +0200
@@ -42,6 +42,8 @@
 
 #include <QtCore/qbytearray.h>
 
+#include <limits>
+
 QT_BEGIN_NAMESPACE
 
 
--- qt-everywhere-src-5.15.2/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc.vanilla	2021-09-17 13:43:15.858375168 +0200
+++ qt-everywhere-src-5.15.2/qtwebengine/src/3rdparty/chromium/third_party/breakpad/breakpad/src/client/linux/handler/exception_handler.cc	2021-09-17 13:43:36.993374325 +0200
@@ -97,6 +97,8 @@
 #include "common/linux/eintr_wrapper.h"
 #include "third_party/lss/linux_syscall_support.h"
 
+#include <limits>
+
 #if defined(__ANDROID__)
 #include "linux/sched.h"
 #endif
@@ -140,7 +140,7 @@
   // SIGSTKSZ may be too small to prevent the signal handlers from overrunning
   // the alternative stack. Ensure that the size of the alternative stack is
   // large enough.
-  static const unsigned kSigStackSize = std::max(16384, SIGSTKSZ);
+  static const unsigned kSigStackSize = std::max((long)16384, SIGSTKSZ);
 
   // Only set an alternative stack if there isn't already one, or if the current
   // one is too small.
--- qt-everywhere-src-5.15.2/qtwebengine/src/3rdparty/chromium/third_party/perfetto/src/trace_processor/containers/string_pool.h.vanilla	2021-09-17 14:36:12.522248505 +0200
+++ qt-everywhere-src-5.15.2/qtwebengine/src/3rdparty/chromium/third_party/perfetto/src/trace_processor/containers/string_pool.h	2021-09-17 14:36:18.768248256 +0200
@@ -22,6 +22,7 @@
 
 #include <unordered_map>
 #include <vector>
+#include <limits>
 
 #include "perfetto/ext/base/optional.h"
 #include "perfetto/ext/base/paged_memory.h"
