# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../squashfs-tools/compressionLevel.patch
# Copyright (C) 2009 - 2011 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

Adds -compressionLevel option to mksquashfs.

Signed-off-by: Lucas C. Villa Real <lucasvr@gobolinux.org>
Signed-off-by: Rene Rebe <rene@exactcode.de>

--- squashfs-4.0-cvs/squashfs-tools/mksquashfs.c.orig	2000-01-01 00:00:00.000000000 +0100
+++ squashfs-4.0-cvs/squashfs-tools/mksquashfs.c	2009-04-02 12:20:40.000000000 +0200
@@ -111,7 +111,7 @@
 
 /* filesystem flags for building */
 int duplicate_checking = 1, noF = 0, no_fragments = 0, always_use_fragments = 0;
-int noI = 0, noD = 0;
+int noI = 0, noD = 0, cLevel = 9;
 int silent = TRUE;
 long long global_uid = -1, global_gid = -1;
 int exportable = TRUE;
@@ -4233,6 +4233,16 @@
 					exit(1);
 				}
 			}
+		} else if(strcmp(argv[i], "-compressionLevel") == 0) {
+			if(++i == argc) {
+				ERROR("%s: -compressionLevel requires a parameter\n", argv[0]);
+				exit(1);
+			}
+			cLevel = atoi(argv[i]);
+			if (cLevel < 0 || cLevel > 9) {
+				ERROR("%s: -compressionLevel out of range\n", argv[0]);
+				exit(1);
+			}
 		} else if(strcmp(argv[i], "-noI") == 0 ||
 				strcmp(argv[i], "-noInodeCompression") == 0)
 			noI = TRUE;
@@ -4333,6 +4343,8 @@
 				"of 4K\n");
 			ERROR("-root-owned\t\talternative name for -all-root"
 				"\n");
+			ERROR("-compressionLevel\tzlib compression level (0 - 9),\n");
+			ERROR("\t\t\t0(no compression), 1(best speed) and 9(best compression)\n");
 			ERROR("-noInodeCompression\talternative name for -noI"
 				"\n");
 			ERROR("-noDataCompression\talternative name for -noD"
--- squashfs4.2/squashfs-tools/mksquashfs.c.vanilla	2011-07-15 12:39:27.000000000 +0200
+++ squashfs4.2/squashfs-tools/mksquashfs.c	2011-07-15 12:40:23.000000000 +0200
@@ -2567,7 +2567,7 @@
 	pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &oldstate);
 	pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, &oldstate);
 
-	res = compressor_init(comp, &stream, block_size, 1);
+	res = compressor_init(comp, &stream, block_size, 1, cLevel);
 	if(res)
 		BAD_ERROR("deflator:: compressor_init failed\n");
 
@@ -2608,7 +2608,7 @@
 	pthread_setcancelstate(PTHREAD_CANCEL_ENABLE, &oldstate);
 	pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, &oldstate);
 
-	res = compressor_init(comp, &stream, block_size, 1);
+	res = compressor_init(comp, &stream, block_size, 1, cLevel);
 	if(res)
 		BAD_ERROR("frag_deflator:: compressor_init failed\n");
 
@@ -5098,7 +5098,7 @@
 
 	initialise_threads(readb_mbytes, writeb_mbytes, fragmentb_mbytes);
 
-	res = compressor_init(comp, &stream, SQUASHFS_METADATA_SIZE, 0);
+	res = compressor_init(comp, &stream, SQUASHFS_METADATA_SIZE, 0, cLevel);
 	if(res)
 		BAD_ERROR("compressor_init failed\n");
 
--- squashfs4.2/squashfs-tools/xz_wrapper.c.vanilla	2011-07-15 12:36:35.000000000 +0200
+++ squashfs4.2/squashfs-tools/xz_wrapper.c	2011-07-15 12:37:31.000000000 +0200
@@ -263,7 +263,7 @@
 }
 
 
-static int xz_init(void **strm, int block_size, int datablock)
+static int xz_init(void **strm, int block_size, int datablock, int clevel)
 {
 	int i, j, filters = datablock ? filter_count : 1;
 	struct filter *filter = malloc(filters * sizeof(struct filter));
--- squashfs4.2/squashfs-tools/lzo_wrapper.c.vanilla	2011-07-15 12:29:19.000000000 +0200
+++ squashfs4.2/squashfs-tools/lzo_wrapper.c	2011-07-15 12:30:14.000000000 +0200
@@ -41,7 +41,7 @@
 };
 
 
-static int squashfs_lzo_init(void **strm, int block_size, int flags)
+static int squashfs_lzo_init(void **strm, int block_size, int flags, int clevel)
 {
 	struct lzo_stream *stream;
 
--- squashfs4.2/squashfs-tools/gzip_wrapper.c.vanilla	2011-07-15 12:27:17.000000000 +0200
+++ squashfs4.2/squashfs-tools/gzip_wrapper.c	2011-07-15 12:30:46.000000000 +0200
@@ -25,7 +25,7 @@
 #include "squashfs_fs.h"
 #include "compressor.h"
 
-static int gzip_init(void **strm, int block_size, int flags)
+static int gzip_init(void **strm, int block_size, int flags, int clevel)
 {
 	int res;
 	z_stream *stream;
@@ -38,7 +38,7 @@
 	stream->zfree = Z_NULL;
 	stream->opaque = 0;
 
-	res = deflateInit(stream, 9);
+	res = deflateInit(stream, clevel);
 	if(res != Z_OK)
 		goto failed2;
 
--- squashfs4.2/squashfs-tools/compressor.h.vanilla	2011-07-15 12:41:17.000000000 +0200
+++ squashfs4.2/squashfs-tools/compressor.h	2011-07-15 12:42:19.000000000 +0200
@@ -21,7 +21,7 @@
  */
 
 struct compressor {
-	int (*init)(void **, int, int);
+	int (*init)(void **, int, int, int);
 	int (*compress)(void *, void *, void *, int, int, int *);
 	int (*uncompress)(void *, void *, int, int, int *);
 	int (*options)(char **, int);
@@ -40,11 +40,11 @@
 extern void display_compressor_usage(char *);
 
 static inline int compressor_init(struct compressor *comp, void **stream,
-	int block_size, int datablock)
+	int block_size, int datablock, int clevel)
 {
 	if(comp->init == NULL)
 		return 0;
-	return comp->init(stream, block_size, datablock);
+	return comp->init(stream, block_size, datablock, clevel);
 }
 
 
