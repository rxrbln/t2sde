# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../squashfs-tools/compressionLevel.patch
# Copyright (C) 2009 - 2010 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

Adds -compressionLevel option to mksquashfs.

Signed-off-by: Lucas C. Villa Real <lucasvr@gobolinux.org>
Signed-off-by: Rene Rebe <rene@exactcode.de>

--- squashfs-4.0-cvs/squashfs-tools/mksquashfs.c.orig	2000-01-01 00:00:00.000000000 +0100
+++ squashfs-4.0-cvs/squashfs-tools/mksquashfs.c	2009-04-02 12:20:40.000000000 +0200
@@ -111,7 +111,7 @@
 
 /* filesystem flags for building */
 int duplicate_checking = 1, noF = 0, no_fragments = 0, always_use_fragments = 0;
-int noI = 0, noD = 0;
+int noI = 0, noD = 0, cLevel = 9;
 int silent = TRUE;
 long long global_uid = -1, global_gid = -1;
 int exportable = TRUE;
@@ -4233,6 +4233,16 @@
 					exit(1);
 				}
 			}
+		} else if(strcmp(argv[i], "-compressionLevel") == 0) {
+			if(++i == argc) {
+				ERROR("%s: -compressionLevel requires a parameter\n", argv[0]);
+				exit(1);
+			}
+			cLevel = atoi(argv[i]);
+			if (cLevel < 0 || cLevel > 9) {
+				ERROR("%s: -compressionLevel out of range\n", argv[0]);
+				exit(1);
+			}
 		} else if(strcmp(argv[i], "-noI") == 0 ||
 				strcmp(argv[i], "-noInodeCompression") == 0)
 			noI = TRUE;
@@ -4333,6 +4343,8 @@
 				"of 4K\n");
 			ERROR("-root-owned\t\talternative name for -all-root"
 				"\n");
+			ERROR("-compressionLevel\tzlib compression level (0 - 9),\n");
+			ERROR("\t\t\t0(no compression), 1(best speed) and 9(best compression)\n");
 			ERROR("-noInodeCompression\talternative name for -noI"
 				"\n");
 			ERROR("-noDataCompression\talternative name for -noD"
--- squashfs4.1/squashfs-tools/lzo_wrapper.c.vanilla	2010-11-23 14:52:47.000000000 +0100
+++ squashfs4.1/squashfs-tools/lzo_wrapper.c	2010-11-23 14:53:28.000000000 +0100
@@ -35,7 +35,7 @@
 };
 
 int lzo_compress(void **strm, char *d, char *s, int size, int block_size,
-		int *error)
+		int *error, int clevel)
 {
 	int res = 0;
 	lzo_uint outlen;
--- squashfs4.1/squashfs-tools/compressor.c.vanilla	2010-11-23 14:51:52.000000000 +0100
+++ squashfs4.1/squashfs-tools/compressor.c	2010-11-23 14:52:25.000000000 +0100
@@ -25,11 +25,11 @@
 #include "compressor.h"
 #include "squashfs_fs.h"
 
-extern int gzip_compress(void **, char *, char *, int, int, int *);
+extern int gzip_compress(void **, char *, char *, int, int, int *, int clevel);
 extern int gzip_uncompress(char *, char *, int, int, int *);
-extern int lzma_compress(void **, char *, char *, int, int, int *);
+extern int lzma_compress(void **, char *, char *, int, int, int *, int clevel);
 extern int lzma_uncompress(char *, char *, int, int, int *);
-extern int lzo_compress(void **, char *, char *, int, int, int *);
+extern int lzo_compress(void **, char *, char *, int, int, int *, int clevel);
 extern int lzo_uncompress(char *, char *, int, int, int *);
 
 struct compressor compressor[] = {
--- squashfs4.1/squashfs-tools/gzip_wrapper.c.vanilla	2010-11-23 14:51:01.000000000 +0100
+++ squashfs4.1/squashfs-tools/gzip_wrapper.c	2010-11-23 14:56:02.000000000 +0100
@@ -23,7 +23,7 @@
 #include <zlib.h>
 
 int gzip_compress(void **strm, char *d, char *s, int size, int block_size,
-		int *error)
+		int *error, int clevel)
 {
 	int res = 0;
 	z_stream *stream = *strm;
@@ -36,7 +36,7 @@
 		stream->zfree = Z_NULL;
 		stream->opaque = 0;
 
-		if((res = deflateInit(stream, 9)) != Z_OK)
+		if((res = deflateInit(stream, clevel)) != Z_OK)
 			goto failed;
 	} else if((res = deflateReset(stream)) != Z_OK)
 		goto failed;
--- squashfs4.1/squashfs-tools/lzma_wrapper.c.vanilla	2010-11-23 14:53:31.000000000 +0100
+++ squashfs4.1/squashfs-tools/lzma_wrapper.c	2010-11-23 15:05:30.000000000 +0100
@@ -24,7 +24,7 @@
 #define LZMA_HEADER_SIZE	(LZMA_PROPS_SIZE + 8)
 
 int lzma_compress(void **strm, char *dest, char *src, int size, int block_size,
-		int *error)
+		int *error, int cLevel)
 {
 	unsigned char *d = (unsigned char *) dest, *s = (unsigned char *) src;
 	size_t props_size = LZMA_PROPS_SIZE,
