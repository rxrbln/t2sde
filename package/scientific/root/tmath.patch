# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../root/tmath.patch
# Copyright (C) 2010 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---


diff --git a/math/mathcore/src/TMath.cxx b/math/mathcore/src/TMath.cxx
index 65e051e..c3358d8 100644
--- a/math/mathcore/src/TMath.cxx
+++ b/math/mathcore/src/TMath.cxx
@@ -40,6 +40,27 @@ NamespaceImp(TMath)
 #endif
 
 namespace TMath {
+   namespace ROOT {
+      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
+      static void TMath_Dictionary();
+
+      // Function generating the singleton type initializer
+      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
+      {
+         static ::ROOT::TGenericClassInfo 
+            instance("TMath", 0 /*version*/, "include/TMath.h", 36,
+                     ::ROOT::DefineBehavior((void*)0,(void*)0),
+                     &TMath_Dictionary, 0);
+         return &instance;
+      }
+      // Static variable to force the class initialization
+      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));
+
+      // Dictionary for non-ClassDef classes
+      static void TMath_Dictionary() {
+         GenerateInitInstance()->GetClass();
+      }
+   }
 
    Double_t GamCf(Double_t a,Double_t x);
    Double_t GamSer(Double_t a,Double_t x);
diff --git a/math/matrix/src/TMatrixTCramerInv.cxx b/math/matrix/src/TMatrixTCramerInv.cxx
index f7bac8a..7f346f8 100644
--- a/math/matrix/src/TMatrixTCramerInv.cxx
+++ b/math/matrix/src/TMatrixTCramerInv.cxx
@@ -38,6 +38,31 @@
 NamespaceImp(TMatrixTCramerInv);
 #endif
 
+namespace TMatrixTCramerInv {
+   namespace ROOT {
+      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
+      static void TMatrixTCramerInv_Dictionary();
+
+      // Function generating the singleton type initializer
+      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
+      {
+         static ::ROOT::TGenericClassInfo 
+            instance("TMatrixTCramerInv", 0 /*version*/, "include/TMatrixTCramerInv.h", 34,
+                     ::ROOT::DefineBehavior((void*)0,(void*)0),
+                     &TMatrixTCramerInv_Dictionary, 0);
+         return &instance;
+      }
+      // Static variable to force the class initialization
+      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));
+
+      // Dictionary for non-ClassDef classes
+      static void TMatrixTCramerInv_Dictionary() {
+         GenerateInitInstance()->GetClass();
+      }
+
+   }
+}
+
 //______________________________________________________________________________
 template<class Element> 
 Bool_t TMatrixTCramerInv::Inv2x2(TMatrixT<Element> &m,Double_t *determ)
diff --git a/math/matrix/src/TMatrixTSymCramerInv.cxx b/math/matrix/src/TMatrixTSymCramerInv.cxx
index ba38f22..067c899 100644
--- a/math/matrix/src/TMatrixTSymCramerInv.cxx
+++ b/math/matrix/src/TMatrixTSymCramerInv.cxx
@@ -38,6 +38,31 @@
 NamespaceImp(TMatrixTSymCramerInv);
 #endif
 
+namespace TMatrixTSymCramerInv {
+   namespace ROOT {
+      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
+      static void TMatrixTSymCramerInv_Dictionary();
+
+      // Function generating the singleton type initializer
+      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
+      {
+         static ::ROOT::TGenericClassInfo 
+            instance("TMatrixTSymCramerInv", 0 /*version*/, "include/TMatrixTSymCramerInv.h", 34,
+                     ::ROOT::DefineBehavior((void*)0,(void*)0),
+                     &TMatrixTSymCramerInv_Dictionary, 0);
+         return &instance;
+      }
+      // Static variable to force the class initialization
+      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));
+
+      // Dictionary for non-ClassDef classes
+      static void TMatrixTSymCramerInv_Dictionary() {
+         GenerateInitInstance()->GetClass();
+      }
+
+   }
+}
+
 //______________________________________________________________________________
 template<class Element> 
 Bool_t TMatrixTSymCramerInv::Inv2x2(TMatrixTSym<Element> &m,Double_t *determ)


