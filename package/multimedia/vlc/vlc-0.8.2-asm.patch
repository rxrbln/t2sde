# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../vlc/vlc-0.8.2-asm.patch
# Copyright (C) 2004 - 2005 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---
--- vlc-0.8.2/src/misc/cpu.c	2005-06-25 15:43:02.000000000 +0200
+++ vlc-20050712/src/misc/cpu.c	2005-07-12 09:19:25.000000000 +0200
@@ -1,8 +1,8 @@
 /*****************************************************************************
  * cpu.c: CPU detection code
  *****************************************************************************
- * Copyright (C) 1998-2004 VideoLAN
- * $Id: cpu.c 10687 2005-04-15 18:06:51Z massiot $
+ * Copyright (C) 1998-2004 the VideoLAN team
+ * $Id: cpu.c 11664 2005-07-09 06:17:09Z courmisch $
  *
  * Authors: Samuel Hocevar <sam@zoy.org>
  *          Christophe Massiot <massiot@via.ecp.fr>
@@ -84,17 +84,31 @@ uint32_t CPUCapabilities( void )
     volatile vlc_bool_t    b_amd;
 
     /* Needed for x86 CPU capabilities detection */
-#   define cpuid( reg )                    \
-        asm volatile ( "push %%ebx\n\t"   \
-                       "cpuid\n\t"         \
-                       "movl %%ebx,%1\n\t" \
-                       "pop %%ebx\n\t"    \
-                     : "=a" ( i_eax ),     \
-                       "=r" ( i_ebx ),     \
-                       "=c" ( i_ecx ),     \
-                       "=d" ( i_edx )      \
-                     : "a"  ( reg )        \
-                     : "cc" );
+#   if defined( __x86_64__ )
+#       define cpuid( reg )                    \
+            asm volatile ( "push %%rbx\n\t"    \
+                           "cpuid\n\t"         \
+                           "movl %%ebx,%1\n\t" \
+                           "pop %%rbx\n\t"     \
+                         : "=a" ( i_eax ),     \
+                           "=r" ( i_ebx ),     \
+                           "=c" ( i_ecx ),     \
+                           "=d" ( i_edx )      \
+                         : "a"  ( reg )        \
+                         : "cc" );
+#   else
+#       define cpuid( reg )                    \
+            asm volatile ( "push %%ebx\n\t"    \
+                           "cpuid\n\t"         \
+                           "movl %%ebx,%1\n\t" \
+                           "pop %%ebx\n\t"     \
+                         : "=a" ( i_eax ),     \
+                           "=r" ( i_ebx ),     \
+                           "=c" ( i_ecx ),     \
+                           "=d" ( i_edx )      \
+                         : "a"  ( reg )        \
+                         : "cc" );
+#   endif
 
 #   if defined( CAN_COMPILE_SSE ) || defined ( CAN_COMPILE_3DNOW ) \
      && defined( HAVE_SIGNAL_H )
@@ -103,6 +117,8 @@ uint32_t CPUCapabilities( void )
 
     i_capabilities |= CPU_CAPABILITY_FPU;
 
+#   if defined( __i386__ )
+    /* check if cpuid instruction is supported */
     asm volatile ( "push %%ebx\n\t"
                    "pushf\n\t"
                    "pop %%eax\n\t"
@@ -121,12 +137,15 @@ uint32_t CPUCapabilities( void )
 
     if( i_eax == i_ebx )
     {
-#   if defined( CAN_COMPILE_SSE ) || defined ( CAN_COMPILE_3DNOW ) \
-     && defined( HAVE_SIGNAL_H )
+#       if defined( CAN_COMPILE_SSE ) || defined ( CAN_COMPILE_3DNOW ) \
+            && defined( HAVE_SIGNAL_H )
         signal( SIGILL, pf_sigill );
-#   endif
+#       endif
         return i_capabilities;
     }
+#   else
+    /* x86_64 supports cpuid instruction, so we dont need to check it */
+#   endif
 
     i_capabilities |= CPU_CAPABILITY_486;
 
