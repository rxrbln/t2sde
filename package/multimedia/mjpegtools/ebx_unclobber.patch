diff -u -r -N mjpegtools-1.6.2.orig/yuvdenoise/deinterlace.c mjpegtools-1.6.2/yuvdenoise/deinterlace.c
--- mjpegtools-1.6.2.orig/yuvdenoise/deinterlace.c	2005-03-28 22:39:08.177630664 +0200
+++ mjpegtools-1.6.2/yuvdenoise/deinterlace.c	2005-03-28 22:41:16.017196096 +0200
@@ -157,6 +157,7 @@
               #ifdef HAVE_ASM_MMX
               __asm__ __volatile__
                 (
+                  " pushl       %%ebx;                   /* save ebx to remove it from clobber list            */\n"
                   " pxor        %%mm0 , %%mm0;           /* clear mm0                                          */\n"
                   " pxor        %%mm7 , %%mm7;           /* clear mm7                                          */\n"
                   "                                      /*                                                    */\n"
@@ -194,9 +195,10 @@
                   " .endr                                /* end loop                                           */\n"
                   "                                      /*                                                    */\n"
                   " movq         %%mm0 , %0   ;          /* make mm0 available to gcc ...                      */\n"
+                  " popl         %%ebx;                  /* restore ebx                                        */\n"
                   :"=m" (a)
                   :"m" (ref1), "m" (ref2), "m" (ref3)
-                  :"%eax", "%ebx", "%ecx"
+                  :"%eax", "%ecx"
                 );
               
               d=a[0]+a[1]+a[2]+a[3];
diff -u -r -N mjpegtools-1.6.2.orig/yuvdenoise/motion.c mjpegtools-1.6.2/yuvdenoise/motion.c
--- mjpegtools-1.6.2.orig/yuvdenoise/motion.c	2005-03-28 22:39:08.177630664 +0200
+++ mjpegtools-1.6.2/yuvdenoise/motion.c	2005-03-28 23:00:29.345863488 +0200
@@ -142,6 +142,7 @@
 #ifdef HAVE_ASM_MMX
   __asm__ __volatile__
     (
+    " pushl       %%ebx;                   /* save ebx                                           */\n"
     " pxor        %%mm0 , %%mm0;           /* clear mm0                                          */\n"
     " pxor        %%mm7 , %%mm7;           /* clear mm7                                          */\n"
     "                                      /*                                                    */\n"
@@ -166,9 +167,10 @@
     " .endr                                /* end loop                                           */\n"
     "                                      /*                                                    */\n"
     " movq         %%mm0 , %0   ;          /* make mm0 available to gcc ...                      */\n"
+    " popl         %%ebx;                  /* restore ebx                                        */\n"
     :"=m" (a)     
     :"m" (frm), "m" (ref), "m" (denoiser.frame.w)
-    :"%eax", "%ebx", "%ecx"
+    :"%eax", "%ecx"
     );
 #endif
 
@@ -189,6 +191,7 @@
 #ifdef HAVE_ASM_MMX
   __asm__ __volatile__
     (
+    " pushl        %%ebx;                   /* save ebx                                           */\n"
     " pxor         %%mm0 , %%mm0;          /* clear mm0                                          */\n"
     " movl         %1    , %%eax;          /* load frameadress into eax                          */\n"
     " movl         %2    , %%ebx;          /* load frameadress into ebx                          */\n"
@@ -203,9 +206,10 @@
     " .endr                     ;          /*                                                    */\n"
     "                                      /*                                                    */\n"
     " movq         %%mm0 , %0   ;          /* make mm0 available to gcc ...                      */\n"
+    " popl         %%ebx;                  /* restore ebx                                        */\n"
     :"=m" (a)     
     :"m" (frm), "m" (ref), "m" (denoiser.frame.w)
-    :"%eax", "%ebx", "%ecx"
+    :"%eax", "%ecx"
     );
 #endif
   return a;
@@ -250,6 +254,7 @@
   int32_t halfwidth = denoiser.frame.w / 2;
   __asm__ __volatile__
     (
+    " pushl       %%ebx;                   /* save ebx                                           */\n"
     " pxor        %%mm0 , %%mm0;           /* clear mm0                                          */\n"
     " pxor        %%mm7 , %%mm7;           /* clear mm7                                          */\n"
     "                                      /*                                                    */\n"
@@ -274,9 +279,10 @@
     " .endr                                /* end loop                                           */\n"
     "                                      /*                                                    */\n"
     " movq         %%mm0 , %0   ;          /* make mm0 available to gcc ...                      */\n"
+    " popl         %%ebx;                  /* restore ebx                                        */\n"
     :"=m" (a)     
     :"m" (frm), "m" (ref), "m" (halfwidth)
-    :"%eax", "%ebx", "%ecx"
+    :"%eax", "%ecx"
     );
 #endif
   return (uint32_t)(a[0]+a[1]+a[2]+a[3]);
@@ -296,6 +302,7 @@
 #ifdef HAVE_ASM_MMX
   __asm__ __volatile__
     (
+    " pushl       %%ebx;                   /* save ebx                                           */\n"
     " pxor        %%mm0 , %%mm0;           /* clear mm0                                          */\n"
     " pxor        %%mm7 , %%mm7;           /* clear mm7                                          */\n"
     "                                      /*                                                    */\n"
@@ -322,9 +329,10 @@
     " .endr                                /* end loop                                           */\n"
     "                                      /*                                                    */\n"
     " movq         %%mm0 , %0   ;          /* make mm0 available to gcc ...                      */\n"
+    " popl         %%ebx;                  /* restore ebx                                        */\n"
     :"=m" (a)     
     :"m" (frm), "m" (ref), "m" (W2)
-    :"%eax", "%ebx", "%ecx"
+    :"%eax", "%ecx"
     );
 #endif
   return (uint32_t)(a[0]+a[1]+a[2]+a[3]+a[4]+a[5]+a[6]+a[7]);
@@ -346,6 +354,7 @@
   int32_t halfwidth = denoiser.frame.w / 2;
   __asm__ __volatile__
     (
+    " pushl        %%ebx;                   /* save ebx                                           */\n"
     " pxor         %%mm0 , %%mm0;          /* clear mm0                                          */\n"
     " movl         %1    , %%eax;          /* load frameadress into eax                          */\n"
     " movl         %2    , %%ebx;          /* load frameadress into ebx                          */\n"
@@ -361,9 +370,10 @@
     " .endr                     ;          /*                                                    */\n"
     "                                      /*                                                    */\n"
     " movq         %%mm0 , %0   ;          /* make mm0 available to gcc ...                      */\n"
+    " popl         %%ebx;                  /* restore ebx                                        */\n"
     :"=m" (a)     
     :"m" (frm), "m" (ref), "m" (halfwidth)
-    :"%eax", "%ebx", "%ecx"
+    :"%eax", "%ecx"
     );
 #endif
   return a;
@@ -383,6 +393,7 @@
 #ifdef HAVE_ASM_MMX
   __asm__ __volatile__
     (
+    " pushl        %%ebx;                   /* save ebx                                           */\n"
     " pxor         %%mm0 , %%mm0;          /* clear mm0                                          */\n"
     " movl         %1    , %%eax;          /* load frameadress into eax                          */\n"
     " movl         %2    , %%ebx;          /* load frameadress into ebx                          */\n"
@@ -400,9 +411,10 @@
     " .endr                     ;          /*                                                    */\n"
     "                                      /*                                                    */\n"
     " movq         %%mm0 , %0   ;          /* make mm0 available to gcc ...                      */\n"
+    " popl         %%ebx;                  /* restore ebx                                        */\n"
     :"=m" (a)     
     :"m" (frm), "m" (ref), "m" (W2)
-    :"%eax", "%ebx", "%ecx"
+    :"%eax", "%ecx"
     );
 #endif
   return a;
@@ -446,6 +458,7 @@
 
   __asm__ __volatile__
       (
+	  " pushl        %%ebx;                   /* save ebx                                           */\n"
 	  " pxor         %%mm0 , %%mm0;          /* clear mm0                                          */"
 	  " movl         %1    , %%eax;          /* load frameadress into eax                          */"
 	  " movl         %2    , %%ebx;          /* load frameadress into ebx                          */"
@@ -473,9 +486,10 @@
 	  " .endr                     ;          /*                                                    */"
 	  "                                      /*                                                    */"
 	  " movq         %%mm0 , %0   ;          /* make mm0 available to gcc ...                      */"
+	  " popl         %%ebx;                  /* restore ebx                                        */\n"
 	  :"=m" (a)     
 	  :"m" (frm1),"m" (frm2), "m" (ref), "m" (denoiser.frame.w), "m" (*bit_mask)
-	  :"%eax", "%ebx", "%ecx", "%edx"
+	  :"%eax", "%ecx", "%edx"
 	  );
 #endif
   return a;
@@ -495,6 +509,7 @@
 #ifdef HAVE_ASM_MMX
   __asm__ __volatile__
       (
+	  " pushl        %%ebx;                   /* save ebx                                           */\n"
 	  " pxor         %%mm0 , %%mm0;          /* clear mm0                                          */\n"
 	  " movl         %1    , %%eax;          /* load frameadress into eax                          */\n"
 	  " movl         %2    , %%ebx;          /* load frameadress into ebx                          */\n"
@@ -514,9 +529,10 @@
 	  " .endr                     ;          /*                                                    */\n"
 	  "                                      /*                                                    */\n"
 	  " movq         %%mm0 , %0   ;          /* make mm0 available to gcc ...                      */\n"
+	  " popl         %%ebx;                  /* restore ebx                                        */\n"
 	  :"=m" (a)     
 	  :"m" (frm1),"m" (frm2), "m" (ref), "m" (denoiser.frame.w)
-	  :"%eax", "%ebx", "%ecx", "%edx"
+	  :"%eax", "%ecx", "%edx"
 	  );
 #endif
   return a;
