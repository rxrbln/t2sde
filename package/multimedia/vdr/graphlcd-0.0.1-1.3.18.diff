#!/bin/sh /usr/share/dpatch/dpatch-run
# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../vdr/graphlcd-0.0.1-1.3.18.diff
# Copyright (C) 2004 - 2005 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

## graphlcd-1.3.18 patch for graphlcd-0.1.1 by Thomas Günther <tom@toms-cafe.de>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Changes for VDR >= 1.3.18.

@DPATCH@
--- graphlcd-0.1.1/display.c	2004-10-06 20:29:53.000000000 +0200
+++ graphlcd-0.1.1/display.c	2005-01-21 01:44:31.000000000 +0100
@@ -377,7 +377,7 @@
           }
           if (GraphLCDSetup.ShowVolume && !update && iLastVolChange > 0)
           {
-            if (time_ms() - iLastVolChange > 2000)
+            if (timeMs.Elapsed() - iLastVolChange > 2000)
             {
               iLastVolChange = 0;
               update = true;
@@ -408,7 +408,7 @@
               if (!update 
                 && IsLogoActive() 
                 && logo->Cnt() > 1 
-                && (time_ms() - logo->LastChange() >= logo->Delay()))
+                && ((int)timeMs.Elapsed() - logo->LastChange() >= logo->Delay()))
                   update = true;
               
               // update Display every minute or due to an update
@@ -455,7 +455,7 @@
                   if (!update 
                     && IsLogoActive() 
                     && logo->Cnt() > 1 
-                    && (time_ms() - logo->LastChange() >= logo->Delay()))
+                    && ((int)timeMs.Elapsed() - logo->LastChange() >= logo->Delay()))
                       update = true;
 
                   // update Display every second or due to an update
@@ -586,7 +586,7 @@
       logo = logoList->GetLogo(currentChannelNr, strId, picType);
 #endif
       if (logo)
-        logo->First(time_ms());
+        logo->First(timeMs.Elapsed());
     }
     else
     {
@@ -1014,7 +1014,7 @@
         case eReplayAudioCD: logo = logoList->GetLogo(-6, "REPLAY-AUDIOCD",picType);break;
       }
       if (logo)
-        logo->First(time_ms());
+        logo->First(timeMs.Elapsed());
     }
     else
     {
@@ -1108,7 +1108,7 @@
 
   if (iLastVolChange != -1)
   {
-    iLastVolChange = time_ms();
+    iLastVolChange = timeMs.Elapsed();
     Update();
   }
   else
@@ -1233,7 +1233,7 @@
 
       strncpy(month, (char*)(tr("JanFebMarAprMayJunJulAugSepOctNovDec") + 3*tm->tm_mon), 3);
       month[3]=0;
-      snprintf(buffer, sizeof(buffer), "%s %2d.%s  %d:%02d", WeekDayName(tm->tm_wday), tm->tm_mday, month, tm->tm_hour, tm->tm_min);
+      snprintf(buffer, sizeof(buffer), "%s %2d.%s  %d:%02d", *WeekDayName(tm->tm_wday), tm->tm_mday, month, tm->tm_hour, tm->tm_min);
       TextLen = normalFont->WidthS(buffer);
 
       if(TextLen>max(FrameWidth-2*TEXT_OFFSET_X,1)) {
@@ -1350,7 +1350,7 @@
   {
     if(logo->Cnt() > 1)
     {
-      int t = time_ms();
+      int t = timeMs.Elapsed();
       if(t - logo->LastChange() >= logo->Delay())
       {
         if(!logo->Next(t))
@@ -1416,11 +1416,11 @@
             xPos -= symbols->WidthC('C')+1;
             pGraLib->Char(xPos, yPos, pLCDDevice->GetSizeX()-1, 'C', symbols, colorBlack, colorWhite);
           }
-          if(ch->Dpid1()) {
+          if(ch->Dpid(0)) {
             xPos -= symbols->WidthC('D')+1;
             pGraLib->Char(xPos, yPos, pLCDDevice->GetSizeX()-1, 'D', symbols, colorBlack, colorWhite);
           }
-          if(ch->Apid2()) {
+          if(ch->Apid(1)) {
             xPos -= symbols->WidthC('A')+1;
             pGraLib->Char(xPos, yPos, pLCDDevice->GetSizeX()-1, 'A', symbols, colorBlack, colorWhite);
           }
@@ -1465,7 +1465,7 @@
             if (iVolume == 0) {
               pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, 'M', symbols, colorBlack, colorWhite);
               yPos += symbols->HeightC('S')+SYMBOL_SPACE;
-            } else if (ch->Apid2()) {
+            } else if (ch->Apid(1)) {
               pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, 'A', symbols, colorBlack, colorWhite);
               yPos += symbols->HeightC('A')+SYMBOL_SPACE;
             } else {
@@ -1475,8 +1475,8 @@
         
             
             // blank or dolby
-            pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, ch->Dpid1() ?'D':' ', symbols, colorBlack, colorWhite);
-            yPos += symbols->HeightC(ch->Dpid1() ?'D':' ')+SYMBOL_SPACE;
+            pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, ch->Dpid(0) ?'D':' ', symbols, colorBlack, colorWhite);
+            yPos += symbols->HeightC(ch->Dpid(0) ?'D':' ')+SYMBOL_SPACE;
 
             // blank or teletext
             pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, ch->Tpid()  ?'T':' ', symbols, colorBlack, colorWhite);
@@ -1536,14 +1536,14 @@
             if(iVolume == 0) {
               pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, 'M', symbols, colorBlack, colorWhite);
               yPos += symbols->HeightC('S')+SYMBOL_SPACE;
-            } else if(ch->Apid2() && ch->Dpid1()) {
+            } else if(ch->Apid(1) && ch->Dpid(0)) {
               // if Apid2 and Dpid1 are set then use combined symbol
               pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, 'B', symbols, colorBlack, colorWhite);
               yPos += symbols->HeightC('B')+SYMBOL_SPACE;
-            } else if(ch->Apid2()) {
+            } else if(ch->Apid(1)) {
               pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, 'A', symbols, colorBlack, colorWhite);
               yPos += symbols->HeightC('A')+SYMBOL_SPACE;
-            } else if(ch->Dpid1()) {
+            } else if(ch->Dpid(0)) {
               pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, 'D', symbols, colorBlack, colorWhite);
               yPos += symbols->HeightC('D')+SYMBOL_SPACE;
             } else {
@@ -1586,8 +1586,8 @@
             xPos -= symbols->WidthC(ch->Tpid() ?'T':' ')+SYMBOL_SPACE;
 
             // blank or dolby
-            pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, ch->Dpid1()?'D':' ', symbols, colorBlack, colorWhite);
-            xPos -= symbols->WidthC(ch->Dpid1()?'D':' ')+SYMBOL_SPACE;
+            pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, ch->Dpid(0)?'D':' ', symbols, colorBlack, colorWhite);
+            xPos -= symbols->WidthC(ch->Dpid(0)?'D':' ')+SYMBOL_SPACE;
 
             if(pLCDDevice->SizeY() > MAXY_M) {  // with 128 pixel width only 3 symbols...
               // blank or crypt
@@ -1599,7 +1599,7 @@
             if (iVolume == 0) {
               pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, 'M', symbols, colorBlack, colorWhite);
               xPos -= symbols->WidthC('S')+SYMBOL_SPACE;
-            } else if (ch->Apid2()) {
+            } else if (ch->Apid(1)) {
               pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, 'A', symbols, colorBlack, colorWhite);
               xPos -= symbols->WidthC('A')+SYMBOL_SPACE;
             } else {
@@ -1622,13 +1622,13 @@
             }
 
             // dolby
-            if(ch->Dpid1()) {
+            if(ch->Dpid(0)) {
               xPos -= symbols->WidthC('D')+SYMBOL_SPACE;
               pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, 'D', symbols, colorBlack, colorWhite);
             }
 
             // 2chan
-            if(ch->Apid2()) {
+            if(ch->Apid(1)) {
               xPos -= symbols->WidthC('A')+SYMBOL_SPACE;
               pGraLib->Char(xPos, yPos, pLCDDevice->SizeX()-1, 'A', symbols, colorBlack, colorWhite);
             }
@@ -2283,7 +2283,7 @@
 
   if (GraphLCDSetup.ShowVolume) {
     if (iLastVolChange > 0) {
-      if (time_ms() - iLastVolChange < 2000) {
+      if (timeMs.Elapsed() - iLastVolChange < 2000) {
         RecH = (pLCDDevice->SizeY() / 5) + 2 * FRAME_SPACE_YB + 4 * FRAME_SPACE_YB;
         RecW = pLCDDevice->SizeX() / 2;
         pGraLib->RoundRectangle((pLCDDevice->SizeX()-RecW)/2,       // draw frame
--- graphlcd-0.1.1/display.h	2004-04-27 21:14:08.000000000 +0200
+++ graphlcd-0.1.1/display.h	2005-01-21 01:46:47.000000000 +0100
@@ -42,6 +42,7 @@
 
 #include <vdr/thread.h>
 #include <vdr/player.h>
+#include <vdr/tools.h>
 
 
 #define LCDMAXCARDS 4
@@ -97,6 +98,7 @@
   ThreadState State;
   ThreadState LastState;
 
+  cTimeMs       timeMs;
   time_t        CurrTime,
                 LastTime,
                 LastTimeCheckSym,
--- graphlcd-0.1.1/widgets.c	2004-04-06 19:06:38.000000000 +0200
+++ graphlcd-0.1.1/widgets.c	2005-01-21 01:44:31.000000000 +0100
@@ -25,7 +25,7 @@
 bool cScroller::NeedsUpdate()
 {
   if (active && 
-      time_ms() - lastUpdate > GraphLCDSetup.ScrollTime)
+      (int)timeMs.Elapsed() - lastUpdate > GraphLCDSetup.ScrollTime)
   {
     update = true;
     return true;
@@ -48,7 +48,7 @@
   else
     active = false;
   update = false;
-  lastUpdate = time_ms() + 2000;
+  lastUpdate = timeMs.Elapsed() + 2000;
 }
 
 void cScroller::Draw(cGraphLCDGraphLib * lib)
@@ -81,7 +81,7 @@
         }
       }
       position += increment;
-      lastUpdate = time_ms();
+      lastUpdate = timeMs.Elapsed();
       update = false;
     }
     lib->Text(x, y, xmax, text, font, true, colorBlack, colorWhite, position);
--- graphlcd-0.1.1/widgets.h	2004-04-06 15:18:09.000000000 +0200
+++ graphlcd-0.1.1/widgets.h	2005-01-21 01:48:40.000000000 +0100
@@ -34,6 +34,8 @@
 #include "font.h"
 #include "graphlib.h"
 
+#include <vdr/tools.h>
+
 class cScroller
 {
 private:
@@ -47,6 +49,7 @@
   int position;
   int increment;
   time_t lastUpdate;
+  cTimeMs timeMs;
 public:
   cScroller();
   const string & Text() const { return text; }
