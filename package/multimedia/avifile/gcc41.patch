# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../avifile/gcc41.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

--- avifile-0.6/lib/aviplay/aviplay_impl.h.vanilla	2006-03-04 23:36:51.209437000 +0100
+++ avifile-0.6/lib/aviplay/aviplay_impl.h	2006-03-04 23:36:58.897917500 +0100
@@ -136,7 +136,7 @@
     void createAudioRenderer();
     int restartVideoStreaming(const char* codec = 0);
 
-    mutable int AviPlayer::propertyRead[LAST_PROPERTY]; // have we read at least once from Registry::
+    mutable int propertyRead[LAST_PROPERTY]; // have we read at least once from Registry::
 
     avm::vector<IVideoRenderer*> m_VideoRenderers; // we could draw image to more places
     IAudioRenderer* m_pAudioRenderer; // not sure about the sound - this will be
--- avifile-0.6/plugins/libaudiodec/audiodecoder.cpp.vanilla	2006-03-04 23:39:15.462452250 +0100
+++ avifile-0.6/plugins/libaudiodec/audiodecoder.cpp	2006-03-04 23:39:23.302942250 +0100
@@ -114,7 +114,7 @@
 class MSGSM_Decoder : public IAudioDecoder
 {
 public:
-    MSGSM_Decoder::MSGSM_Decoder(const CodecInfo& info, const WAVEFORMATEX* wf)
+    MSGSM_Decoder(const CodecInfo& info, const WAVEFORMATEX* wf)
 	:IAudioDecoder(info, wf)
     {
 	GSM_Init();
--- avifile-0.6/plugins/libmp3lame_audioenc/mp3encoder.cpp.vanilla	2006-03-04 23:46:09.756344000 +0100
+++ avifile-0.6/plugins/libmp3lame_audioenc/mp3encoder.cpp	2006-03-04 23:46:24.041236750 +0100
@@ -30,7 +30,7 @@
 	short  nCodecDelay;
     };
 public:
-    MP3Encoder::MP3Encoder(const CodecInfo& info, const WAVEFORMATEX* format)
+    MP3Encoder(const CodecInfo& info, const WAVEFORMATEX* format)
 	:IAudioEncoder(info)
     {
 	in_fmt=*format;
--- avifile-0.6/plugins/libmp3lamebin_audioenc/lameencoder.cpp.vanilla	2006-03-04 23:44:06.212623000 +0100
+++ avifile-0.6/plugins/libmp3lamebin_audioenc/lameencoder.cpp	2006-03-04 23:44:34.766407500 +0100
@@ -71,14 +71,14 @@
     int CDECL (*p_lame_set_quality)(lame_global_flags *, int);
 
 public:
-    LameEncoder::LameEncoder(const CodecInfo& info, const WAVEFORMATEX* format)
+    LameEncoder(const CodecInfo& info, const WAVEFORMATEX* format)
 	:IAudioEncoder(info), handle(0)
     {
         m_Error[0] = 0;
 	in_fmt = *format;
     }
 
-    int LameEncoder::init()
+    int init()
     {
 	handle = dlopen(mp3lamename, RTLD_LAZY);
 
--- avifile-0.6/plugins/libmpeg_audiodec/mpegsound.h.vanilla	2006-03-04 23:47:10.168119500 +0100
+++ avifile-0.6/plugins/libmpeg_audiodec/mpegsound.h	2006-03-04 23:47:39.009922000 +0100
@@ -198,14 +198,14 @@
     void forward(int bits) {bitindex+=bits;};
     int getbits(int bits);
 
-    int Mpegbitwindow::getbit(void)
+    int getbit(void)
     {
 	//  register int r=(buffer[(bitindex>>3)&(WINDOWSIZE-1)]>>(7-(bitindex&7)))&1;
 	register int r=(buffer[bitindex>>3]>>(7-(bitindex&7)))&1;
 	bitindex++;
 	return r;
     }
-    int Mpegbitwindow::getbits9(int bits)
+    int getbits9(int bits)
     {
 	register unsigned short a;
 
@@ -481,9 +481,9 @@
 #define MPEGNOINSTRUMENTFUNCTION
     Mpegbitwindow bitwindow;
 
-    int Mpegtoraw::wgetbit(void) MPEGNOINSTRUMENTFUNCTION   { return bitwindow.getbit(); }
-    int Mpegtoraw::wgetbits9(int bits) MPEGNOINSTRUMENTFUNCTION { return bitwindow.getbits9(bits); }
-    int Mpegtoraw::wgetbits (int bits) MPEGNOINSTRUMENTFUNCTION { return bitwindow.getbits (bits); }
+    int wgetbit(void) MPEGNOINSTRUMENTFUNCTION   { return bitwindow.getbit(); }
+    int wgetbits9(int bits) MPEGNOINSTRUMENTFUNCTION { return bitwindow.getbits9(bits); }
+    int wgetbits (int bits) MPEGNOINSTRUMENTFUNCTION { return bitwindow.getbits (bits); }
 
     /*************************************/
     /* Decoding functions for each layer */
--- avifile-0.6/samples/misc/avicat.cpp.vanilla	2006-03-04 23:48:28.180995000 +0100
+++ avifile-0.6/samples/misc/avicat.cpp	2006-03-04 23:48:52.846536500 +0100
@@ -140,8 +140,8 @@
     avm::IVideoEncoder *vidEnc;
     void copyAudioFrames(int, int, bool);
     void createVideoEncoder(fourcc_t);
-    void AviCutter::writeVideoFrame(avm::CImage *image);
-    void AviCutter::copyVideoFrame();
+    void writeVideoFrame(avm::CImage *image);
+    void copyVideoFrame();
 
 public:
     AviCutter(avm::IWriteFile* outF,
