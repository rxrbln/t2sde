# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../mplayer/x86_64.patch
# Copyright (C) 2004 - 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---
diff -ur MPlayer-1.0pre7/libavcodec/libpostproc/postprocess_template.c MPlayer-1.0pre8/libavcodec/libpostproc/postprocess_template.c
--- MPlayer-1.0pre7/libavcodec/libpostproc/postprocess_template.c	2005-07-20 00:25:49.000000000 +0900
+++ MPlayer-1.0pre8/libavcodec/libpostproc/postprocess_template.c	2005-07-20 00:25:23.000000000 +0900
@@ -3349,6 +3349,9 @@
 static void RENAME(postProcess)(uint8_t src[], int srcStride, uint8_t dst[], int dstStride, int width, int height,
 	QP_STORE_T QPs[], int QPStride, int isColor, PPContext *c2)
 {
+	long srcStrideLong = (long)srcStride;
+	long dstStrideLong = (long)dstStride;
+
 	PPContext __attribute__((aligned(8))) c= *c2; //copy to stack for faster access
 	int x,y;
 #ifdef COMPILE_TIME_MODE
@@ -3398,6 +3401,7 @@
 	else copyAhead=8;
 
 	copyAhead-= 8;
+	long copyAheadLong = (long)copyAhead;
 
 	if(!isColor)
 	{
@@ -3480,7 +3484,7 @@
 			prefetcht0(dstBlock + (((x>>2)&6) + 5)*dstStride + 32);
 			prefetcht0(dstBlock + (((x>>2)&6) + 6)*dstStride + 32);
 */
-
+			long xLong = (long)x;
 			asm(
 				"mov %4, %%"REG_a"		\n\t"
 				"shr $2, %%"REG_a"		\n\t"
@@ -3495,8 +3499,8 @@
 				"add %3, %%"REG_d"		\n\t"
 				"prefetchnta 32(%%"REG_a", %0)	\n\t"
 				"prefetcht0 32(%%"REG_d", %2)	\n\t"
-			:: "r" (srcBlock), "r" ((long)srcStride), "r" (dstBlock), "r" ((long)dstStride),
-			"m" ((long)x), "m" ((long)copyAhead)
+			:: "r" (srcBlock), "r" (srcStrideLong), "r" (dstBlock), "r" (dstStrideLong),
+			"m" (xLong), "m" (copyAheadLong)
 			: "%"REG_a, "%"REG_d
 			);
 
@@ -3588,6 +3592,8 @@
 		// with the L1 Cache of the P4 ... or only a few blocks at a time or soemthing
 		for(x=0; x<width; x+=BLOCK_SIZE)
 		{
+			long xLong = (long)x;
+
 			const int stride= dstStride;
 #ifdef HAVE_MMX
 			uint8_t *tmpXchg;
@@ -3641,8 +3647,8 @@
 				"add %3, %%"REG_d"		\n\t"
 				"prefetchnta 32(%%"REG_a", %0)	\n\t"
 				"prefetcht0 32(%%"REG_d", %2)	\n\t"
-			:: "r" (srcBlock), "r" ((long)srcStride), "r" (dstBlock), "r" ((long)dstStride),
-			"m" ((long)x), "m" ((long)copyAhead)
+			:: "r" (srcBlock), "r" (srcStrideLong), "r" (dstBlock), "r" (dstStrideLong),
+			"m" (xLong), "m" (copyAheadLong)
 			: "%"REG_a, "%"REG_d
 			);
 
diff -ur MPlayer-1.0pre7/postproc/swscale_template.c MPlayer-1.0pre8/postproc/swscale_template.c
--- MPlayer-1.0pre7/postproc/swscale_template.c	2005-07-20 00:25:49.000000000 +0900
+++ MPlayer-1.0pre8/postproc/swscale_template.c	2005-07-20 00:17:36.000000000 +0900
@@ -759,20 +759,23 @@
 				    int16_t *chrFilter, int16_t **chrSrc, int chrFilterSize,
 				    uint8_t *dest, uint8_t *uDest, uint8_t *vDest, int dstW, int chrDstW)
 {
+	long chrDstWLong = (long)chrDstW;
+	long dstWLong = (long)dstWLong;
+	
 #ifdef HAVE_MMX
 	if(uDest != NULL)
 	{
 		asm volatile(
 				YSCALEYUV2YV12X(0, CHR_MMX_FILTER_OFFSET)
 				:: "r" (&c->redDither),
-				"r" (uDest), "m" ((long)chrDstW)
+				"r" (uDest), "m" (chrDstWLong)
 				: "%"REG_a, "%"REG_d, "%"REG_S
 			);
 
 		asm volatile(
 				YSCALEYUV2YV12X(4096, CHR_MMX_FILTER_OFFSET)
 				:: "r" (&c->redDither),
-				"r" (vDest), "m" ((long)chrDstW)
+				"r" (vDest), "m" (chrDstWLong)
 				: "%"REG_a, "%"REG_d, "%"REG_S
 			);
 	}
@@ -780,7 +783,7 @@
 	asm volatile(
 			YSCALEYUV2YV12X(0, LUM_MMX_FILTER_OFFSET)
 			:: "r" (&c->redDither),
-			   "r" (dest), "m" ((long)dstW)
+			   "r" (dest), "m" (dstWLong)
 			: "%"REG_a, "%"REG_d, "%"REG_S
 		);
 #else
@@ -808,20 +811,22 @@
 static inline void RENAME(yuv2yuv1)(int16_t *lumSrc, int16_t *chrSrc,
 				    uint8_t *dest, uint8_t *uDest, uint8_t *vDest, int dstW, int chrDstW)
 {
+	long chrDstWLong = (long)chrDstW;
+	long dstWLong = (long)dstW;
 #ifdef HAVE_MMX
 	if(uDest != NULL)
 	{
 		asm volatile(
 				YSCALEYUV2YV121
 				:: "r" (chrSrc + chrDstW), "r" (uDest + chrDstW),
-				"g" ((long)-chrDstW)
+				"g" (-chrDstWLong)
 				: "%"REG_a
 			);
 
 		asm volatile(
 				YSCALEYUV2YV121
 				:: "r" (chrSrc + 2048 + chrDstW), "r" (vDest + chrDstW),
-				"g" ((long)-chrDstW)
+				"g" (-chrDstWLong)
 				: "%"REG_a
 			);
 	}
@@ -829,7 +834,7 @@
 	asm volatile(
 		YSCALEYUV2YV121
 		:: "r" (lumSrc + dstW), "r" (dest + dstW),
-		"g" ((long)-dstW)
+		"g" (-dstWLong)
 		: "%"REG_a
 	);
 #else
@@ -2520,6 +2525,10 @@
 #endif
 	  int xInc_hi=xInc>>16;
 	  int xInc_lo=xInc&0xffff;
+
+	long xInc_hi_long = (long)xInc_hi;
+	long dstWidthLong = (long)dstWidth;
+
 	asm volatile(
 		"xor %%"REG_a", %%"REG_a"	\n\t" // i
 		"xor %%"REG_b", %%"REG_b"		\n\t" // xx
@@ -2553,7 +2562,7 @@
 		"cmp %2, %%"REG_a"		\n\t"
 		" jb 1b				\n\t"
 
-		:: "m" (src1), "m" (dst), "m" ((long)dstWidth), "m" ((long)(xInc_hi)), "m" ((xInc_lo)),
+		:: "m" (src1), "m" (dst), "m" (dstWidthLong), "m" ((xInc_hi_long)), "m" ((xInc_lo)),
 		"r" (src2)
 		: "%"REG_a, "%"REG_b, "%ecx", "%"REG_D, "%esi"
 		);
