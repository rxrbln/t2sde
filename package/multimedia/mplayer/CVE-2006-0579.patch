# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../mplayer/CVE-2006-0579.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

diff -Nur MPlayer-1.0pre7try2-orig/libmpdemux/demux_asf.c MPlayer-1.0pre7try2/libmpdemux/demux_asf.c
--- MPlayer-1.0pre7try2-orig/libmpdemux/demux_asf.c	2005-01-15 16:11:44.000000000 +0000
+++ MPlayer-1.0pre7try2/libmpdemux/demux_asf.c	2006-06-01 16:50:57.738471750 +0000
@@ -40,9 +40,9 @@
 
 // based on asf file-format doc by Eugene [http://divx.euro.ru]
 
-static void asf_descrambling(unsigned char *src,int len){
+static void asf_descrambling(unsigned char **src,int len){
   unsigned char *dst=malloc(len);
-  unsigned char *s2=src;
+  unsigned char *s2=*src;
   int i=0,x,y;
   while(len-i>=asf_scrambling_h*asf_scrambling_w*asf_scrambling_b){
 //    mp_msg(MSGT_DEMUX,MSGL_DBG4,"descrambling! (w=%d  b=%d)\n",w,asf_scrambling_b);
@@ -55,10 +55,11 @@
 	s2+=asf_scrambling_h*asf_scrambling_w*asf_scrambling_b;
   }
   //if(i<len) memcpy(dst+i,src+i,len-i);
-  memcpy(src,dst,i);
-  free(dst);
+  free(*src);
+  *src = dst;
 }
 
+#define FF_INPUT_BUFFER_PADDING_SIZE 8
 
 static int demux_asf_read_packet(demuxer_t *demux,unsigned char *data,int len,int id,int seq,unsigned long time,unsigned short dur,int offs,int keyframe){
   demux_stream_t *ds=NULL;
@@ -96,15 +97,16 @@
         // closed segment, finalize packet:
 		if(ds==demux->audio)
 		  if(asf_scrambling_h>1 && asf_scrambling_w>1)
-		    asf_descrambling(ds->asf_packet->buffer,ds->asf_packet->len);
+		    asf_descrambling(&ds->asf_packet->buffer,ds->asf_packet->len);
         ds_add_packet(ds,ds->asf_packet);
         ds->asf_packet=NULL;
       } else {
         // append data to it!
         demux_packet_t* dp=ds->asf_packet;
         if(dp->len!=offs && offs!=-1) mp_msg(MSGT_DEMUX,MSGL_V,"warning! fragment.len=%d BUT next fragment offset=%d  \n",dp->len,offs);
-        dp->buffer=realloc(dp->buffer,dp->len+len);
+        dp->buffer=realloc(dp->buffer,dp->len+len+FF_INPUT_BUFFER_PADDING_SIZE);
         memcpy(dp->buffer+dp->len,data,len);
+        memset(dp->buffer+dp->len+len, 0, FF_INPUT_BUFFER_PADDING_SIZE);
         mp_dbg(MSGT_DEMUX,MSGL_DBG4,"data appended! %d+%d\n",dp->len,len);
         dp->len+=len;
         // we are ready now.
diff -Nur MPlayer-1.0pre7try2-orig/libmpdemux/demuxer.h MPlayer-1.0pre7try2/libmpdemux/demuxer.h
--- MPlayer-1.0pre7try2-orig/libmpdemux/demuxer.h	2005-04-03 14:08:26.000000000 +0000
+++ MPlayer-1.0pre7try2/libmpdemux/demuxer.h	2006-06-01 16:50:57.754472750 +0000
@@ -155,17 +155,19 @@
   dp->flags=0;
   dp->refcount=1;
   dp->master=NULL;
-  dp->buffer=len?(unsigned char*)malloc(len+8):NULL;
-  if(len) memset(dp->buffer+len,0,8);
+  dp->buffer=NULL;
+  if (len > 0 && (dp->buffer = (unsigned char *)malloc(len + 8)))
+    memset(dp->buffer + len, 0, 8);
+  else
+    dp->len = 0;
   return dp;
 }
 
 inline static void resize_demux_packet(demux_packet_t* dp, int len)
 {
-  if(len)
+  if(len > 0)
   {
      dp->buffer=(unsigned char *)realloc(dp->buffer,len+8);
-     memset(dp->buffer+len,0,8);
   }
   else
   {
