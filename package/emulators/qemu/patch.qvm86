Index: kqemu.c
===================================================================
RCS file: /cvsroot/qemu/qemu/kqemu.c,v
retrieving revision 1.4
diff -u -p -r1.4 kqemu.c
--- ./kqemu.c	24 Apr 2005 18:03:37 -0000	1.4
+++ ./kqemu.c	26 Apr 2005 21:45:05 -0000
@@ -43,7 +43,7 @@
 
 #include <unistd.h>
 #include <fcntl.h>
-#include "kqemu/kqemu.h"
+#include "qvm86/kqemu.h"
 
 /* compatibility stuff */
 #ifndef KQEMU_RET_SYSCALL
@@ -51,9 +51,9 @@
 #endif
 
 #ifdef _WIN32
-#define KQEMU_DEVICE "\\\\.\\kqemu"
+#define KQEMU_DEVICE "\\\\.\\qvm86"
 #else
-#define KQEMU_DEVICE "/dev/kqemu"
+#define KQEMU_DEVICE "/dev/qvm86"
 #endif
 
 #ifdef _WIN32
 
Index: configure
===================================================================
RCS file: /cvsroot/qemu/qemu/configure,v
retrieving revision 1.65
diff -u -p -r1.65 configure
--- ./configure   26 Apr 2005 20:46:24 -0000      1.65
+++ ./configure	20 Dec 2005 08:07:16 +0100
@@ -85,6 +85,8 @@
 fmod_inc=""
 linux="no"
 kqemu="no"
+qvm86="no"
+kernel_module="no"
 kernel_path=""
 cocoa="no"
 check_gfx="yes"
@@ -99,12 +101,17 @@
 ;;
 MINGW32*)
 mingw32="yes"
+if [ "$cpu" = "i386" ] ; then
+    kqemu="yes"
+    qvm86="yes"
+fi
 ;;
 FreeBSD)
 bsd="yes"
 oss="yes"
 if [ "$cpu" = "i386" -o "$cpu" = "x86_64" ] ; then
     kqemu="yes"
+    qvm86="yes"
 fi
 ;;
 NetBSD)
@@ -124,6 +131,7 @@
 linux="yes"
 if [ "$cpu" = "i386" -o "$cpu" = "x86_64" ] ; then
     kqemu="yes"
+    qvm86="yes"
 fi
 ;;
 esac
@@ -197,6 +205,8 @@
   ;;
   --disable-kqemu) kqemu="no"
   ;;
+  --disable-qvm86) qvm86="no"
+  ;;
   --kernel-path=*) kernel_path=${opt#--kernel-path=}
   ;;
   --enable-cocoa) cocoa="yes" ; coreaudio="yes" ; sdl="no"
@@ -366,6 +376,7 @@
 echo ""
 echo "kqemu kernel acceleration support:"
 echo "  --disable-kqemu          disable kqemu build"
+echo "  --disable-qvm86          disable qvm86 build"
 echo "  --kernel-path=PATH       set the kernel path (configure probes it)"
 echo ""
 echo "Advanced options (experts only):"
@@ -414,39 +425,23 @@
     fi
 fi
 
-# Linux specific kqemu configuration
-if test $kqemu = "yes" -a $linux = "yes" ; then
-# find the kernel path
-if test -z "$kernel_path" ; then
-kernel_version=`uname -r`
-kernel_path="/lib/modules/$kernel_version/build"
-if test '!' -d "$kernel_path/include" ; then
-    kernel_path="/usr/src/linux"
-    if test '!' -d "$kernel_path/include" ; then
-        echo "Could not find kernel includes in /lib/modules or /usr/src/linux - cannot build the kqemu module"
-        kqemu="no"
+# qvm86 support
+if test $qvm86 = "yes" ; then
+    # test if the source code is installed
+    if test '!' -f "qvm86/Makefile" ; then
+        qvm86="no"
     fi
 fi
-fi
-
-if test $kqemu = "yes" ; then
 
-# test that the kernel config is present
-if test '!' -f "$kernel_path/Makefile" ; then
-    echo "No Makefile file present in $kernel_path - kqemu cannot be built"
-    kqemu="no"
+if test $kqemu = "yes" -o $qvm86 = "yes" ; then
+  kernel_module=yes
 fi
 
-# find build system (2.6 or legacy)
-kbuild26="yes"
-if grep -q "PATCHLEVEL = 4" $kernel_path/Makefile ; then
-kbuild26="no"
+if test ! $kernel_module = "yes"; then
+  kqemu="no"
+  qvm86="no"
 fi
 
-fi # kqemu
-
-fi # kqemu and linux
-
 
 echo "Install prefix    $prefix"
 echo "BIOS directory    $datadir"
@@ -489,9 +484,10 @@
 fi
 echo ""
 echo "kqemu support     $kqemu"
-if test $kqemu = "yes" -a $linux = "yes" ; then
+echo "qvm86 support	$qvm86"
+if test $kernel_module = "yes" -a $linux = "yes" ; then
 echo ""
-echo "KQEMU Linux module configuration:"
+echo "Linux kernel module configuration:"
 echo "kernel sources    $kernel_path"
 echo -n "kbuild type       "
 if test $kbuild26 = "yes"; then
@@ -502,7 +498,10 @@
 fi
 
 if test $sdl_too_old = "yes"; then
-echo "-> Your SDL version is too old - please upgrade to have SDL support"
+echo "-> Your SDL version is too old - please upgrade to have FFplay/SDL support"
+fi
+if test "$sdl" = "no"; then
+  echo "WARNING: SDL not found.  qemu will not have graphical output"
 fi
 #if test "$sdl_static" = "no"; then
 #  echo "WARNING: cannot compile statically with SDL - qemu-fast won't have a graphical output"
@@ -639,12 +638,15 @@
 
 if test $kqemu = "yes" ; then
   echo "CONFIG_KQEMU=yes" >> $config_mak
-  if test $linux = "yes" ; then
+fi
+if test $qvm86 = "yes" ; then
+  echo "CONFIG_QVM86=yes" >> $config_mak
+fi
+if test $kernel_module = "yes" -a $linux = "yes" ; then
     echo "KERNEL_PATH=$kernel_path" >> $config_mak
     if test $kbuild26 = "yes" ; then
       echo "CONFIG_KBUILD26=yes" >> $config_mak
     fi
-  fi
 fi
 echo "SRC_PATH=$source_path" >> $config_mak
 echo "TARGET_DIRS=$target_list" >> $config_mak
@@ -713,7 +715,7 @@
   echo "TARGET_ARCH=i386" >> $config_mak
   echo "#define TARGET_ARCH \"i386\"" >> $config_h
   echo "#define TARGET_I386 1" >> $config_h
-  if test $kqemu = "yes" -a "$target_softmmu" = "yes" -a $cpu = "i386" ; then
+  if test $kernel_module = "yes" -a "$target_softmmu" = "yes" -a $cpu = "i386" ; then
     echo "#define USE_KQEMU 1" >> $config_h
   fi
 elif test "$target_cpu" = "arm" -o "$target_cpu" = "armeb" ; then
2005-08-11  Gwenole Beauchesne  <gbeauchesne@mandriva.com>

	* Merge more bits from patch.qvm86 but make them qvm86
	specific. i.e. try to run-time detect qvm86 / kqemu and only
	disable unsupported cpu features bits in the former case.

--- qemu-0.8.0/kqemu.c.qvm86-colateral	2005-08-11 13:26:36.000000000 +0200
+++ qemu-0.8.0/kqemu.c	2005-08-11 13:50:19.000000000 +0200
@@ -124,6 +124,12 @@ static void kqemu_update_cpuid(CPUState 
     /* XXX: we could update more of the target CPUID state so that the
        non accelerated code sees exactly the same CPU features as the
        accelerated code */
+#if defined TARGET_I386 && ! defined TARGET_X86_64
+    if (qemu_accelerator_type() == QEMU_ACCEL_QVM86) {
+        /* Other flags not supported by qvm86 */
+        env->cpuid_features &= ~(CPUID_PAT | CPUID_PAE | CPUID_SEP);
+    }
+#endif
 }
 
 int kqemu_init(CPUState *env)
@@ -188,7 +194,8 @@ int kqemu_init(CPUState *env)
     kqemu_update_cpuid(env);
     env->kqemu_enabled = 1;
     nb_pages_to_flush = 0;
     nb_ram_pages_to_update = 0;
+    printf ("QEMU acceleration layer enabled (%s)\n", qemu_accelerator_type() == QEMU_ACCEL_QVM86 ? "qvm86" : "kqemu");
     return 0;
 }
 
--- qemu-0.8.0/osdep.c.qvm86-colateral	2005-07-24 20:52:08.000000000 +0200
+++ qemu-0.8.0/osdep.c	2005-08-11 13:48:17.000000000 +0200
@@ -321,14 +321,27 @@ void qemu_vfree(void *ptr)
     VirtualFree(ptr, 0, MEM_RELEASE);
 }
 
-#elif defined(USE_KQEMU)
+#else
 
+static inline int use_kqemu_vmalloc(void)
+{
+#if defined(USE_KQEMU)
+    extern int kqemu_allowed;
+    return  kqemu_allowed && (qemu_accelerator_type() == QEMU_ACCEL_KQEMU);
+#else
+    return 0;
+#endif
+}
+
+#if defined(USE_KQEMU)
 #include <sys/vfs.h>
 #include <sys/mman.h>
 #include <fcntl.h>
+#endif
 
-void *qemu_vmalloc(size_t size)
+static void *kqemu_vmalloc(size_t size)
 {
+#if defined(USE_KQEMU)
     static int phys_ram_fd = -1;
     static int phys_ram_size = 0;
     const char *tmpdir;
@@ -401,18 +413,23 @@ void *qemu_vmalloc(size_t size)
     }
     phys_ram_size += size;
     return ptr;
+#else
+    abort(); /* XXX this cannot happen */
+    return NULL;
+#endif
 }
 
-void qemu_vfree(void *ptr)
+static void kqemu_vfree(void *ptr)
 {
     /* may be useful some day, but currently we do not need to free */
 }
 
-#else
-
 /* alloc shared memory pages */
 void *qemu_vmalloc(size_t size)
 {
+    if (use_kqemu_vmalloc())
+	return kqemu_vmalloc(size);
+
 #ifdef _BSD
     return valloc(size);
 #else
@@ -422,7 +439,10 @@ void *qemu_vmalloc(size_t size)
 
 void qemu_vfree(void *ptr)
 {
-    free(ptr);
+    if (use_kqemu_vmalloc())
+	kqemu_vfree(ptr);
+    else
+	free(ptr);
 }
 
 #endif
@@ -626,3 +646,19 @@ void qemu_printf(const char *fmt, ...)
     va_end(ap);
 }
 
+/* XXX this is specific to Mandriva Linux and I don't care of other systems */
+int qemu_accelerator_type(void)
+{
+    static int type = -1;
+    if (type < 0) {
+#if defined(USE_KQEMU) && !defined(_WIN32)
+	if (access("/dev/kqemu", R_OK | W_OK) == 0)
+	    type = QEMU_ACCEL_KQEMU;
+	else if (access("/dev/qvm86", R_OK | W_OK) == 0)
+	    type = QEMU_ACCEL_QVM86;
+	else
+#endif
+	    type = QEMU_ACCEL_NONE;
+    }
+    return type;
+}
--- qemu-0.8.0/monitor.c.qvm86-colateral	2005-12-19 23:51:53.000000000 +0100
+++ qemu-0.8.0/monitor.c	2005-12-20 08:28:03.000000000 +0100
@@ -960,7 +960,7 @@
         return;
     }
     val = env->kqemu_enabled;
-    term_printf("kqemu is %s\n", val ? "enabled" : "disabled");
+    term_printf("kqemu is %s (%s)\n", val ? "enabled" : "disabled", qemu_accelerator_type() == QEMU_ACCEL_QVM86 ? "qvm86" : "kqemu");
 #else
     term_printf("kqemu support is not compiled\n");
 #endif
--- qemu-0.8.0/osdep.h.qvm86-colateral	2005-07-24 20:52:08.000000000 +0200
+++ qemu-0.8.0/osdep.h	2005-08-11 13:38:05.000000000 +0200
@@ -17,6 +17,15 @@ void qemu_vfree(void *ptr);
 
 void *get_mmap_addr(unsigned long size);
 
+/* QEMU accelerator module type */
+int qemu_accelerator_type(void);
+
+enum {
+  QEMU_ACCEL_NONE,
+  QEMU_ACCEL_KQEMU,
+  QEMU_ACCEL_QVM86,
+};
+
 /* specific kludges for OS compatibility (should be moved elsewhere) */
 #if defined(__i386__) && !defined(CONFIG_SOFTMMU) && !defined(CONFIG_USER_ONLY)
 
--- ./qvm86/kqemu.h.vanilla	2006-01-05 18:24:59.000000000 +0100
+++ ./qvm86/kqemu.h	2005-10-11 16:00:18.000000000 +0200
@@ -1,23 +1,46 @@
+/*
+ * KQEMU header
+ * 
+ * Copyright (c) 2004-2005 Fabrice Bellard
+ * 
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+ * THE SOFTWARE.
+ */
 #ifndef KQEMU_H
 #define KQEMU_H
 
-#ifdef _WIN32
-#define KQEMU_VERSION 0x010101
-#else
-#define KQEMU_VERSION 0x010000
-#endif
+#define KQEMU_VERSION 0x010200
 
 struct kqemu_segment_cache {
     uint32_t selector;
-    uint32_t base;
+    unsigned long base;
     uint32_t limit;
     uint32_t flags;
 };
 
 struct kqemu_cpu_state {
-    uint32_t regs[8];
-    uint32_t eip;
-    uint32_t eflags;
+#ifdef __x86_64__
+    unsigned long regs[16];
+#else
+    unsigned long regs[8];
+#endif
+    unsigned long eip;
+    unsigned long eflags;
 
     uint32_t dummy0, dummy1, dumm2, dummy3, dummy4;
 
@@ -27,31 +50,38 @@
     struct kqemu_segment_cache gdt; /* only base and limit are used */
     struct kqemu_segment_cache idt; /* only base and limit are used */
 
-    uint32_t cr0;
-    uint32_t dumm5;
-    uint32_t cr2;
-    uint32_t cr3;
-    uint32_t cr4;
+    unsigned long cr0;
+    unsigned long dummy5;
+    unsigned long cr2;
+    unsigned long cr3;
+    unsigned long cr4;
     uint32_t a20_mask;
 
-    uint32_t dr0;
-    uint32_t dr1;
-    uint32_t dr2;
-    uint32_t dr3;
-    uint32_t dr6;
-    uint32_t dr7;
+    uint64_t efer __attribute__((aligned(8)));
 
-    int cpl; /* currently only 3 */
+    unsigned long dr0;
+    unsigned long dr1;
+    unsigned long dr2;
+    unsigned long dr3;
+    unsigned long dr6;
+    unsigned long dr7;
+
+    uint8_t cpl;
+    uint8_t user_only;
 
     uint32_t error_code; /* error_code when exiting with an exception */
-    uint32_t next_eip; /* next eip value when exiting with an interrupt */
+    unsigned long next_eip; /* next eip value when exiting with an interrupt */
     unsigned int nb_pages_to_flush; /* number of pages to flush,
                                        KQEMU_FLUSH_ALL means full flush */
 #define KQEMU_MAX_PAGES_TO_FLUSH 512
 #define KQEMU_FLUSH_ALL (KQEMU_MAX_PAGES_TO_FLUSH + 1)
-#ifdef _WIN32
-    uint32_t retval;
-#endif
+
+    long retval;
+
+    /* number of ram_dirty entries to update */
+    unsigned int nb_ram_pages_to_update; 
+#define KQEMU_MAX_RAM_PAGES_TO_UPDATE 512
+#define KQEMU_RAM_PAGES_UPDATE_ALL (KQEMU_MAX_RAM_PAGES_TO_UPDATE + 1)
 };
 
 struct kqemu_init {
@@ -60,6 +90,7 @@
     uint8_t *ram_dirty; /* must be page aligned */
     uint32_t **phys_to_ram_map; /* must be page aligned */
     unsigned long *pages_to_flush; /* must be page aligned */
+    unsigned long *ram_pages_to_update; /* must be page aligned */
 };
 
 #define KQEMU_RET_ABORT    (-1)
@@ -68,6 +99,7 @@
 #define KQEMU_RET_SOFTMMU   0x0200 /* emulation needed (I/O or
                                       unsupported INSN) */
 #define KQEMU_RET_INTR      0x0201 /* interrupted by a signal */
+#define KQEMU_RET_SYSCALL   0x0300 /* syscall insn */
 
 #ifdef _WIN32
 #define KQEMU_EXEC           CTL_CODE(FILE_DEVICE_UNKNOWN, 1, METHOD_BUFFERED, FILE_READ_ACCESS | FILE_WRITE_ACCESS)
--- qemu-0.8.0/Makefile.orig	2006-01-05 19:10:28.000000000 +0100
+++ qemu-0.8.0/Makefile	2006-01-05 19:18:26.000000000 +0100
 	$(MAKE) -C kqemu
 endif
 endif
+ifdef CONFIG_QVM86
+ifdef CONFIG_WIN32
+	$(MAKE) -C qvm86 -f Makefile.winnt
+else
+	$(MAKE) -C qvm86
+endif
+endif
 
 qemu-img$(EXESUF): qemu-img.c block.c block-cow.c block-qcow.c aes.c block-vmdk.c block-cloop.c block-dmg.c block-bochs.c block-vpc.c block-vvfat.c
 	$(CC) -DQEMU_TOOL $(CFLAGS) $(LDFLAGS) $(DEFINES) -o $@ $^ -lz $(LIBS)
@@ -39,9 +46,17 @@
 	for d in $(TARGET_DIRS); do \
 	$(MAKE) -C $$d $@ || exit 1 ; \
         done
-ifdef CONFIG_KQEMU
-	$(MAKE) -C kqemu clean
+
+ifdef DEADBEAF
+ifdef CONFIG_QVM86
+ifdef CONFIG_WIN32
+	$(MAKE) -C qvm86 -f Makefile.winnt
+else
+	$(MAKE) -C qvm86 clean
 endif
+endif
+endif
+
 
 distclean: clean
 	rm -f config-host.mak config-host.h
--- ./configure.vanilla	2006-01-05 19:40:11.000000000 +0100
+++ ./configure	2006-01-05 19:40:31.000000000 +0100
@@ -490,7 +490,7 @@
 echo "Linux kernel module configuration:"
 echo "kernel sources    $kernel_path"
 echo -n "kbuild type       "
-if test $kbuild26 = "yes"; then
+if test "$kbuild26" = "yes"; then
 echo "2.6"
 else
 echo "2.4"
@@ -644,7 +644,7 @@
 fi
 if test $kernel_module = "yes" -a $linux = "yes" ; then
     echo "KERNEL_PATH=$kernel_path" >> $config_mak
-    if test $kbuild26 = "yes" ; then
+    if test "$kbuild26" = "yes" ; then
       echo "CONFIG_KBUILD26=yes" >> $config_mak
     fi
 fi
