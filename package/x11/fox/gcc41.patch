# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../fox/gcc41.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

--- fox-1.4.30/include/FXQuatd.h.vanilla	2006-03-04 18:59:11.780287750 +0100
+++ fox-1.4.30/include/FXQuatd.h	2006-03-04 19:00:40.441828750 +0100
@@ -123,7 +123,17 @@
   friend FXAPI FXQuatd fromMatrix(const FXMat3d& mat);
   };
 
-
+  FXAPI FXQuatd exp(const FXQuatd& q);
+  FXAPI FXQuatd log(const FXQuatd& q);
+  FXAPI FXQuatd invert(const FXQuatd& q);
+  FXAPI FXQuatd unitinvert(const FXQuatd& q);
+  FXAPI FXQuatd conj(const FXQuatd& q);
+  FXAPI FXQuatd operator*(const FXQuatd& p,const FXQuatd& q);
+  FXAPI FXVec3d operator*(const FXQuatd& quat,const FXVec3d& vec);
+  FXAPI FXQuatd arc(const FXVec3d& a,const FXVec3d& b);
+  FXAPI FXQuatd lerp(const FXQuatd& u,const FXQuatd& v,FXdouble f);
+  FXAPI FXMat3d toMatrix(const FXQuatd& quat);
+  FXAPI FXQuatd fromMatrix(const FXMat3d& mat);
 
 }
 
--- fox-1.4.30/include/FXQuatf.h.vanilla	2006-03-04 18:59:28.281319000 +0100
+++ fox-1.4.30/include/FXQuatf.h	2006-03-04 19:00:26.624965250 +0100
@@ -124,6 +124,17 @@
   };
 
 
+  FXAPI FXQuatf exp(const FXQuatf& q);
+  FXAPI FXQuatf log(const FXQuatf& q);
+  FXAPI FXQuatf invert(const FXQuatf& q);
+  FXAPI FXQuatf unitinvert(const FXQuatf& q);
+  FXAPI FXQuatf conj(const FXQuatf& q);
+  FXAPI FXQuatf operator*(const FXQuatf& p,const FXQuatf& q);
+  FXAPI FXVec3f operator*(const FXQuatf& quat,const FXVec3f& vec);
+  FXAPI FXQuatf arc(const FXVec3f& a,const FXVec3f& b);
+  FXAPI FXQuatf lerp(const FXQuatf& u,const FXQuatf& v,FXfloat f);
+  FXAPI FXMat3f toMatrix(const FXQuatf& quat);
+  FXAPI FXQuatf fromMatrix(const FXMat3f& mat);
 
 }
 
--- fox-1.4.30/include/FXString.h.vanilla	2006-03-04 18:19:19.146757500 +0100
+++ fox-1.4.30/include/FXString.h	2006-03-04 19:12:46.759220750 +0100
@@ -435,31 +435,31 @@
   * Convert integer number to a string, using the given number
   * base, which must be between 2 and 16.
   */
-  friend FXAPI FXString FXStringVal(FXint num,FXint base=10);
-  friend FXAPI FXString FXStringVal(FXuint num,FXint base=10);
+  friend FXAPI FXString FXStringVal(FXint num,FXint base);
+  friend FXAPI FXString FXStringVal(FXuint num,FXint base);
 
   /**
   * Convert long integer number to a string, using the given number
   * base, which must be between 2 and 16.
   */
-  friend FXAPI FXString FXStringVal(FXlong num,FXint base=10);
-  friend FXAPI FXString FXStringVal(FXulong num,FXint base=10);
+  friend FXAPI FXString FXStringVal(FXlong num,FXint base);
+  friend FXAPI FXString FXStringVal(FXulong num,FXint base);
 
   /**
   * Convert real number to a string, using the given procision and
   * exponential notation mode, which may be FALSE (never), TRUE (always), or
   * MAYBE (when needed).
   */
-  friend FXAPI FXString FXStringVal(FXfloat num,FXint prec=6,FXbool exp=MAYBE);
-  friend FXAPI FXString FXStringVal(FXdouble num,FXint prec=6,FXbool exp=MAYBE);
+  friend FXAPI FXString FXStringVal(FXfloat num,FXint prec,FXbool exp);
+  friend FXAPI FXString FXStringVal(FXdouble num,FXint prec,FXbool exp);
 
   /// Convert string to a integer number, assuming given number base
-  friend FXAPI FXint FXIntVal(const FXString& s,FXint base=10);
-  friend FXAPI FXuint FXUIntVal(const FXString& s,FXint base=10);
+  friend FXAPI FXint FXIntVal(const FXString& s,FXint base);
+  friend FXAPI FXuint FXUIntVal(const FXString& s,FXint base);
 
   /// Convert string to long integer number, assuming given number base
-  friend FXAPI FXlong FXLongVal(const FXString& s,FXint base=10);
-  friend FXAPI FXulong FXULongVal(const FXString& s,FXint base=10);
+  friend FXAPI FXlong FXLongVal(const FXString& s,FXint base);
+  friend FXAPI FXulong FXULongVal(const FXString& s,FXint base);
 
   /// Convert string into real number
   friend FXAPI FXfloat FXFloatVal(const FXString& s);
@@ -472,12 +472,71 @@
   friend FXAPI FXString unescape(const FXString& s);
 
   /// Swap two strings
-  friend FXAPI void swap(FXString& a,FXString& b){ FXchar *t=a.str; a.str=b.str; b.str=t; }
+  friend FXAPI void swap(FXString& a,FXString& b);
 
   /// Delete
  ~FXString();
   };
 
+  FXAPI FXint compare(const FXchar* s1,const FXchar* s2);
+  FXAPI FXint compare(const FXchar* s1,const FXString& s2);
+  FXAPI FXint compare(const FXString& s1,const FXchar* s2);
+  FXAPI FXint compare(const FXString& s1,const FXString& s2);
+  FXAPI FXint compare(const FXchar* s1,const FXchar* s2,FXint n);
+  FXAPI FXint compare(const FXchar* s1,const FXString& s2,FXint n);
+  FXAPI FXint compare(const FXString& s1,const FXchar* s2,FXint n);
+  FXAPI FXint compare(const FXString& s1,const FXString& s2,FXint n);
+  FXAPI FXint comparecase(const FXchar* s1,const FXchar* s2);
+  FXAPI FXint comparecase(const FXchar* s1,const FXString& s2);
+  FXAPI FXint comparecase(const FXString& s1,const FXchar* s2);
+  FXAPI FXint comparecase(const FXString& s1,const FXString& s2);
+  FXAPI FXint comparecase(const FXchar* s1,const FXchar* s2,FXint n);
+  FXAPI FXint comparecase(const FXchar* s1,const FXString& s2,FXint n);
+  FXAPI FXint comparecase(const FXString& s1,const FXchar* s2,FXint n);
+  FXAPI FXint comparecase(const FXString& s1,const FXString& s2,FXint n);
+  FXAPI FXbool operator==(const FXString& s1,const FXString& s2);
+  FXAPI FXbool operator==(const FXString& s1,const FXchar* s2);
+  FXAPI FXbool operator==(const FXchar* s1,const FXString& s2);
+  FXAPI FXbool operator!=(const FXString& s1,const FXString& s2);
+  FXAPI FXbool operator!=(const FXString& s1,const FXchar* s2);
+  FXAPI FXbool operator!=(const FXchar* s1,const FXString& s2);
+  FXAPI FXbool operator<(const FXString& s1,const FXString& s2);
+  FXAPI FXbool operator<(const FXString& s1,const FXchar* s2);
+  FXAPI FXbool operator<(const FXchar* s1,const FXString& s2);
+  FXAPI FXbool operator<=(const FXString& s1,const FXString& s2);
+  FXAPI FXbool operator<=(const FXString& s1,const FXchar* s2);
+  FXAPI FXbool operator<=(const FXchar* s1,const FXString& s2);
+  FXAPI FXbool operator>(const FXString& s1,const FXString& s2);
+  FXAPI FXbool operator>(const FXString& s1,const FXchar* s2);
+  FXAPI FXbool operator>(const FXchar* s1,const FXString& s2);
+  FXAPI FXbool operator>=(const FXString& s1,const FXString& s2);
+  FXAPI FXbool operator>=(const FXString& s1,const FXchar* s2);
+  FXAPI FXbool operator>=(const FXchar* s1,const FXString& s2);
+  FXAPI FXString operator+(const FXString& s1,const FXString& s2);
+  FXAPI FXString operator+(const FXString& s1,const FXchar* s2);
+  FXAPI FXString operator+(const FXchar* s1,const FXString& s2);
+  FXAPI FXString operator+(const FXString& s,FXchar c);
+  FXAPI FXString operator+(FXchar c,const FXString& s);
+  FXAPI FXStream& operator<<(FXStream& store,const FXString& s);
+  FXAPI FXStream& operator>>(FXStream& store,FXString& s);
+  FXAPI FXString FXStringFormat(const FXchar* fmt,...) FX_PRINTF(1,2) ;
+  FXAPI FXString FXStringVFormat(const FXchar* fmt,va_list args);
+  FXAPI FXString FXStringVal(FXint num,FXint base=10);
+  FXAPI FXString FXStringVal(FXuint num,FXint base=10);
+  FXAPI FXString FXStringVal(FXlong num,FXint base=10);
+  FXAPI FXString FXStringVal(FXulong num,FXint base=10);
+  FXAPI FXString FXStringVal(FXfloat num,FXint prec=6,FXbool exp=MAYBE);
+  FXAPI FXString FXStringVal(FXdouble num,FXint prec=6,FXbool exp=MAYBE);
+  FXAPI FXint FXIntVal(const FXString& s,FXint base=10);
+  FXAPI FXuint FXUIntVal(const FXString& s,FXint base=10);
+  FXAPI FXlong FXLongVal(const FXString& s,FXint base=10);
+  FXAPI FXulong FXULongVal(const FXString& s,FXint base=10);
+  FXAPI FXfloat FXFloatVal(const FXString& s);
+  FXAPI FXdouble FXDoubleVal(const FXString& s);
+  FXAPI FXString escape(const FXString& s);
+  FXAPI FXString unescape(const FXString& s);
+  FXAPI inline void swap(FXString& a,FXString& b){ FXchar *t=a.str; a.str=b.str; b.str=t; }
+
 
 }
 
