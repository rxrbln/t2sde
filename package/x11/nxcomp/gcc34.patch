
This is a really ugly _hack_ to get the code compile with recent
STLs, ... This is also very STL dependent. The code should really
be converted to use some sort of official standard interface to
destroy the obejcts ...

  - Rene Rebe <rene@exactcode.de>

--- nxcomp/Types.h	2003-09-14 19:05:20.000000000 +0200
+++ nxcomp-hacked/Types.h	2004-09-27 19:10:03.516438552 +0200
@@ -54,7 +54,7 @@
 
 class Message;
 
-class T_data : public vector < unsigned char >
+class T_data : public std::vector < unsigned char >
 {
   public:
 
@@ -74,31 +74,7 @@
 
   void clear()
   {
-    #if defined(__STL_USE_STD_ALLOCATORS) || defined(__GLIBCPP_INTERNAL_VECTOR_H)
-
-    #if defined(__GLIBCPP_INTERNAL_VECTOR_H)
-
-    _Destroy(_M_start, _M_finish);
-
-    #else
-
-    destroy(_M_start, _M_finish);
-
-    #endif
-
-    _M_deallocate(_M_start, _M_end_of_storage - _M_start);
-
-    _M_start = _M_finish = _M_end_of_storage = 0;
-
-    #else
-
-    destroy(start, finish);
-
-    deallocate();
-
-    start = finish = end_of_storage = 0;
-
-    #endif
+    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish);
   }
 };
 
@@ -108,31 +84,7 @@
 
   void clear()
   {
-    #if defined(__STL_USE_STD_ALLOCATORS) || defined(__GLIBCPP_INTERNAL_VECTOR_H)
-
-    #if defined(__GLIBCPP_INTERNAL_VECTOR_H)
-
-    _Destroy(_M_start, _M_finish);
-
-    #else
-
-    destroy(_M_start, _M_finish);
-
-    #endif
-
-    _M_deallocate(_M_start, _M_end_of_storage - _M_start);
-
-    _M_start = _M_finish = _M_end_of_storage = 0;
-
-    #else
-
-    destroy(start, finish);
-
-    deallocate();
-
-    start = finish = end_of_storage = 0;
-
-    #endif
+    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish);
   }
 };
 
