# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../jamin/fftw-no-f.patch
# Copyright (C) 2010 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

--- jamin-0.95.0/src/process.c.vanilla	2010-08-26 12:34:41.000000000 +0200
+++ jamin-0.95.0/src/process.c	2010-08-26 12:35:27.000000000 +0200
@@ -168,12 +168,12 @@
     }
 
     /* Allocate space for FFT data */
-    real = fftwf_malloc(sizeof(fft_data) * BINS);
-    comp = fftwf_malloc(sizeof(fft_data) * BINS);
-    comp_tmp = fftwf_malloc(sizeof(fft_data) * BINS);
+    real = fftw_malloc(sizeof(fft_data) * BINS);
+    comp = fftw_malloc(sizeof(fft_data) * BINS);
+    comp_tmp = fftw_malloc(sizeof(fft_data) * BINS);
 
-    plan_rc = fftwf_plan_r2r_1d(BINS, real, comp, FFTW_R2HC, FFTW_MEASURE);
-    plan_cr = fftwf_plan_r2r_1d(BINS, comp_tmp, real, FFTW_HC2R, FFTW_MEASURE);
+    plan_rc = fftw_plan_r2r_1d(BINS, real, comp, FFTW_R2HC, FFTW_MEASURE);
+    plan_cr = fftw_plan_r2r_1d(BINS, comp_tmp, real, FFTW_HC2R, FFTW_MEASURE);
 
     /* Calculate root raised cosine window */
     for (i = 0; i < BINS; i++) {
@@ -230,7 +230,7 @@
 	real[i] = window[i] * in_buf[port][(in_ptr + i) & BUF_MASK];
     }
 
-    fftwf_execute(plan_rc);
+    fftw_execute(plan_rc);
 
     /* run the EQ + spectrum an. + xover process */
 
@@ -259,7 +259,7 @@
 	    bin_peak[i] = peak;
 	}
     }
-    fftwf_execute(plan_cr);
+    fftw_execute(plan_cr);
     for (j = 0; j < BINS; j++) {
 	out_buf[port][XO_LOW][(in_ptr + j) & BUF_MASK] += real[j] * fix *
 	    window[j];
@@ -283,7 +283,7 @@
 	    bin_peak[i] = peak;
 	}
     }
-    fftwf_execute(plan_cr);
+    fftw_execute(plan_cr);
     for (j = 0; j < BINS; j++) {
 	out_buf[port][XO_MID][(in_ptr + j) & BUF_MASK] += real[j] * fix *
 	    window[j];
@@ -306,7 +306,7 @@
 	    bin_peak[i] = peak;
 	}
     }
-    fftwf_execute(plan_cr);
+    fftw_execute(plan_cr);
     for (j = 0; j < BINS; j++) {
 	out_buf[port][XO_HIGH][(in_ptr + j) & BUF_MASK] += real[j] * fix *
 	    window[j];
@@ -328,7 +328,7 @@
 	real[i] = window[i] * in_buf[port][(in_ptr + i) & BUF_MASK];
     }
 
-    fftwf_execute(plan_rc);
+    fftw_execute(plan_rc);
 
     /* run the EQ + spectrum an. + xover process */
 
@@ -357,7 +357,7 @@
 	    bin_peak[i] = peak;
 	}
     }
-    fftwf_execute(plan_cr);
+    fftw_execute(plan_cr);
     for (j = 0; j < BINS; j++) {
 	mid_buf[port][(in_ptr + j) & BUF_MASK] += real[j] * fix * window[j];
     }
