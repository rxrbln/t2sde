# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../rezound/64bit.patch
# Copyright (C) 2006 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- T2-COPYRIGHT-NOTE-END ---

CVS pull to make it not segfault on playback on 64bit platforms ...

  - Rene Rebe <rene@exactcode.de>

===================================================================
RCS file: /cvsroot/rezound/rezound/src/backend/DSP/Convolver.h,v
retrieving revision 1.6
retrieving revision 1.7
diff -u -r1.6 -r1.7
--- rezound/src/backend/DSP/Convolver.h	2003/07/22 21:12:00	1.6
+++ rezound/src/backend/DSP/Convolver.h	2005/11/12 04:13:29	1.7
@@ -64,7 +64,7 @@
 	const sample_t processSample(const sample_t input)
 	{
 		coefficient_t output=input*coefficients[0];
-		for(size_t t=coefficientCountSub1;t>0;t--)
+		for(unsigned t=coefficientCountSub1;t>0;t--)
 			output+=delay.getSample(t)*coefficients[t];
 
 		delay.putSample((coefficient_t)input);
===================================================================
RCS file: /cvsroot/rezound/rezound/src/backend/CSoundPlayerChannel.cpp,v
retrieving revision 1.37
retrieving revision 1.38
diff -u -r1.37 -r1.38
--- rezound/src/backend/CSoundPlayerChannel.cpp	2005/08/21 01:01:15	1.37
+++ rezound/src/backend/CSoundPlayerChannel.cpp	2005/11/12 04:13:29	1.38
@@ -721,8 +721,8 @@
 			if(!muted[i])  // ??? this memory needs to be locked for JACK's sake
 			{
 				// populate for interpolation
-				readBuffer[-(2*channelCount)+i]=prevLast2Frames[0][i]; 
-				readBuffer[-   channelCount +i]=prevLast2Frames[1][i];
+				readBuffer[-(2*(int)channelCount)+(int)i]=prevLast2Frames[0][i]; 
+				readBuffer[-   (int)channelCount +(int)i]=prevLast2Frames[1][i];
 				const sample_t * const rreadBuffer=readBuffer-(2*channelCount);
 
 				const vector<bool> outputRouting=getOutputRoute(0,i); // ??? this needs to be put into a data member of memory NOT TO BE SWAPPED for jack's sake and it needs to be updated in updateAfterEdit()
@@ -765,8 +765,8 @@
 			}
 
 			// save the last 2 samples and (later) the offset into the next-to-last so that we can use it for interpolation the next go around
-			prevLast2Frames[0][i]=readBuffer[((framesRead-2)*channelCount)+i];
-			prevLast2Frames[1][i]=readBuffer[((framesRead-1)*channelCount)+i];
+			prevLast2Frames[0][i]=readBuffer[(((int)framesRead-2)*(int)channelCount)+(int)i];
+			prevLast2Frames[1][i]=readBuffer[(((int)framesRead-1)*(int)channelCount)+(int)i];
 		}
 
 		// if all channels were muted, or none were mapped to an output device then this value never got set
