#!/bin/sh
# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: package/.../vserver/stone_mod_vserver.sh
# Copyright (C) 2004 - 2005 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. A copy of the
# GNU General Public License can be found in the file COPYING.
# --- T2-COPYRIGHT-NOTE-END ---
# [MAIN] 40 vserver Linux VServer Manager

CONFDIR=/etc/vservers

oneliner() {
	[ -r $1 ] && head -n 1 $1 || echo "N/A"
}

gui_edit_oneliner() {
	local value=
	[ -f $2 ] && value="$( cat $2 )"
	if gui_input "Enter value for '$1' ($2):" "$value" value; then
		if [ "$value" ]; then
			echo "$value" > $2
		else
			rm -f $2
		fi
	fi
}
gui_edit_deleteable() {
	gui_edit $1 $2
	[ ! -s $2 ] && rm -f $2
}

flag_if_empty() {
	[ -s $1 ] || echo '[N/A]'
}

vserver_conf_manage() {
	local server="$1" errno=0
	local vdir=$CONFDIR/$server

	while [ $errno -eq 0 ]; do
		local options=
		
		options="$options 'Name ......: $( oneliner $vdir/name )' ''"
		options="$options 'XID .......: $( oneliner $vdir/run )' ''"
		options="$options 'Directory .: $( readlink -f $vdir/vdir )' ''"
		options="$options 'Context ...: $( oneliner $vdir/context )' \
			'gui_edit_oneliner context $vdir/context'"
		options="$options 'Namespace .: $( oneliner $vdir/namespace )' \
			'gui_edit_oneliner namespace $vdir/namespace'"
			
		options="$options '' ''"
		case "`uname -r`" in
			2.4*)	options="$options 'System Capabilities  $( flag_if_empty $vdir/capabilities )' \
					'gui_edit_deleteable capabilities $vdir/capabilities'"
				;;
			*)	options="$options 'System Capabilities  $( flag_if_empty $vdir/bcapabilities )' \
					'gui_edit_deleteable bcapabilities $vdir/bcapabilities'"
				;;
		esac
		options="$options 'Context Capabilities $( flag_if_empty $vdir/ccapabilities )' \
			'gui_edit_deleteable ccapabilities $vdir/ccapabilities'"
		options="$options 'Flags                $( flag_if_empty $vdir/flags )' \
			'gui_edit_deleteable flags $vdir/flags'"
		options="$options 'Personalities        $( flag_if_empty $vdir/personality )' \
			'gui_edit_deleteable personality $vdir/personality'"
		options="$options 'Scheduler Parameters $( flag_if_empty $vdir/schedule )' \
			'gui_edit_deleteable schedule $vdir/schedule'"

		options="$options '' ''"
		options="$options 'Nice Level ...: $( oneliner $vdir/nice )' \
			'gui_edit_oneliner nice $vdir/nice'"
		options="$options 'Default Shell : $( oneliner $vdir/shell )' \
			'gui_edit_oneliner shell $vdir/shell'"

		options="$options '' ''"
		options="$options '==> uts/'	    'vserver_conf_uts_manage  $server'"
		options="$options '==> apps/'       'vserver_conf_apps_manage $server'"
		options="$options '==> rlimits/'    'vserver_conf_rl_manage   $server'"
		options="$options '==> ulimits/'    'vserver_conf_ul_manage   $server'"
		options="$options '==> scripts/'    'vserver_conf_sc_manage   $server'"
		options="$options '==> interfaces/' 'vserver_conf_if_manage   $server'"

		options="$options '' ''"
		options="$options 'fstab        $( flag_if_empty $vdir/fstab )' \
			'gui_edit fstab $vdir/fstab'"
		options="$options 'fstab.remote $( flag_if_empty $vdir/fstab.remote )' \
			'gui_edit fstab_remote $vdir/fstab.remote'"

		eval "gui_menu vserver_conf 'VServer \`$server\` Configuration' $options"
		errno=$?
	done
}

vserver_new() {
	local server= action= errno=
	gui_input "Enter a name for the new vserver" '' server
	if [ "$server" ]; then
		action="vserver '$server' build -m skeleton"
		eval "$action"; errno=$?
		if [ $errno -eq 0 ]; then
			vserver_conf_manage "$server"
		else
			gui_message "\"$action\" failed."
		fi
	fi
}


main() {
	local errno=0
	local servers= server=

	while [ $errno -eq 0 ]; do
		servers=
		for server in $( ls -1 $CONFDIR); do
			[ -d $CONFDIR/$server ] && servers="$servers 'vserver: $server' 'vserver_conf_manage $server'"
		done

		[ "$servers" ] && servers="$servers '' ''"
		eval "gui_menu vserver 'Linux VServer Manager' $servers 'Create a new vserver' 'vserver_new'"
		errno=$?
	done
}
