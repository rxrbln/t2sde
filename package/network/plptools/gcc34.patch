--- plptools-0.12/lib/bufferarray.cc.vanilla	2005-02-25 19:13:32.110069992 +0100
+++ plptools-0.12/lib/bufferarray.cc	2005-02-25 19:13:52.476973752 +0100
@@ -22,8 +22,8 @@
  *
  */
 
-#include <stream.h>
-#include <iomanip.h>
+#include <iostream>
+#include <iomanip>
 
 #include "bufferstore.h"
 #include "bufferarray.h"
--- plptools-0.12/lib/rfsv16.cc.vanilla	2005-02-25 19:19:42.437771624 +0100
+++ plptools-0.12/lib/rfsv16.cc	2005-02-25 19:19:53.103150240 +0100
@@ -26,7 +26,7 @@
 #include "config.h"
 #endif
 
-#include <stream.h>
+#include <iostream>
 #include <stdlib.h>
 #include <fstream.h>
 #include <iomanip>
--- plptools-0.12/lib/bufferstore.h.vanilla	2005-02-25 19:14:57.361109864 +0100
+++ plptools-0.12/lib/bufferstore.h	2005-02-25 19:18:19.192426840 +0100
@@ -25,7 +25,7 @@
 #define _BUFFERSTORE_H_
 
 #include <sys/types.h>
-#include <stream.h>
+#include <iostream>
 
 /**
  * A generic container for an array of bytes.
@@ -129,7 +129,7 @@
     *
     * @returns The stream.
     */
-    friend class std::ostream &operator<<(std::ostream &, const bufferStore &);
+    friend std::ostream &operator<<(std::ostream &, const bufferStore &);
 
     /**
     * Tests if the bufferStore is empty.
--- plptools-0.12/lib/Enum.h.vanilla	2005-02-25 19:19:00.080210952 +0100
+++ plptools-0.12/lib/Enum.h	2005-02-25 21:30:24.577771744 +0100
@@ -257,7 +257,7 @@
     * XXX: throw OutOfRangeException ?
     */
     static E getValueFor(const std::string &s) {
-	return (E) staticData.stringRep.lookup(s.getCStr());
+	return (E) staticData.stringRep.lookup(s.c_str());
     }
 };
 
@@ -300,12 +300,12 @@
   * The definition of the static variable holding the static	\
   * data for this Enumeration wrapper.				\
   */								\
-Enum<EnumName>::sdata Enum<EnumName>::staticData;		\
+template<typename E> Enum<EnumName>::sdata Enum<EnumName>::staticData;	\
 /**								\
   * actual definition of the constructor for the static data.	\
   * This is called implicitly by the definition above.		\
   */								\
-Enum<EnumName>::sdata::sdata() :				\
+template<typename E> Enum<EnumName>::sdata::sdata() :				\
 name(#EnumName),defaultValue(initWith)
 
 /**
--- plptools-0.12/lib/bufferstore.cc.vanilla	2005-02-25 19:16:32.862591432 +0100
+++ plptools-0.12/lib/bufferstore.cc	2005-02-25 19:16:51.819709512 +0100
@@ -25,8 +25,7 @@
 #ifdef HAVE_CONFIG_H
 #include <config.h>
 #endif
-#include <stream.h>
-// Should be iostream.h, but won't build on Sun WorkShop C++ 5.0
+#include <iostream>
 #include <iomanip>
 #include <stdlib.h>
 #include <string.h>
--- plptools-0.12/lib/psiprocess.h.vanilla	2005-02-25 20:29:18.683949792 +0100
+++ plptools-0.12/lib/psiprocess.h	2005-02-25 20:29:29.653282200 +0100
@@ -105,7 +105,7 @@
     * The output is in human readable similar to the
     * output of a "ls" command.
     */
-    friend class std::ostream &operator<<(std::ostream &o, const PsiProcess &p);
+    friend std::ostream &operator<<(std::ostream &o, const PsiProcess &p);
 
 private:
     friend class rpcs;
--- plptools-0.12/lib/psitime.cc.vanilla	2005-02-25 20:31:14.215386344 +0100
+++ plptools-0.12/lib/psitime.cc	2005-02-25 20:31:20.306460360 +0100
@@ -63,7 +63,7 @@
     psi2unix();
 }
 
-PsiTime::PsiTime(struct timeval *_utv, struct timezone *_utz = 0L) {
+PsiTime::PsiTime(struct timeval *_utv, struct timezone *_utz) {
     if (_utv != 0L)
 	utv = *_utv;
     if (_utz != 0L)
--- plptools-0.12/ncpd/channel.h.vanilla	2005-02-25 20:33:02.655900880 +0100
+++ plptools-0.12/ncpd/channel.h	2005-02-25 20:33:33.339236304 +0100
@@ -45,15 +45,15 @@
     void ncpSend(bufferStore &a);
     void setVerbose(short int _verbose);
     short int getVerbose();
-    virtual void ncpDataCallback(bufferStore &a) = NULL;
-    virtual char *getNcpRegisterName() = NULL;
+    virtual void ncpDataCallback(bufferStore &a) = 0;
+    virtual char *getNcpRegisterName() = 0;
     void ncpConnect();
     void ncpRegister();
     void ncpDoRegisterAck(int ch, const char *name);
-    virtual void ncpConnectAck() = NULL;
-    virtual void ncpConnectTerminate() = NULL;
-    virtual void ncpConnectNak() = NULL;
-    virtual void ncpRegisterAck() = NULL;
+    virtual void ncpConnectAck() = 0;
+    virtual void ncpConnectTerminate() = 0;
+    virtual void ncpConnectNak() = 0;
+    virtual void ncpRegisterAck() = 0;
     void ncpDisconnect();
     short int ncpProtocolVersion();
     const char *getNcpConnectName();
