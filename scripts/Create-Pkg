#!/bin/bash
#
#--- T2-COPYRIGHT-BEGIN ---
#t2/scripts/Create-Pkg
#Copyright (C) 2004 - 2025 The T2 SDE Project
#Copyright (C) 1998 - 2003 ROCK Linux Project
#SPDX-License-Identifier: GPL-2.0
# --- T2-COPYRIGHT-END ---

usage() {
	cat <<-EOT
Usage:
$0 [ package/repository/packagename ] url < url-2 ... >

EOT
	exit 1
}

[ $# -lt 1 ] && usage

dir= info= text= url= author= category=extra/tool license=GPL status=Beta code=
maintainer='The T2 Project <t2@t2-project.org>'

if [ $# -gt 1 ]; then
	dir=${1#package/}; shift
fi

ver="${1%.tar.*}"
ver="${ver##*-}"

case "$1" in
	-h|*-help)
		usage
		;;
	-d|-r)
		dir="$2"; shift
		;;

	*github.com*)
		curl ${1/github.com/api.github.com/repos} > repotmpfile
		curl ${1/github.com/api.github.com/repos}/releases > releasetmpfile

		ver=$(jq -r '.[0].tag_name' releasetmpfile)
		[ "$ver" = null ] && curl ${1/github.com/api.github.com/repos}/tags > releasetmpfile &&
			ver=$(jq -r '.[0].name' releasetmpfile)

		[ "$dir" ] || dir="contrib/${1##*/}"
		info=$(jq -r .description repotmpfile)
		text="$info"
		author=$(jq -r .owner.login repotmpfile)
		license=$(jq -r .license.spdx_id repotmpfile)

		[[ "$ver" != 0* ]] && status=Stable

		url=$1
		dl="${url}/archive/${ver}/${url##*/}-${ver/v/}.tar.gz"
		rm -f repotmpfile releasetmpfile
		;;

	*gitlab*)
		# full URL like https://gitlab.example.com/group/proj
		[ "$dir" ] || dir="contrib/${1##*/}"
		HOST=$(printf "%s" "$1" | sed -E 's#^[a-z]+://([^/]+)/.*#\1#')
		PROJECT_PATH=$(printf "%s" "$1" | sed -E 's#^[a-z]+://[^/]+/##')
		# Encoded project ID for API (slashes -> %2F)
		PROJECT_ID=$(printf "%s" "$PROJECT_PATH" | sed 's|/|%2F|g')
		API="https://${HOST}/api/v4/projects/${PROJECT_ID}"

		# --- Project info (name, description, license, default_branch) ---
		PJ=$(curl "$API")
		text=$(printf "%s" "$PJ" | jq -r '.description // "No description"')
		info=${text%%.*}
		license=$(printf "%s" "$PJ" | jq -r '.license.name // empty')
		url=$(printf "%s" "$PJ" | jq -r '.homepage // empty')
		DEFAULT_BRANCH=$(printf "%s" "$PJ" | jq -r '.default_branch // "master"')

		# --- Determine latest version: prefer Releases, fallback to Tags ---
		ver=$(curl "$API/releases?per_page=1" | jq -r '.[0].tag_name // empty')
		if [ -n "$ver" ]; then
			# Try to get tar.gz from release assets
			dl=$(curl "$API/releases?per_page=1" |
				jq -r '.[0].assets.sources[]? | select(.format=="tar.gz") | .url' | head -n1)
		fi

		if [ -z "$ver" ] || [ -z "$dl" ]; then
			# Fallback to latest tag by version sort
			ver=$(curl "$API/repository/tags?per_page=100" | jq -r '.[].name' | sort -V | tail -n1)
			# Construct standard archive URL
			REPO_SLUG=$(basename "$PROJECT_PATH")
			dl="https://${HOST}/${PROJECT_PATH}/-/archive/${ver}/${REPO_SLUG}-${ver}.tar.gz"
		fi

		;;

	*kde.org*)
		dir=${dir:-kde} category=extra/desktop/kde author="KDE Project"
		code=". \$base/package/*/*/kde-conf.in"
		;;

	*gnome.org*)
		dir=${dir:-gnome} category=extra/desktop/gnome author="GNOME Project"
		code=". \$base/package/*/*/gnome-conf.in"
		;;
	*)
		dir=${dir:-contrib}
		;;
esac

pkg=${dir##*/}
pkg=${pkg,,}
dir=${dir,,}

if [ "$pkg" = "$dir" ]; then
	echo "Error: $dir must be <rep>/<pkg>!"
	exit 1
fi

rep="$(echo package/*/$pkg | cut -d'/' -f 2)"
if [ "$rep" != "*" ]; then
	echo "Error: package $pkg belongs to $rep!"
	exit 1
fi

rep=${dir/\/$pkg/}
confdir="package/$dir"

echo -n "Creating $confdir ... "
if [ -e $confdir ]; then
	echo "Error: $confdir already exists!"
	exit
fi
if ! mkdir -p $confdir; then
	echo "Error: $confdir already exists!"
	exit 1
fi

echo -n "Creating $pkg.desc ... "
	cat >$confdir/$pkg.desc <<EOT
[I] ${info}

[T] ${text}

[U] ${url}

[A] ${author}
[M] ${maintainer}

[C] ${category}
[F] CROSS

[L] ${license}
[S] ${status}
[V] ${ver}

EOT

[ "$code" ] &&
	echo "[O] $code
" >> $confdir/$pkg.desc

for dl; do
	echo "[D] 0 ${dl##*/} ${dl%/*}/" >> $confdir/$pkg.desc
done

touch $confdir/$pkg.cache
svn add $confdir/

echo "Remember to fill in the TODO's:"
grep '^\[.\] $' $confdir/$pkg.desc

scripts/Create-CopyPatch $confdir/$pkg.desc | patch -p1

scripts/Config -oldconfig
scripts/Emerge-Pkg $pkg
