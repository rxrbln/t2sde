#!/bin/bash
# --- ROCK-COPYRIGHT-NOTE-BEGIN ---
# 
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# Please add additional copyright information _after_ the line containing
# the ROCK-COPYRIGHT-NOTE-END tag. Otherwise it might get removed by
# the ./scripts/Create-CopyPatch script. Do not edit this copyright text!
# 
# ROCK Linux: rock-src/scripts/config.in
# Copyright (C) 1998 - 2003 ROCK Linux Project
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version. A copy of the GNU General Public
# License can be found at Documentation/COPYING.
# 
# Many people helped and are helping developing ROCK Linux. Please
# have a look at http://www.rocklinux.org/ and the Documentation/TEAM
# file for details.
# 
# --- ROCK-COPYRIGHT-NOTE-END ---
#
# Main config script
#
# Execution of sub-scripts:
#
# 	- architecture/*/preconfig.in
#
#	* Selecting Architecture
#	* architecture/$ROCKCFG_ARCH/config.in
#
#	- misc/*/preconfig.in
#	- target/*/preconfig.in
#	- package/*/*/preconfig.in
#
#	* Selecting Target
#	- target/$ROCKCFG_TARGET/pkgsel
#	* target/$ROCKCFG_TARGET/config.in
#
#	* {package/*,misc}/*/config-n.in (n<500)
#
#	* {package/*,misc}/*/config{,-n}.in (n>=500)
#	* Various common build options
#
#	- package/*/*/postconfig.in
# 	- misc/*/postconfig.in
#	- architecture/$ROCKCFG_ARCH/postconfig.in
#	- target/$ROCKCFG_TARGET/postconfig.in
#
# Only procedures marked with '*' might interact with the user.
#
# Naming-scheme for extening config variables:
#
# Core:     ROCKCFG_*
# Archs:    ROCKCFG_ARCH_<Arch-Name>_*
# Targets:  ROCKCFG_TRG_<Target-Name>_*
# Packages: ROCKCFG_PKG_<Pkg-Name>_*
#
# Config-Internal Variables:
#
# Core:     CFGTEMP_*
# Archs:    CFGTEMP_ARCH_<Arch-Name>_*
# Targets:  CFGTEMP_TRG_<Target-Name>_*
# Packages: CFGTEMP_PKG_<Pkg-Name>_*
#
# Config Presets: ROCKCFGSET_*
#

CFGTEMP_ARCHLIST=""
CFGTEMP_TARGETLIST=""

%include architecture/*/preconfig.in

comment_id '- Architecture, CPU and Optimization' COMMENT_ARCHCPUOPT
block_begin 7
	choice ROCKCFG_ARCH $ROCKCFG_ARCH $CFGTEMP_ARCHLIST
	ROCKCFG_ID="$ROCKCFG_ID-$ROCKCFG_ARCH"

	if [ -f architecture/$ROCKCFG_ARCH/config.in ]
	then . architecture/$ROCKCFG_ARCH/config.in ; fi
	bool 'This is a cross-build between architectures' ROCKCFG_CROSSBUILD 0
	if [ "$ROCKCFG_CROSSBUILD" = 1 ] ; then
		pkgfilter sed -e 's,^\(. ..\)[^ ]*,\1--------,'
		ROCKCFG_ID="$ROCKCFG_ID-cross" ; ROCKCFGSET_USE_CROSSCC=1
	fi
block_end

%include misc/*/preconfig.in
%include target/*/preconfig.in
%include package/*/*/preconfig.in

comment ' '
comment_id '- Target Distribution' COMMENT_TARGET

block_begin 7
	choice ROCKCFG_TARGET generic $CFGTEMP_TARGETLIST
	ROCKCFG_ID="$ROCKCFG_ID-$ROCKCFG_TARGET"

	if [ -f target/$ROCKCFG_TARGET/pkgsel ]; then
		if [ target/$ROCKCFG_TARGET/pkgsel -nt $cfgtmpdir/pkgsel.$ROCKCFG_TARGET.awk ]
		then
		( echo "# created from 'target-pkgsel'"
		  pkgsel_init
		  pkgsel_parse < target/$ROCKCFG_TARGET/pkgsel
		  pkgsel_finish
		) > $cfgtmpdir/pkgsel.$ROCKCFG_TARGET.awk
		fi

		if [ -s $cfgtmpdir/pkgsel.$ROCKCFG_TARGET.awk ]; then
			pkgfilter awk -f $cfgtmpdir/pkgsel.$ROCKCFG_TARGET.awk
			[ "$ROCKCFG_LICENSE_ISSUE" = 0 ] && pkgchecklicense
		else
			comment 'WARNING! something went wrong with target-pkgsel'
		fi
	fi

	if [ -f target/$ROCKCFG_TARGET/config.in ]
	then . target/$ROCKCFG_TARGET/config.in ; fi
block_end

if test -f config/$config/license-issue.ask; then
	comment ' '
	comment_id '- Licensing issues' COMMENT_LICENSE

	block_begin 7
		if [ "$ROCKCFG_LICENSE_ISSUE" != 1 ]; then
			comment '    This distribution may contain software that is not publicly'
			comment '    distributable. Please check the following to testify that you'
			comment '    are aware of this fact.'
			comment ' '
			comment '    The following packages may contain such restrictive licenses:'

			for i in `cat config/$config/license-issue.ask`; do
				comment "         $i"
			done

			comment ' '
		fi
		

		bool 'I have read and understood the licensing issues.' ROCKCFG_LICENSE_ISSUE 0
	block_end
fi

comment ' '
comment_id '- Build System Configuration' COMMENT_BUILD_SYS_CONF
block_begin 3
	#bool 'Make a parallel (cluster) build' ROCKCFG_PARALLEL 0
	if [ "$ROCKCFG_PARALLEL" = 1 ] ; then
	    block_begin 10
		text 'Command for adding jobs' ROCKCFG_PARALLEL_ADDJOB ''
	    block_end
	else
		choice ROCKCFG_ABORT_ON_ERROR_AFTER 4 \
			0	'Continue if package-build fails after toolchain (native)'	\
			1	'Continue if package-build fails after toolchain (cross)'	\
			2	'Continue if package-build fails after stage 2'	\
			3	'Continue if package-build fails after stage 3'	\
			4	'Continue if package-build fails after stage 4'	\
			5	'Continue if package-build fails after stage 5'	\
			6	'Continue if package-build fails after stage 6'	\
			7	'Continue if package-build fails after stage 7'	\
			8	'Continue if package-build fails on rebuild stage' \
			9	'Always abort if package-build fails'
	fi

	bool 'Retry building broken packages' ROCKCFG_RETRY_BROKEN 0
	bool 'Disable packages which are marked as broken' \
						ROCKCFG_DISABLE_BROKEN 0
	bool 'Do not try building packages if deps failed' \
						ROCKCFG_NOBROKENDEPS 0
	bool 'Always clean up src dirs (even on pkg fail)' \
						ROCKCFG_ALWAYS_CLEAN 0
	bool 'Create debug information (xtrace) for builds' ROCKCFG_XTRACE 0

	bool 'Use TMPFS for building packages' ROCKCFG_SRC_TMPFS 0
	if [ "$ROCKCFG_SRC_TMPFS" = 1 ] ; then
	    block_begin
		comment '! WARNING: This feature can hang your system, if'
		comment '! you do not have enough virtual memory!'
		text 'TMPFS mount options' ROCKCFG_SRC_TMPFS_OPT \
		                           'size=800M,nr_inodes=100k'
		bool 'Write tmpfs log to var/adm/t2-debug/tmpfslog.txt' \
					ROCKCFG_SRC_TMPFS_LOG 0
	    block_end
	fi
block_end

# Apply template
if [ -f misc/pkgsel/${ROCKCFG_PKGSEL_TPL}.in ]; then
	. misc/pkgsel/${ROCKCFG_PKGSEL_TPL}.in
fi

# Apply custom package selection
if [ "$ROCKCFG_PKGSEL" = 1 -a -f config/$config/pkgsel ] ; then
	# Active error checking: explicitly show an annoying popup
	filter=`printf "^[-xXoO][ \t]\+[a-zA-Z0-9_/*+.-]"`
	if grep -lvq "$filter" config/$config/pkgsel 2> /dev/null && \
		./src/rockdialog.bin --title "Build Config" --yesno \
		"Invalid line(s) in package rule set. Remove?" 5 50
	then
		grep "$filter" < config/$config/pkgsel \
			> $cfgtmpdir/pkgsel.new
		mv $cfgtmpdir/pkgsel.new config/$config/pkgsel
	fi
	unset filter

	( echo "# created from 'pkgsel'"
	  pkgsel_init
	  pkgsel_parse < config/$config/pkgsel
	  pkgsel_finish
	) > $cfgtmpdir/pkgsel.awk

	pkgout
	gawk -f $cfgtmpdir/pkgsel.awk < config/$config/packages \
			> $cfgtmpdir/packages.new 2> /dev/null
	if [ -s $cfgtmpdir/packages.new ] ; then
		mv $cfgtmpdir/packages.new config/$config/packages
	else
		rm -f $cfgtmpdir/packages.new
		CFGTEMP_PKSEL_ERROR=1
	fi
	pkgin
fi

comment ' '
ROCKCFG_PARALLEL_MAX="`echo $ROCKCFG_PARALLEL_MAX | sed 's,[^0-9],,g'`"
text 'Maximum number of jobs to be executed in parallel' ROCKCFG_PARALLEL_MAX 4

comment ' '
block_begin 3
# this is warranted to exist
. $cfgtmpdir/noexpert-config.in
block_end

comment ' '
block_begin 3
	bool 'Show expert-only and experimental options' ROCKCFG_EXPERT 0
block_end

if [ $ROCKCFG_EXPERT = 1 ] ; then ROCKCFG_ID="$ROCKCFG_ID-expert"
else ROCKCFG_ID="$ROCKCFG_ID-noexpert" ; fi

expert_begin

    comment ' '
    comment '- Binary package format'
    block_begin 3
	bool 'Create *.tar.bz2 binary packages' ROCKCFG_CREATE_TARBZ2 0
	bool 'Create *.gem binary packages' ROCKCFG_CREATE_GEM 1
	bool 'Append version number to package files' ROCKCFG_PKGFILE_VER 1
    block_end

    comment ' '
    comment '- Additional Package Selection'
    block_begin 3
      choice ROCKCFG_PKGSEL_TPL none none 'No package preselection template' \
		$( cd misc/pkgsel; grep -H "^# TITLE: " *.in | tr ' ' '_' | sed 's,\.in:#_TITLE:_, ,' )
      bool 'Custom package selection' ROCKCFG_PKGSEL 0
      if [ "$ROCKCFG_PKGSEL" = 1 ] ; then
	menu_begin MENU_PKGSEL_RULES 'Edit package selection rules'
		editfile ROCKCFG_PKGSEL_FILE config/$config/pkgsel \
		         'Package selection rules'

		if [ "$CFGTEMP_PKGSEL_ERROR" = 1 ]; then
			comment '----    Syntax error(s) in rule set!'
		fi

		[ "$ROCKCFG_LICENSE_ISSUE" = 0 ] && pkgchecklicense
	menu_end
      else
	rm -f config/$config/pkgsel $cfgtmpdir/pkgsel.awk
      fi
      startprog ROCKCFG_SHOW_PKGLIST 'Show the current package list' \
              "./src/rockdialog.bin --title 'T2 Config - Package List' \
                        --backtitle 'T2 $rockver Configuration' \
                        --textbox $cfgtmpdir/packages.txt \
                        $(( $lines - 4 )) $(( $columns - 5 ))"
    block_end

    comment ' '

    # this is warranted to exist
    . $cfgtmpdir/expert-config.in

    comment ' '
    comment '- Additional GNU Configure Options'
    block_begin 5
	editfile ROCKCFG_CONFOPT_FILE config/$config/confopt \
	                              'GNU Configure Options'
	if [ -f config/$config/confopt ] ; then
		const ROCKCFG_CONFIGURE_OPTS "`tr '\n' ' ' \
					< config/$config/confopt`"
	else
		const ROCKCFG_CONFIGURE_OPTS ""
	fi
	for option in $ROCKCFG_CONFIGURE_OPTS ; do
		if [ "${option#--with-}" = "$option" -a \
			"${option#--without-}" = "$option" ]
		then
			comment '----     Warning! The custom options may
break packages!'
			break
		fi
	done
    block_end

    comment ' '
    text 'Additional compiler flags' ROCKCFG_C_FLAGS ""

    comment ' '
    comment_id '- Flist detection technique' COMMENT_FLIST
    block_begin 5
	choice ROCKCFG_FLIST flwrapper \
		flwrapper 'Use the flist wrapper library for flist creation' \
		strace    'Use strace to get the file list'                  \
		find      'Use find on timestamp-file for flist creation'
    block_end

    comment ' '
    comment '- Various Options'
    block_begin 5
	bool 'Build and use a (pseudo-)cross compiler' ROCKCFG_USE_CROSSCC 1
	bool 'Make rebuild stage (stage 9)' ROCKCFG_DO_REBUILD_STAGE 0

	if [ $ROCKCFG_CROSSBUILD != 1 ]; then
		bool 'Run a check/test for packages with support' ROCKCFG_DO_CHECK 0
	fi

	if [ $ROCKCFG_USE_CROSSCC != 1 ]; then
		pkgfilter sed 's,^\([XO] \)0,\1-,'
	fi

	if [ $ROCKCFG_DO_REBUILD_STAGE != 1 ]; then
		pkgfilter sed 's,^\([XO] [0-8-]*\)9 ,\1- ,'
	fi

	choice ROCKCFG_OPT speed \
		speed	'Hard optimise for speed (recommended)'		\
		size	'Hard optimise for size (sometimes faster)'	\
		lazy	'Lazy optimisiation (for debugging binaries)'	\
		smart   'Smart optimisiation using a profile database'	\
		bizarre 'Inverse smart optimisation (this is bizarre)'

	bool 'Create binaries with debug symbols' ROCKCFG_DEBUG 0
	bool 'Create statically linked binaries' ROCKCFG_STATIC 0

	bool 'Disable exceptions and rtti in C++' ROCKCFG_LIMITCXX 0
	bool 'Enable c-compiler multilib support' ROCKCFG_MULTILIB 0

	bool 'Disable National Language Support' ROCKCFG_DISABLE_NLS 0
	if [ "$ROCKCFG_DISABLE_NLS" = 1 ] ; then
		pkgremove gettext
	fi

	bool 'Automatic documentation creation' ROCKCFG_CREATE_DOCS 0

	bool 'Create cache files after packages have been built' \
						ROCKCFG_CREATE_CACHE 1

	bool 'Run Paranoia Checks in Build-Target and Build-Pkg' \
						ROCKCFG_PARANOIA_CHECK 1

	bool 'Abbreviate Config ID with checksum' ROCKCFG_IDCKSUM 0
    block_end
expert_end

%include package/*/*/postconfig.in
%include misc/*/postconfig.in
%include architecture/*/postconfig.in
%include target/*/postconfig.in

pkgfilter sed '/^[XO] --* / d;'

[ $ROCKCFG_EXPERT = 1 ] ||
	ROCKCFG_ID="`echo $ROCKCFG_ID | sed 's,-noexpert.*,,'`"

[ "$ROCKCFG_IDCKSUM" = 1 ] &&
	ROCKCFG_ID="`echo $ROCKCFG_ID | cksum | cut -f1 -d' '`"  

const ROCKCFG_SHORTID "$ROCKCFG_ID"
ROCKCFG_ID="$config-$ROCKCFG_ID"

