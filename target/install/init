#!/bin/sh

# partly based on linuxrc.c, Copyright (C) 2003, 2004 Cliford Wolf and Rene Rebe

echo "T2 early userspace ..."

PATH=/sbin:/bin:/usr/bin:/usr/sbin

echo "Mounting /dev, /proc and /sys ..."
mount -t tmpfs none /dev
mount -t proc  none /proc
mount -t usbfs none /proc/bus/usb
mount -t sysfs none /sys
ln -s /proc/self/fd /dev/fd

# later on we might reverse these, that is run udevstart first,
# and let udev add new ones as hotplug agents ...

echo "Running hotplug++ hardware detection ..."
/sbin/hotplug++ -synth
echo "/sbin/hotplug++" > /proc/sys/kernel/hotplug

echo "Loading additional subsystem and filesystem driver ..."
# hack to be removed
modprobe sbp2

# well some hardcoded help for now ...
modprobe ide-generic
modprobe ide-disk
modprobe ide-cd
modprobe sd_mod
modprobe sr_mod
modprobe sg

# the modular filesystems ...
for x in /lib/modules/*/kernel/fs/{*/,}*.*o ; do
	x=${x##*/} ; x=${x%.*o}
	modprobe $x
done

echo "Populating /dev (udev) ..."
/sbin/udevstart


# Only print important stuff to console
# klogctl(8, NULL, 3);


doboot()
{
	mkdir /mnt_root/old_root || exit_linuxrc=0

	if [ ! -e /mnt_root/linuxrc ]; then
	 	echo "Can't find /mnt_root/linuxrc."
		exit_linuxrc=0
	fi

	if [ $exit_linuxrc = 1 ]; then
		pivot_root /mnt_root /mnt_root/old_root
		exit_linuxrc=0
		cd /

		mount /old_root/dev /dev -o move
		mount /old_root/proc /proc -o move
	else
		rmdir /mnt_root/old_root

		umount /mnt_root
		rmdir /mnt_root
	fi
}

trymount ()
{
	for fs in iso9660 ext3 ext2 minix vfat; do
		mount $1 $2 -t $fs -o ro && return
	done
}

httpload() 
{
	baseurl=
	filename=
	url=

	echo "Enter base URL (e.g. http://1.2.3.4/t2): "

	read baseurl
	[ "$baseurl" ] || return

	echo "Select a stage 2 image file:
	            1. BIG_IMAGE   2. SMALL_IMAGE\n\n
	       Enter number or image file name (default=1): "

	read filename
	case $filename in
	  ""|1) filename=BIG_IMAGE ;;
	  2) filename=SMALL_IMAGE
	esac

	exit_init=1
	url=$baseurl/$filename

	echo -e "[ $url ]\n"
	export ROCK_INSTALL_SOURCE_URL=baseurl

	exit_linuxrc=1;
	mkdir /mnt_root || exit_linuxrc=0

	mount none /mnt_root -t tmpfs || exit_linuxrc=0

	curl $url | tar $STAGE_2_COMPRESS_ARG -C /mnt_root -x 
	
	echo "finished ... continuing execution of 2nd stage"
	doboot
}

/* this starts the module loading shell */
load_modules()
{
	echo "TODO: implement module loading shell"
}

getdevice()
{
	device=
	devicelist=`ls /dev/cdrom* /dev/floppy* 2>/dev/null`
	if [ -z "$devicelist" ]; then
		echo "No device found."
		return
	fi

	i=0
	for dev in $devicelist ; do
		x=`readlink $dev`; [ "$x" ] && [[ "$x" != /dev/* ]] && x=/dev/$x
		[ "$x" ] && dev=$x
		case $dev in
		  floppy*)
			echo "     $i. $dev	Floppy Disk Drive" ;;
		  *)
			model=`cat /proc/ide/${dev#/dev/}/model 2>/dev/null`
			[ "$model" ] || model="SCSI or ATAPI CD-ROM"
			echo "     $i. $dev	$model"
			;;
		esac
		: $(( i++ ))
	done

	echo -en "\nEnter number or device file name (default=0): "

	read in ; [ "$in" ] || in=0
	while [ -z "$device" ]; do
		[ -z "$in" ] && return
		if [ -e $in ]; then
			device=$in
		else
			i=0
			for x in $devicelist; do
				[ $in = $i ] && device=$x
				: $(( i++ ))
			done
		fi

		if [ -z "$device" ]; then
			echo -n "No such device found. Try again (enter=back): "
			read in
		fi
	done

	eval $1=$device
}

load_ramdisk_file()
{
	devicefile=
	filename=

	echo -e "Select a device for loading the 2nd stage system from:\n"

	getdevice devicefile
	if [ -z "$devicefile" ]; then
		echo "No device detected."
		return
	fi

	echo "Select a stage 2 image file:
	            1. BIG_IMAGE     2. SMALL_IMAGE
	       Enter number or image file name (default=1): "

	read in
	case $in in
	  ""|1) filename=BIG_IMAGE ;;
	  2) filename=SMALL_IMAGE ;;
	esac

	exit_linuxrc=1
	echo "Using $devicefile:$filename"

	mkdir /mnt_source || exit_linuxrc=0
	trymount devicefile /mnt_source || exit_linuxrc=0

	mkdir /mnt_root || exit_linuxrc=0
	mount none /mnt_root -t tmpfs || exit_linuxrc=0

	echo "Extracting 2nd stage filesystem to ram ..."
	tar $STAGE_2_COMPRESS_ARG -C /mnt_root -x  $filename ||
	echo "Can't run tar on $fielname."
	
	umount /mnt_source || exit_linuxrc=0
	rmdir /mnt_source || exit_linuxrc=0

	export ROCK_INSTALL_SOURCE_DEV=$devicefile
	export ROCK_INSTALL_SOURCE_FILE=$filename
	doboot
}	

activate_swap()
{
	echo -ne "\nEnter file name of swap device: "

	read in
	[ "$in" ] && swapon $in
}

config_net()
{
	ip addr ; echo
	ip route ; echo

	echo "Enter interface name (eth0): "
	read dev ; [ "$dev" ] || dev="eth0"

	echo "Enter ip (192.168.0.254/24): "
	read ip ; [ "$ip" ] || ip="192.168.0.254/24"

	ip addr add $ip dev $dev
	ip link set $dev up

	echo "Enter default gateway (none): "
	read gw
	[ "$gw" ] && ip route add default via $gw
	echo

	ip addr ; echo
	ip route
}

exec_sh()
{
	echo "Exit the shell to return to the stage 1 loader."

#	if type -p kiss > /dev/null; then
#		kiss -E
#	else
		sh
#	fi
}

load_modules_disk ()
{
	mkdir /mnt_floppy

	trymount /dev/floppy/0 /mnt_floppy
	load_modules /mnt_floppy

	umount /mnt_floppy
	rmdir  /mnt_floppy
}

echo "
     =================================
     ===   1st stage boot system   ===
     =================================

The T2 install system boots up in two stages. You are now in the first stage
and if everything goes right, you will not spend much time here. Just load
your SATA, SCSI or networking drivers and configure the installation source
so the 2nd stage boot system can be loaded and you can start the installation.
"
exit_init=0
while [ $exit_init = 0 ]; do
	echo "
     0. Load 2nd stage system from local device
     1. Load 2nd stage system from network
     2. Configure network interfaces (IPv4 only)
     3. Load kernel modules from this disk
     4. Load kernel modules from another disk
     5. Activate already formatted swap device
     6. Execute a (kiss) shell if present (for experts!)

What do you want to do [0-8] (default=0)?"
	read in
	case $in in
	  0|"")	load_ramdisk_file ;;
	  1)	httpload ;;
	  2)	config_net ;;
	  3)	load_modules ;;
	  4)	load_modules_disk ;;
	  5)	activate_swap ;;
	  6)	exec_sh ;;
	  *)    echo "No such option." ;;
	esac
done

sleep 1 # ???

exec /init /init

echo -e "\nCan't start /linuxrc!! Life sucks.\n\n"

