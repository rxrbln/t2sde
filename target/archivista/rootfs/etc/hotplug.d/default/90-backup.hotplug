#!/bin/bash

# Automated action based on the directory present. Either exporting PDFs or the
# MySQL database or even import, export keys or encrypt data. Graphical
# interaction thru Xdialog.
#
# Copyright (C) 2005 Archivista GmbH
# Copyright (C) 2005 Rene Rebe

exec >> /var/log/hot.log 2>&1 

gpg="gpg --homedir /home/archivista/.gnupg"

echo begin $*

# PATH and co
. /etc/profile

# Xdialog and friends
export DISPLAY=:0

# something for us?
[ "$ACTION" == add -a "$1" == "block" ] || exit

echo "ADDED block device"

name=${DEVPATH/*\/}
echo "name $name"

# work around USB issue failing to read partition table
if [[ $name = sd[a-z] ]]; then
	sleep 3

	echo "triggering read of partition table"
	sfdisk -l /dev/$name

	exit
fi

if [[ $name != sd[a-z]1 ]] ; then
	echo "Partition $name ignored for backup."
	exit
fi

# first determine type, depending on the existing directory:
# DB or PDF export, enc. key import/export, ...
type=""
mkdir -p /mnt/usbdisk
if mount /dev/$name /mnt/usbdisk 2> /dev/null ; then
	trap "cd / ; umount /mnt/usbdisk 2>/dev/null" EXIT
	dir=`ls -d /mnt/usbdisk/*/ | head -n 1 | cut -d / -f 4`
	type=`echo $dir | tr A-Z a-z`
	[ -z "$type" ] && type="pdf"
	echo $type
	dir=/mnt/usbdisk/$dir
	user=archivista

	case "$type" in
		# mysql backup
		backup) # restore of backup?
			if [ -e $dir/archivista ]; then
			  if Xdialog --yesno \
			     "Restore backup from device?" 8 30
			  then
				type=restore
				user=root
			  fi

			  if [ $type = restore ]; then
				Xdialog --yesno \
				"Really restore backup from device
and overwrite database?" 8 30 || exit
			  else # erase and backup ?
				Xdialog --yesno \
				"Erase backup to create
a new database backup?" 8 30 || exit
			  fi

			fi # end if backup found
			
			if [ $type = backup ]; then
				msg="To backup the database"
			else
			 	msg="To restore the database"
			fi
			;;
		# ecrypted export
		crypt) # export or import?
			if [ -s $dir/exchange ]; then
				msg="To import encrypted data"
				type=decrypt
			else
				msg="To crypt and export data"
			fi
			;;
                # import / export
                exchange) # export or import?
                        if ls $dir/* 2>&1 > /dev/null ; then
                                msg="To import data"
                                type=import
                        else
                                msg="To export data"
				type=export
                        fi
                        ;;
		key) # export or import?
			user=root
			if [ -e $dir/ade-key.asc ]; then
				msg="To import the public encryption key"
				type=key-import
			else
				msg="To export the public encryption key"
				type=key-export
			fi
			;;
		# pdf export
		pdf) msg="To export in PDF form" ;;
		*)
		Xdialog --msgbox 'The directory structure of the USB
device was not recognized.' 8 40
		exit
	esac

	if [ "$user" = root ]; then
		msg="$msg,^please enter the system password \(root user\)."
	else
		msg="$msg,^please enter the password for the archivista user."
	fi
	# authenticate via archivista ...
	if ! su archivista -c "`which gnomesu` -t Authentication \
	   -m ${msg// /\\ } -u $user -c /bin/true" ; then
		echo "User $user could not be authenticated."
		exit
	fi
fi

echo "authenticated for type: $type in dir $dir"

# now perform the action

error=1
msg='An unspecified error occured during
the operation (e.g. not implemented).'

get_range ()
{
  local x
  until [ "$x" ]; do
	tx=`Xdialog --stdout --cancel-label=All --inputbox "$1" 10 40 "$tx"` \
	   || return
	# remove spaces ...
	tx="${tx// /}"
	# remove invalid content
	if echo "$tx" | grep -q "^\([0-9]\+-[0-9]\+\|[0-9]\+\)$" ; then
		x=$tx
	else
		Xdialog --infobox "Range not valid!" 8 28
	fi
  done
  echo $x
}

get_db()
{
  db="archivista"
  while
	db=`Xdialog --stdout --no-cancel --inputbox "Database to use:" \
	    10 40 "$db"`
	[ -z "$db" ]
  do
	:
  done
  echo $db
}

case $type in
	backup)
		/usr/bin/perl /home/cvs/archivista/jobs/backup-mysql.pl $dir
		error=$?
		;;
	restore)
		: # TODO: code to restore the database and set error
		;;
	pdf)
		range=`get_range "Range of documents to export
(e.g. 2-4 or just 5):"`
                db=`get_db`
		/usr/bin/perl /home/cvs/archivista/jobs/exportpdf.pl $db $dir $range
		error=$?
		;;
	export)
		db=`get_db`
		range=`get_range "Range of documents to export
(e.g. 2-4 or just 5):"`
                /usr/bin/perl /home/cvs/archivista/jobs/avimpexport.pl exportdb $db $dir $range
		error=$?
		;;
	import)
		db=`get_db`
		/usr/bin/perl /home/cvs/archivista/jobs/avimpexport.pl importdb $db $dir
		error=$?
		;;
	# ade == archivista-data-exchange
	key-import)
		$gpg --import < $dir/ade-key.asc
		error=$?
		;;
	key-export)
		if ! $gpg --list-secret-keys ade > /dev/null; then
			error=1
			msg="A secret key was not yet generated.
The key generation can be found
in the System context menu."
		else
			$gpg -a --export ade > $dir/ade-key.asc
			error=$?
		fi
		;;
	crypt)
	  if ! $gpg --list-keys ade > /dev/null; then
		error=1
		msg="A public key was not yet imported.
Either import one via the USB drive or
generate a key pair via the
System context menu."
	  else
		db=`get_db`
		range=`get_range "Range of documents to crypt
(e.g. 2-4 or just 5):"`
                rm -Rf /home/data/archivista/expo
		/usr/bin/perl /home/cvs/archivista/jobs/avimpexport.pl exportdb $db /home/data/archivista/expo $range
		cd /home/data/archivista/expo/
		tar -cv . | $gpg --encrypt --default-recipient ade \
		> $dir/exchange
		error=$?
	  fi
		;;
	decrypt)
	  if ! $gpg --list-secret-keys ade > /dev/null; then
		error=1
		msg="A secret pair was not yet generated.
The key generation can be found
in the System context menu."
          else
		db=`get_db`
                mkdir -p /home/data/archivista/expo
		cd /home/data/archivista/expo && rm -rf *
		$gpg --decrypt < $dir/exchange | tar -xv
		/usr/bin/perl /home/cvs/archivista/jobs/avimpexport.pl importdb $db /home/data/archivista/expo
		error=$?
                rm -Rf /home/data/archivista/expo
	  fi
		;;
	*)
		echo "type not recognized in the 2nd place - should be a typo"
esac

cd / ; umount /mnt/usbdisk

if [ $error -eq 0 ]; then
	Xdialog --msgbox 'Operation finished. The USB
storage device can be safely removed, now.' 8 40
else
	Xdialog --msgbox "$msg" 8 40
fi

echo "end $*"
