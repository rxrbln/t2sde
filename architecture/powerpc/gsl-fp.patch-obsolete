# --- ROCK-COPYRIGHT-NOTE-BEGIN ---
# 
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# Please add additional copyright information _after_ the line containing
# the ROCK-COPYRIGHT-NOTE-END tag. Otherwise it might get removed by
# the ./scripts/Create-CopyPatch script. Do not edit this copyright text!
# 
# ROCK Linux: rock-src/architecture/powerpc/gsl-fp.patch
# ROCK Linux is Copyright (C) 1998 - 2003 Clifford Wolf
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version. A copy of the GNU General Public
# License can be found at Documentation/COPYING.
# 
# Many people helped and are helping developing ROCK Linux. Please
# have a look at http://www.rocklinux.org/ and the Documentation/TEAM
# file for details.
# 
# --- ROCK-COPYRIGHT-NOTE-END ---

--- ieee-utils/fp-linux.c.orig	Thu Aug 17 14:06:45 2000
+++ ieee-utils/fp-linux.c	Thu Aug 17 14:07:06 2000
@@ -1,71 +1,11 @@
-#include <stdio.h>
-#include <fpu_control.h>
-#include <gsl_errno.h>
+#include <config.h>
 #include <gsl_ieee_utils.h>
+#include <gsl_errno.h>
 
 int
 gsl_ieee_set_mode (int precision, int rounding, int exception_mask)
 {
-  unsigned short mode = 0 ;
-
-  switch (precision)
-    {
-    case GSL_IEEE_SINGLE_PRECISION:
-      mode |= _FPU_SINGLE ;
-      break ;
-    case GSL_IEEE_DOUBLE_PRECISION:
-      mode |= _FPU_DOUBLE ;
-      break ;
-    case GSL_IEEE_EXTENDED_PRECISION:
-      mode |= _FPU_EXTENDED ;
-      break ;
-    default:
-      mode |= _FPU_EXTENDED ;
-    }
-
-  switch (rounding)
-    {
-    case GSL_IEEE_ROUND_TO_NEAREST:
-      mode |= _FPU_RC_NEAREST ;
-      break ;
-    case GSL_IEEE_ROUND_DOWN:
-      mode |= _FPU_RC_DOWN ;
-      break ;
-    case GSL_IEEE_ROUND_UP:
-      mode |= _FPU_RC_UP ;
-      break ;
-    case GSL_IEEE_ROUND_TO_ZERO:
-      mode |= _FPU_RC_ZERO ;
-      break ;
-    default:
-      mode |= _FPU_RC_NEAREST ;
-    }
-
-  if (exception_mask & GSL_IEEE_MASK_INVALID)
-    mode |= _FPU_MASK_IM ;
-
-  if (exception_mask & GSL_IEEE_MASK_DENORMALIZED)
-    mode |= _FPU_MASK_DM ;
-
-  if (exception_mask & GSL_IEEE_MASK_DIVISION_BY_ZERO)
-    mode |= _FPU_MASK_ZM ;
-
-  if (exception_mask & GSL_IEEE_MASK_OVERFLOW)
-    mode |= _FPU_MASK_OM ;
-
-  if (exception_mask & GSL_IEEE_MASK_UNDERFLOW)
-    mode |= _FPU_MASK_UM ;
-
-  if (exception_mask & GSL_IEEE_TRAP_INEXACT)
-    {
-      mode &= ~ _FPU_MASK_PM ;
-    }
-  else
-    {
-      mode |= _FPU_MASK_PM ;
-    }
-
-  _FPU_SETCW(mode) ;
-
-  return GSL_SUCCESS ;
+  GSL_ERROR (
+"the IEEE interface for this platform is unsupported or could not be "
+"determined at configure time\n", GSL_EUNSUP) ;
 }
